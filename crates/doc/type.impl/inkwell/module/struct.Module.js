(function() {
    var type_impls = Object.fromEntries([["wasmer_compiler_llvm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Module%3C'_%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Module%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Module&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Module&lt;'_&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasmer_compiler_llvm::config::InkwellModule"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Module%3C'ctx%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Module%3C'ctx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'ctx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Module&lt;'ctx&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmer_compiler_llvm::config::InkwellModule"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Module%3C'_%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Module%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Module&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","wasmer_compiler_llvm::config::InkwellModule"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Module%3C'ctx%3E\" class=\"impl\"><a href=\"#impl-Module%3C'ctx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'ctx&gt; Module&lt;'ctx&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">new</a>(module: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.pointer.html\">*mut </a>LLVMModule) -&gt; Module&lt;'ctx&gt;</h4></section></summary><div class=\"docblock\"><p>Get a module from an [LLVMModuleRef].</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The ref must be valid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.pointer.html\">*mut </a>LLVMModule</h4></section></summary><div class=\"docblock\"><p>Acquires the underlying raw pointer belonging to this <code>Module</code> type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_function\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_function</a>(\n    &amp;self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    ty: FunctionType&lt;'ctx&gt;,\n    linkage: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Linkage&gt;,\n) -&gt; FunctionValue&lt;'ctx&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a function given its <code>name</code> and <code>ty</code>, adds it to the <code>Module</code>\nand returns it.</p>\n<p>An optional <code>linkage</code> can be specified, without which the default value\n<code>Linkage::ExternalLinkage</code> will be used.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::{Module, Linkage};\n<span class=\"kw\">use </span>inkwell::types::FunctionType;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n\n<span class=\"kw\">let </span>fn_type = context.f32_type().fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>fn_val = module.add_function(<span class=\"string\">\"my_function\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(fn_val.get_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_function\"</span>));\n<span class=\"macro\">assert_eq!</span>(fn_val.get_linkage(), Linkage::External);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_context</a>(&amp;self) -&gt; ContextRef&lt;'ctx&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the <code>Context</code> from which this <code>Module</code> originates.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::{Context, ContextRef};\n<span class=\"kw\">use </span>inkwell::module::Module;\n\n<span class=\"kw\">let </span>local_context = Context::create();\n<span class=\"kw\">let </span>local_module = local_context.create_module(<span class=\"string\">\"my_module\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(local_module.get_context(), local_context);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_first_function\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_first_function</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FunctionValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the first <code>FunctionValue</code> defined in this <code>Module</code>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_first_function().is_none());\n\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>fn_value = module.add_function(<span class=\"string\">\"my_fn\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(fn_value, module.get_first_function().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_last_function\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_last_function</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FunctionValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the last <code>FunctionValue</code> defined in this <code>Module</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_last_function().is_none());\n\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>fn_value = module.add_function(<span class=\"string\">\"my_fn\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(fn_value, module.get_last_function().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_function\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_function</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FunctionValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a <code>FunctionValue</code> defined in this <code>Module</code> by its name.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_function(<span class=\"string\">\"my_fn\"</span>).is_none());\n\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>fn_value = module.add_function(<span class=\"string\">\"my_fn\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(fn_value, module.get_function(<span class=\"string\">\"my_fn\"</span>).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_functions\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_functions</a>(&amp;self) -&gt; FunctionIterator&lt;'ctx&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over the functions in this <code>Module</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_function(<span class=\"string\">\"my_fn\"</span>).is_none());\n\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>fn_value = module.add_function(<span class=\"string\">\"my_fn\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>names: Vec&lt;String&gt; = module\n    .get_functions()\n    .map(|f| f.get_name().to_string_lossy().to_string())\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"string\">\"my_fn\"</span>.to_owned()], names);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_struct_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_struct_type</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;StructType&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a named <code>StructType</code> from this <code>Module</code>’s <code>Context</code>.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_struct_type(<span class=\"string\">\"foo\"</span>).is_none());\n\n<span class=\"kw\">let </span>opaque = context.opaque_struct_type(<span class=\"string\">\"foo\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_struct_type(<span class=\"string\">\"foo\"</span>).unwrap(), opaque);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_triple\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_triple</a>(&amp;self, triple: &amp;TargetTriple)</h4></section></summary><div class=\"docblock\"><p>Assigns a <code>TargetTriple</code> to this <code>Module</code>.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::targets::{Target, TargetTriple};\n\nTarget::initialize_x86(<span class=\"kw-2\">&amp;</span>Default::default());\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>triple = TargetTriple::create(<span class=\"string\">\"x86_64-pc-linux-gnu\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_triple(), TargetTriple::create(<span class=\"string\">\"\"</span>));\n\nmodule.set_triple(<span class=\"kw-2\">&amp;</span>triple);\n\n<span class=\"macro\">assert_eq!</span>(module.get_triple(), triple);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_triple\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_triple</a>(&amp;self) -&gt; TargetTriple</h4></section></summary><div class=\"docblock\"><p>Gets the <code>TargetTriple</code> assigned to this <code>Module</code>. If none has been\nassigned, the triple will default to “”.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::targets::{Target, TargetTriple};\n\nTarget::initialize_x86(<span class=\"kw-2\">&amp;</span>Default::default());\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>triple = TargetTriple::create(<span class=\"string\">\"x86_64-pc-linux-gnu\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_triple(), TargetTriple::create(<span class=\"string\">\"\"</span>));\n\nmodule.set_triple(<span class=\"kw-2\">&amp;</span>triple);\n\n<span class=\"macro\">assert_eq!</span>(module.get_triple(), triple);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_execution_engine\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">create_execution_engine</a>(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ExecutionEngine&lt;'ctx&gt;, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an <code>ExecutionEngine</code> from this <code>Module</code>.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n<span class=\"kw\">use </span>inkwell::targets::{InitializationConfig, Target};\n\nTarget::initialize_native(<span class=\"kw-2\">&amp;</span>InitializationConfig::default()).expect(<span class=\"string\">\"Failed to initialize native target\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>execution_engine = module.create_execution_engine().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_context(), context);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_interpreter_execution_engine\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">create_interpreter_execution_engine</a>(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ExecutionEngine&lt;'ctx&gt;, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an interpreter <code>ExecutionEngine</code> from this <code>Module</code>.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n<span class=\"kw\">use </span>inkwell::targets::{InitializationConfig, Target};\n\nTarget::initialize_native(<span class=\"kw-2\">&amp;</span>InitializationConfig::default()).expect(<span class=\"string\">\"Failed to initialize native target\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>execution_engine = module.create_interpreter_execution_engine().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_context(), context);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_jit_execution_engine\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">create_jit_execution_engine</a>(\n    &amp;self,\n    opt_level: <a class=\"enum\" href=\"wasmer_compiler_llvm/enum.LLVMOptLevel.html\" title=\"enum wasmer_compiler_llvm::LLVMOptLevel\">OptimizationLevel</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ExecutionEngine&lt;'ctx&gt;, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a JIT <code>ExecutionEngine</code> from this <code>Module</code>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::OptimizationLevel;\n<span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n<span class=\"kw\">use </span>inkwell::targets::{InitializationConfig, Target};\n\nTarget::initialize_native(<span class=\"kw-2\">&amp;</span>InitializationConfig::default()).expect(<span class=\"string\">\"Failed to initialize native target\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>execution_engine = module.create_jit_execution_engine(OptimizationLevel::None).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_context(), context);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_global\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_global</a>&lt;T&gt;(\n    &amp;self,\n    type_: T,\n    address_space: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;AddressSpace&gt;,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n) -&gt; GlobalValue&lt;'ctx&gt;<div class=\"where\">where\n    T: BasicType&lt;'ctx&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a <code>GlobalValue</code> based on a type in an address space.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::AddressSpace;\n<span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>i8_type = context.i8_type();\n<span class=\"kw\">let </span>global = module.add_global(i8_type, <span class=\"prelude-val\">Some</span>(AddressSpace::from(<span class=\"number\">1u16</span>)), <span class=\"string\">\"my_global\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_first_global().unwrap(), global);\n<span class=\"macro\">assert_eq!</span>(module.get_last_global().unwrap(), global);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bitcode_to_path\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_bitcode_to_path</a>(&amp;self, path: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Writes a <code>Module</code> to a <code>Path</code>.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = Path::new(<span class=\"string\">\"module.bc\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n\nmodule.add_function(<span class=\"string\">\"my_fn\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\nmodule.write_bitcode_to_path(<span class=\"kw-2\">&amp;</span>path);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bitcode_to_file\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_bitcode_to_file</a>(\n    &amp;self,\n    file: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a>,\n    should_close: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    unbuffered: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p><code>write_bitcode_to_path</code> should be preferred over this method, as it does not work on all operating systems.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bitcode_to_memory\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_bitcode_to_memory</a>(&amp;self) -&gt; MemoryBuffer</h4></section></summary><div class=\"docblock\"><p>Writes this <code>Module</code> to a <code>MemoryBuffer</code>.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>void_type = context.void_type();\n<span class=\"kw\">let </span>fn_type = void_type.fn_type(<span class=\"kw-2\">&amp;</span>[], <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>f = module.add_function(<span class=\"string\">\"f\"</span>, fn_type, <span class=\"prelude-val\">None</span>);\n<span class=\"kw\">let </span>basic_block = context.append_basic_block(f, <span class=\"string\">\"entry\"</span>);\n<span class=\"kw\">let </span>builder = context.create_builder();\n\nbuilder.position_at_end(basic_block);\nbuilder.build_return(<span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>buffer = module.write_bitcode_to_memory();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">verify</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Ensures that the current <code>Module</code> is valid, and returns a <code>Result</code>\nthat describes whether or not it is, returning a LLVM allocated string on error.</p>\n<h5 id=\"remarks\"><a class=\"doc-anchor\" href=\"#remarks\">§</a>Remarks</h5>\n<p>See also: http://llvm.org/doxygen/Analysis_2Analysis_8cpp_source.html</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_data_layout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_data_layout</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, DataLayout&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a smart pointer to the <code>DataLayout</code> belonging to a particular <code>Module</code>.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::OptimizationLevel;\n<span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::targets::{InitializationConfig, Target};\n\nTarget::initialize_native(<span class=\"kw-2\">&amp;</span>InitializationConfig::default()).expect(<span class=\"string\">\"Failed to initialize native target\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"sum\"</span>);\n<span class=\"kw\">let </span>execution_engine = module.create_jit_execution_engine(OptimizationLevel::None).unwrap();\n<span class=\"kw\">let </span>target_data = execution_engine.get_target_data();\n<span class=\"kw\">let </span>data_layout = target_data.get_data_layout();\n\nmodule.set_data_layout(<span class=\"kw-2\">&amp;</span>data_layout);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>module.get_data_layout(), data_layout);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_data_layout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_data_layout</a>(&amp;self, data_layout: &amp;DataLayout)</h4></section></summary><div class=\"docblock\"><p>Sets the <code>DataLayout</code> for a particular <code>Module</code>.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::OptimizationLevel;\n<span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::targets::{InitializationConfig, Target};\n\nTarget::initialize_native(<span class=\"kw-2\">&amp;</span>InitializationConfig::default()).expect(<span class=\"string\">\"Failed to initialize native target\"</span>);\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"sum\"</span>);\n<span class=\"kw\">let </span>execution_engine = module.create_jit_execution_engine(OptimizationLevel::None).unwrap();\n<span class=\"kw\">let </span>target_data = execution_engine.get_target_data();\n<span class=\"kw\">let </span>data_layout = target_data.get_data_layout();\n\nmodule.set_data_layout(<span class=\"kw-2\">&amp;</span>data_layout);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>module.get_data_layout(), data_layout);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.print_to_stderr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">print_to_stderr</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Prints the content of the <code>Module</code> to stderr.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.print_to_string\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">print_to_string</a>(&amp;self) -&gt; LLVMString</h4></section></summary><div class=\"docblock\"><p>Prints the content of the <code>Module</code> to an <code>LLVMString</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.print_to_file\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">print_to_file</a>&lt;P&gt;(&amp;self, path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, LLVMString&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Prints the content of the <code>Module</code> to a file.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Prints the content of the <code>Module</code> to a <code>String</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_inline_assembly\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_inline_assembly</a>(&amp;self, asm: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the inline assembly for the <code>Module</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_global_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_global_metadata</a>(\n    &amp;self,\n    key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    metadata: &amp;MetadataValue&lt;'ctx&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Appends a <code>MetaDataValue</code> to a global list indexed by a particular key.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>bool_type = context.bool_type();\n<span class=\"kw\">let </span>f32_type = context.f32_type();\n<span class=\"kw\">let </span>bool_val = bool_type.const_int(<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>f32_val = f32_type.const_float(<span class=\"number\">0.0</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>md_string = context.metadata_string(<span class=\"string\">\"lots of metadata here\"</span>);\n<span class=\"kw\">let </span>md_node = context.metadata_node(<span class=\"kw-2\">&amp;</span>[bool_val.into(), f32_val.into()]);\n\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_string).unwrap();\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_node).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>global_md = module.get_global_metadata(<span class=\"string\">\"my_md\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(global_md.len(), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>(md_0, md_1) = (global_md[<span class=\"number\">0</span>].get_node_values(), global_md[<span class=\"number\">1</span>].get_node_values());\n\n<span class=\"macro\">assert_eq!</span>(md_0.len(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(md_1.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(md_0[<span class=\"number\">0</span>].into_metadata_value().get_string_value(), md_string.get_string_value());\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">0</span>].into_int_value(), bool_val);\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">1</span>].into_float_value(), f32_val);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_global_metadata_size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_global_metadata_size</a>(&amp;self, key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Obtains the number of <code>MetaDataValue</code>s indexed by a particular key.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>bool_type = context.bool_type();\n<span class=\"kw\">let </span>f32_type = context.f32_type();\n<span class=\"kw\">let </span>bool_val = bool_type.const_int(<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>f32_val = f32_type.const_float(<span class=\"number\">0.0</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>md_string = context.metadata_string(<span class=\"string\">\"lots of metadata here\"</span>);\n<span class=\"kw\">let </span>md_node = context.metadata_node(<span class=\"kw-2\">&amp;</span>[bool_val.into(), f32_val.into()]);\n\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_string).unwrap();\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_node).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>global_md = module.get_global_metadata(<span class=\"string\">\"my_md\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(global_md.len(), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>(md_0, md_1) = (global_md[<span class=\"number\">0</span>].get_node_values(), global_md[<span class=\"number\">1</span>].get_node_values());\n\n<span class=\"macro\">assert_eq!</span>(md_0.len(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(md_1.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(md_0[<span class=\"number\">0</span>].into_metadata_value().get_string_value(), md_string.get_string_value());\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">0</span>].into_int_value(), bool_val);\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">1</span>].into_float_value(), f32_val);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_global_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_global_metadata</a>(&amp;self, key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;MetadataValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Obtains the global <code>MetaDataValue</code> node indexed by key, which may contain 1 string or multiple values as its <code>get_node_values()</code></p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n<span class=\"kw\">let </span>bool_type = context.bool_type();\n<span class=\"kw\">let </span>f32_type = context.f32_type();\n<span class=\"kw\">let </span>bool_val = bool_type.const_int(<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>f32_val = f32_type.const_float(<span class=\"number\">0.0</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>md_string = context.metadata_string(<span class=\"string\">\"lots of metadata here\"</span>);\n<span class=\"kw\">let </span>md_node = context.metadata_node(<span class=\"kw-2\">&amp;</span>[bool_val.into(), f32_val.into()]);\n\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_string).unwrap();\nmodule.add_global_metadata(<span class=\"string\">\"my_md\"</span>, <span class=\"kw-2\">&amp;</span>md_node).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(module.get_global_metadata_size(<span class=\"string\">\"my_md\"</span>), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>global_md = module.get_global_metadata(<span class=\"string\">\"my_md\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(global_md.len(), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>(md_0, md_1) = (global_md[<span class=\"number\">0</span>].get_node_values(), global_md[<span class=\"number\">1</span>].get_node_values());\n\n<span class=\"macro\">assert_eq!</span>(md_0.len(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(md_1.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(md_0[<span class=\"number\">0</span>].into_metadata_value().get_string_value(), md_string.get_string_value());\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">0</span>].into_int_value(), bool_val);\n<span class=\"macro\">assert_eq!</span>(md_1[<span class=\"number\">1</span>].into_float_value(), f32_val);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_first_global\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_first_global</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GlobalValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the first <code>GlobalValue</code> in a module.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::AddressSpace;\n<span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>i8_type = context.i8_type();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n\n<span class=\"macro\">assert!</span>(module.get_first_global().is_none());\n\n<span class=\"kw\">let </span>global = module.add_global(i8_type, <span class=\"prelude-val\">Some</span>(AddressSpace::from(<span class=\"number\">4u16</span>)), <span class=\"string\">\"my_global\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_first_global().unwrap(), global);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_last_global\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_last_global</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GlobalValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the last <code>GlobalValue</code> in a module.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::AddressSpace;\n<span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>i8_type = context.i8_type();\n\n<span class=\"macro\">assert!</span>(module.get_last_global().is_none());\n\n<span class=\"kw\">let </span>global = module.add_global(i8_type, <span class=\"prelude-val\">Some</span>(AddressSpace::from(<span class=\"number\">4u16</span>)), <span class=\"string\">\"my_global\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_last_global().unwrap(), global);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_global\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_global</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GlobalValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a named <code>GlobalValue</code> in a module.</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::AddressSpace;\n<span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>i8_type = context.i8_type();\n\n<span class=\"macro\">assert!</span>(module.get_global(<span class=\"string\">\"my_global\"</span>).is_none());\n\n<span class=\"kw\">let </span>global = module.add_global(i8_type, <span class=\"prelude-val\">Some</span>(AddressSpace::from(<span class=\"number\">4u16</span>)), <span class=\"string\">\"my_global\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_global(<span class=\"string\">\"my_global\"</span>).unwrap(), global);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_globals\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_globals</a>(&amp;self) -&gt; GlobalIterator&lt;'ctx&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over the globals in this <code>Module</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_bitcode_from_buffer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parse_bitcode_from_buffer</a>(\n    buffer: &amp;MemoryBuffer,\n    context: impl AsContextRef&lt;'ctx&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Module&lt;'ctx&gt;, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Module</code> from a <code>MemoryBuffer</code> with bitcode.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n<span class=\"kw\">use </span>inkwell::memory_buffer::MemoryBuffer;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo/bar.bc\"</span>);\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>buffer = MemoryBuffer::create_from_file(<span class=\"kw-2\">&amp;</span>path).unwrap();\n<span class=\"kw\">let </span>module = Module::parse_bitcode_from_buffer(<span class=\"kw-2\">&amp;</span>buffer, <span class=\"kw-2\">&amp;</span>context);\n\n<span class=\"macro\">assert_eq!</span>(module.unwrap().get_context(), context);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_bitcode_from_path\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parse_bitcode_from_path</a>&lt;P&gt;(\n    path: P,\n    context: impl AsContextRef&lt;'ctx&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Module&lt;'ctx&gt;, LLVMString&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>A convenience function for creating a <code>Module</code> from a bitcode file for a given context.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n<span class=\"kw\">use </span>inkwell::module::Module;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo/bar.bc\"</span>);\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = Module::parse_bitcode_from_path(<span class=\"kw-2\">&amp;</span>path, <span class=\"kw-2\">&amp;</span>context);\n\n<span class=\"macro\">assert_eq!</span>(module.unwrap().get_context(), context);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_name</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Gets the name of this <code>Module</code>.</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mdoule\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_name</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Assigns the name of this <code>Module</code>.</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_module\"</span>);\n\nmodule.set_name(<span class=\"string\">\"my_module2\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_module2\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_source_file_name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_source_file_name</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Gets the source file name. It defaults to the module identifier but is separate from it.</p>\n<h5 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_source_file_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod\"</span>));\n\nmodule.set_source_file_name(<span class=\"string\">\"my_mod.rs\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod\"</span>));\n<span class=\"macro\">assert_eq!</span>(module.get_source_file_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod.rs\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_source_file_name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_source_file_name</a>(&amp;self, file_name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the source file name. It defaults to the module identifier but is separate from it.</p>\n<h5 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"my_mod\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_source_file_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod\"</span>));\n\nmodule.set_source_file_name(<span class=\"string\">\"my_mod.rs\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(module.get_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod\"</span>));\n<span class=\"macro\">assert_eq!</span>(module.get_source_file_name().to_str(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"my_mod.rs\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.link_in_module\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">link_in_module</a>(&amp;self, other: Module&lt;'ctx&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Links one module into another. This will merge two <code>Module</code>s into one.</p>\n<h5 id=\"example-28\"><a class=\"doc-anchor\" href=\"#example-28\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>inkwell::context::Context;\n\n<span class=\"kw\">let </span>context = Context::create();\n<span class=\"kw\">let </span>module = context.create_module(<span class=\"string\">\"mod\"</span>);\n<span class=\"kw\">let </span>module2 = context.create_module(<span class=\"string\">\"mod2\"</span>);\n\n<span class=\"macro\">assert!</span>(module.link_in_module(module2).is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_comdat\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_comdat</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; Comdat</h4></section></summary><div class=\"docblock\"><p>Gets the <code>Comdat</code> associated with a particular name. If it does not exist, it will be created.\nA new <code>Comdat</code> defaults to a kind of <code>ComdatSelectionKind::Any</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_flag\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_flag</a>(&amp;self, key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MetadataValue&lt;'ctx&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the <code>MetadataValue</code> flag associated with the key in this module, if any.\nIf a <code>BasicValue</code> was used to create this flag, it will be wrapped in a <code>MetadataValue</code>\nwhen returned from this function.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_metadata_flag\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_metadata_flag</a>(\n    &amp;self,\n    key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    behavior: FlagBehavior,\n    flag: MetadataValue&lt;'ctx&gt;,\n)</h4></section></summary><div class=\"docblock\"><p>Append a <code>MetadataValue</code> as a module wide flag. Note that using the same key twice\nwill likely invalidate the module.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_basic_value_flag\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_basic_value_flag</a>&lt;BV&gt;(\n    &amp;self,\n    key: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    behavior: FlagBehavior,\n    flag: BV,\n)<div class=\"where\">where\n    BV: BasicValue&lt;'ctx&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Append a <code>BasicValue</code> as a module wide flag. Note that using the same key twice\nwill likely invalidate the module.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_debug_info\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">strip_debug_info</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Strips and debug info from the module, if it exists.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_debug_metadata_version\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_debug_metadata_version</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Gets the version of debug metadata contained in this <code>Module</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_debug_info_builder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">create_debug_info_builder</a>(\n    &amp;self,\n    allow_unresolved: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    language: DWARFSourceLanguage,\n    filename: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    directory: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    producer: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    is_optimized: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    flags: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    runtime_ver: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    split_name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    kind: DWARFEmissionKind,\n    dwo_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>,\n    split_debug_inlining: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    debug_info_for_profiling: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,\n    sysroot: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    sdk: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n) -&gt; (DebugInfoBuilder&lt;'ctx&gt;, DICompileUnit&lt;'ctx&gt;)</h4></section></summary><div class=\"docblock\"><p>Creates a <code>DebugInfoBuilder</code> for this <code>Module</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_passes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">run_passes</a>(\n    &amp;self,\n    passes: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a>,\n    machine: &amp;TargetMachine,\n    options: PassBuilderOptions,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, LLVMString&gt;</h4></section></summary><div class=\"docblock\"><p>Construct and run a set of passes over a module.\nThis function takes a string with the passes that should be used.\nThe format of this string is the same as opt’s -passes argument for the new pass manager.\nIndividual passes may be specified, separated by commas.\nFull pipelines may also be invoked using default<O3> and friends.\nSee opt for full reference of the Passes format.</p>\n</div></details></div></details>",0,"wasmer_compiler_llvm::config::InkwellModule"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Module%3C'ctx%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Module%3C'ctx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'ctx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Module&lt;'ctx&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Module&lt;'ctx&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","wasmer_compiler_llvm::config::InkwellModule"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PassManagerSubType-for-Module%3C'_%3E\" class=\"impl\"><a href=\"#impl-PassManagerSubType-for-Module%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PassManagerSubType for Module&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Input\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Input\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Input</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a></h4></section><section id=\"method.create\" class=\"method trait-impl\"><a href=\"#method.create\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">create</a>&lt;I&gt;(_: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.pointer.html\">*mut </a>LLVMPassManager<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;&lt;Module&lt;'_&gt; as PassManagerSubType&gt;::Input&gt;,</div></h4></section><section id=\"method.run_in_pass_manager\" class=\"method trait-impl\"><a href=\"#method.run_in_pass_manager\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">run_in_pass_manager</a>(\n    &amp;self,\n    pass_manager: &amp;PassManager&lt;Module&lt;'_&gt;&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","PassManagerSubType","wasmer_compiler_llvm::config::InkwellModule"],["<section id=\"impl-Eq-for-Module%3C'ctx%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Module%3C'ctx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'ctx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Module&lt;'ctx&gt;</h3></section>","Eq","wasmer_compiler_llvm::config::InkwellModule"],["<section id=\"impl-StructuralPartialEq-for-Module%3C'ctx%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Module%3C'ctx%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'ctx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for Module&lt;'ctx&gt;</h3></section>","StructuralPartialEq","wasmer_compiler_llvm::config::InkwellModule"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[70460]}