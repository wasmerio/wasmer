(function() {
    var type_impls = Object.fromEntries([["wasmer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#7\">Source</a><a href=\"#impl-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_null\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.84.0\">1.0.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#39\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the pointer is null.</p>\n<p>Note that unsized types have many possible null pointers, as only the\nraw data pointer is considered, not their length, vtable, etc.\nTherefore, two pointers that are null may still not compare equal to\neach other.</p>\n<h5 id=\"panics-during-const-evaluation\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation\">§</a>Panics during const evaluation</h5>\n<p>If this method is used during const evaluation, and <code>self</code> is a pointer\nthat is offset beyond the bounds of the memory it initially pointed to,\nthen there might not be enough information to determine whether the\npointer is null. This is because the absolute address in memory is not\nknown at compile time. If the nullness of the pointer cannot be\ndetermined, this method will panic.</p>\n<p>In-bounds pointers are never null, so the method will never panic for\nsuch pointers.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"Follow the rabbit\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n<span class=\"macro\">assert!</span>(!ptr.is_null());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.38.0\">1.38.0 (const: 1.38.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#65\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a></h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_metadata_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#122-124\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.with_metadata_of\" class=\"fn\">with_metadata_of</a>&lt;U&gt;(self, meta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>set_ptr_value</code>)</span></div></span></summary><div class=\"docblock\"><p>Uses the address value in a new pointer of another type.</p>\n<p>This operation will ignore the address part of its <code>meta</code> operand and discard existing\nmetadata of <code>self</code>. For pointers to a sized types (thin pointers), this has the same effect\nas a simple cast. For pointers to an unsized type (fat pointers) this recombines the address\nwith new metadata such as slice lengths or <code>dyn</code>-vtable.</p>\n<p>The resulting pointer will have provenance of <code>self</code>. This operation is semantically the\nsame as creating a new pointer with the data pointer value of <code>self</code> but the metadata of\n<code>meta</code>, being fat or thin depending on the <code>meta</code> operand.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>This function is primarily useful for enabling pointer arithmetic on potentially fat\npointers. The pointer is cast to a sized pointee to utilize offset operations and then\nrecombined with its own original metadata.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span>arr: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = arr.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">dyn </span>Debug;\n<span class=\"kw\">let </span>thin = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">unsafe </span>{\n    ptr = thin.add(<span class=\"number\">8</span>).with_metadata_of(ptr);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw-2\">&amp;*</span>ptr); <span class=\"comment\">// will print \"3\"\n</span>}</code></pre></div>\n<h5 id=\"incorrect-usage\"><a class=\"doc-anchor\" href=\"#incorrect-usage\">§</a><em>Incorrect</em> usage</h5>\n<p>The provenance from pointers is <em>not</em> combined. The result must only be used to refer to the\naddress allowed by <code>self</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">1u32</span>;\n\n<span class=\"kw\">let </span>x = (<span class=\"kw-2\">&amp;</span>x) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32;\n<span class=\"kw\">let </span>y = (<span class=\"kw-2\">&amp;</span>y) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32;\n\n<span class=\"kw\">let </span>offset = (x <span class=\"kw\">as </span>usize - y <span class=\"kw\">as </span>usize) / <span class=\"number\">4</span>;\n<span class=\"kw\">let </span>bad = x.wrapping_add(offset).with_metadata_of(y);\n\n<span class=\"comment\">// This dereference is UB. The pointer only has provenance for `x` but points to `y`.\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>bad });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.65.0, const since 1.65.0\">1.65.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#137\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Changes constness without changing the type.</p>\n<p>This is a bit safer than <code>as</code> because it wouldn’t silently change the type if the code is\nrefactored.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#166\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>This is similar to <code>self as usize</code>, except that the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of\nthe pointer is discarded and not <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#exposed-provenance\" title=\"mod core::ptr\">exposed</a>. This means that\ncasting the returned address back to a pointer yields a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.without_provenance.html\" title=\"fn core::ptr::without_provenance\">pointer without\nprovenance</a>, which is undefined behavior to dereference. To properly\nrestore the lost information and obtain a dereferenceable pointer, use\n<a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a> or <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>map_addr</code></a>.</p>\n<p>If using those APIs is not possible because there is no way to preserve a pointer with the\nrequired provenance, then Strict Provenance might not be for you. Use pointer-integer casts\nor <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.expose_provenance\" title=\"method pointer::expose_provenance\"><code>expose_provenance</code></a> and <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a>\ninstead. However, note that this makes your code less portable and less amenable to tools\nthat check for compliance with the Rust memory model.</p>\n<p>On most platforms this will produce a value with the same bytes as the original\npointer, because all the bytes are dedicated to describing the address.\nPlatforms which need to store additional information in the pointer may\nperform a change of representation to produce a value containing only the address\nportion of the pointer. What that means is up to the platform to define.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expose_provenance\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#200\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Exposes the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">“provenance”</a> part of the pointer for future use in\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> and returns the “address” portion.</p>\n<p>This is equivalent to <code>self as usize</code>, which semantically discards provenance information.\nFurthermore, this (like the <code>as</code> cast) has the implicit side-effect of marking the\nprovenance as ‘exposed’, so on platforms that support it you can later call\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to reconstitute the original pointer including its provenance.</p>\n<p>Due to its inherent ambiguity, <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> may not be supported by tools\nthat help you to stay conformant with the Rust memory model. It is recommended to use\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> APIs such as <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>\nwherever possible, in which case <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>addr</code></a> should be used instead of <code>expose_provenance</code>.</p>\n<p>On most platforms this will produce a value with the same bytes as the original pointer,\nbecause all the bytes are dedicated to describing the address. Platforms which need to store\nadditional information in the pointer may not support this operation, since the ‘expose’\nside-effect which is required for <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to work is typically not\navailable.</p>\n<p>This is an <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#exposed-provenance\" title=\"mod core::ptr\">Exposed Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#218\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Creates a new pointer with the given address and the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of\n<code>self</code>.</p>\n<p>This is similar to a <code>addr as *const T</code> cast, but copies\nthe <em>provenance</em> of <code>self</code> to the new pointer.\nThis avoids the inherent ambiguity of the unary cast.</p>\n<p>This is equivalent to using <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>wrapping_offset</code></a> to offset\n<code>self</code> to the given address, and therefore has all the same capabilities and restrictions.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#237\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.map_addr\" class=\"fn\">map_addr</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one, preserving the\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of <code>self</code>.</p>\n<p>This is a convenience for <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>, see that method for details.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#246\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0, const since 1.84.0\">1.9.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#297\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. If the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"panics-during-const-evaluation-1\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation-1\">§</a>Panics during const evaluation</h5>\n<p>This method will panic during const evaluation if the pointer cannot be\ndetermined to be null or not. See <a href=\"#method.is_null\"><code>is_null</code></a> for more information.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_ref() {\n        <span class=\"macro\">assert_eq!</span>(val_back, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n    }\n}</code></pre></div>\n<h5 id=\"null-unchecked-version\"><a class=\"doc-anchor\" href=\"#null-unchecked-version\">§</a>Null-unchecked version</h5>\n<p>If you are sure the pointer can never be null and are looking for some kind of\n<code>as_ref_unchecked</code> that returns the <code>&amp;T</code> instead of <code>Option&lt;&amp;T&gt;</code>, know that you can\ndereference the pointer directly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>val_back = <span class=\"kw-2\">&amp;*</span>ptr;\n    <span class=\"macro\">assert_eq!</span>(val_back, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#329\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_ref_unchecked\" class=\"fn\">as_ref_unchecked</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;'a T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_ref_unchecked</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the value behind the pointer.\nIf the pointer may be null or the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a> must be used instead.\nIf the pointer may be null, but the value is known to have been initialized, <a href=\"#method.as_ref\"><code>as_ref</code></a> must be used instead.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_ref_unchecked)]\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr.as_ref_unchecked(), <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#368-370\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"union\" href=\"https://doc.rust-lang.org/1.84.1/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"panics-during-const-evaluation-2\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation-2\">§</a>Panics during const evaluation</h5>\n<p>This method will panic during const evaluation if the pointer cannot be\ndetermined to be null or not. See <a href=\"#method.is_null\"><code>is_null</code></a> for more information.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_uninit)]\n\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_uninit_ref() {\n        <span class=\"macro\">assert_eq!</span>(val_back.assume_init(), <span class=\"number\">10</span>);\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.61.0\">1.0.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#422-424\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset to a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_offset\"><code>wrapping_offset</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char, <span class=\"string\">'2'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char, <span class=\"string\">'3'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#475\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset in bytes to a pointer.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.61.0\">1.16.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#534-536\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_offset((y as isize) - (x as isize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.offset\"><code>offset</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.offset\"><code>offset</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_offset</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.offset\"><code>offset</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())</code> is always the same as <code>x</code>. In other\nwords, leaving the allocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_offset(<span class=\"number\">6</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_offset(step);\n}\n<span class=\"macro\">assert_eq!</span>(out.as_str(), <span class=\"string\">\"1, 3, 5, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#556\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_offset\" class=\"fn\">wrapping_byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset in bytes to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\">wrapping_offset</a> on it. See that method\nfor documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#594\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.mask\" class=\"fn\">mask</a>(self, mask: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_mask</code>)</span></div></span></summary><div class=\"docblock\"><p>Masks out bits of the pointer according to a mask.</p>\n<p>This is convenience for <code>ptr.map_addr(|a| a &amp; mask)</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n<h6 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_mask)]\n</span><span class=\"kw\">let </span>v = <span class=\"number\">17_u32</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u32 = <span class=\"kw-2\">&amp;</span>v;\n\n<span class=\"comment\">// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\n</span><span class=\"kw\">let </span>tag_mask = <span class=\"number\">0b11</span>;\n<span class=\"kw\">let </span>ptr_mask = !tag_mask;\n\n<span class=\"comment\">// We can store something in these lower bits\n</span><span class=\"kw\">let </span>tagged_ptr = ptr.map_addr(|a| a | <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Get the \"tag\" back\n</span><span class=\"kw\">let </span>tag = tagged_ptr.addr() &amp; tag_mask;\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Note that `tagged_ptr` is unaligned, it's UB to read from it.\n// To get original pointer `mask` can be used:\n</span><span class=\"kw\">let </span>masked_ptr = tagged_ptr.mask(ptr_mask);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>masked_ptr }, <span class=\"number\">17</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0, const since 1.65.0\">1.47.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#683-685\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p><code>self</code> and <code>origin</code> must either</p>\n<ul>\n<li>point to the same address, or</li>\n<li>both be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to the same <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the memory range between\nthe two pointers must be in bounds of that object. (See below for an example.)</li>\n</ul>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n</ul>\n<p>As a consequence, the absolute distance between the pointers, in bytes, computed on\nmathematical integers (without “wrapping around”), cannot overflow an <code>isize</code>. This is\nimplied by the in-bounds requirement, and the fact that no allocated object can be larger\nthan <code>isize::MAX</code> bytes.</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr1 = Box::into_raw(Box::new(<span class=\"number\">0u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>ptr2 = Box::into_raw(Box::new(<span class=\"number\">1u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>diff = (ptr2 <span class=\"kw\">as </span>isize).wrapping_sub(ptr1 <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2.add(1), but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = (ptr1 <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8).wrapping_offset(diff).wrapping_offset(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(ptr2 <span class=\"kw\">as </span>usize, ptr2_other <span class=\"kw\">as </span>usize);\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to addresses that are in-bounds of the same object!\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>one = ptr2_other.offset_from(ptr2); <span class=\"comment\">// Undefined Behavior! ⚠️\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#706\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.offset_from\" title=\"method pointer::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#775-777\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.sub_ptr\" class=\"fn\">sub_ptr</a>(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be thought of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre></div>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n\n</span><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#820\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_sub_ptr\" class=\"fn\">byte_sub_ptr</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.sub_ptr\" title=\"method pointer::sub_ptr\"><code>sub_ptr</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guaranteed_eq\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#845-847\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.guaranteed_eq\" class=\"fn\">guaranteed_eq</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be equal.</p>\n<p>At runtime this function behaves like <code>Some(self == other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine equality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its equality known.\nBut when it returns <code>Some</code>, the pointers’ equality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guaranteed_ne\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#875-877\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.guaranteed_ne\" class=\"fn\">guaranteed_ne</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be inequal.</p>\n<p>At runtime this function behaves like <code>Some(self != other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine inequality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its inequality known.\nBut when it returns <code>Some</code>, the pointers’ inequality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#934-936\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset to a pointer.</p>\n<p>This can only move the pointer forward (or not move it). If you need to move forward or\nbackward depending on the value, then you might want <a href=\"#method.offset\"><code>offset</code></a> instead\nwhich takes a signed offset.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_add\"><code>wrapping_add</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">1</span>), <span class=\"string\">b'2'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">2</span>), <span class=\"string\">b'3'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#986\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset in bytes to a pointer.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.add\" title=\"method pointer::add\">add</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1041-1043\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset from a pointer.</p>\n<p>This can only move the pointer backward (or not move it). If you need to move forward or\nbackward depending on the value, then you might want <a href=\"#method.offset\"><code>offset</code></a> instead\nwhich takes a signed offset.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_sub\"><code>wrapping_sub</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: <span class=\"kw-2\">*const </span>u8 = s.as_ptr().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end.sub(<span class=\"number\">1</span>), <span class=\"string\">b'3'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end.sub(<span class=\"number\">2</span>), <span class=\"string\">b'2'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1099\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset in bytes from a pointer.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.sub\" title=\"method pointer::sub\">sub</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1158-1160\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_add((y as usize) - (x as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.add\"><code>add</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.add\"><code>add</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_add</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.add\"><code>add</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_add(<span class=\"number\">6</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_add(step);\n}\n<span class=\"macro\">assert_eq!</span>(out, <span class=\"string\">\"1, 3, 5, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1178\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_add\" class=\"fn\">wrapping_byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset in bytes to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_add\" title=\"method pointer::wrapping_add\">wrapping_add</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1236-1238\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset from a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_sub((x as usize) - (y as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.sub\"><code>sub</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.sub\"><code>sub</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_sub</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.sub\"><code>sub</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements (backwards)\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>start_rounded_down = ptr.wrapping_sub(<span class=\"number\">2</span>);\nptr = ptr.wrapping_add(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != start_rounded_down {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_sub(step);\n}\n<span class=\"macro\">assert_eq!</span>(out, <span class=\"string\">\"5, 3, 1, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1256\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_sub\" class=\"fn\">wrapping_byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset in bytes from a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_sub\" title=\"method pointer::wrapping_sub\">wrapping_sub</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1270-1272\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read.html\" title=\"fn core::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1291-1293\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read_volatile.html\" title=\"fn core::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1311-1313\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read_unaligned.html\" title=\"fn core::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.83.0\">1.26.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1331-1333\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.83.0\">1.26.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1351-1353\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1400-1402\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes. The value returned can be\nused with the <code>wrapping_add</code> method.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = x.as_ptr();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || <span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1438-1440\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">1</span>).is_aligned());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned_to\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1478\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre></div>\n</div></details></div></details>",0,"wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/intrinsics/mod.rs.html#3906\">Source</a><a href=\"#impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/trait.AggregateRawPtr.html\" title=\"trait core::intrinsics::AggregateRawPtr\">AggregateRawPtr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const P</a><div class=\"where\">where\n    T: <a class=\"traitalias\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/traitalias.Thin.html\" title=\"traitalias core::ptr::metadata::Thin\">Thin</a>,\n    P: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Metadata\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/intrinsics/mod.rs.html#3907\">Source</a><a href=\"#associatedtype.Metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/trait.AggregateRawPtr.html#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a> = &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span></details></div></details>","AggregateRawPtr<*const T>","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#350\">Source</a></span><a href=\"#impl-Clone-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#352\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2581\">Source</a></span><a href=\"#impl-Debug-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2582\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromZeros-for-*const+T\" class=\"impl\"><a href=\"#impl-FromZeros-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Overwrites <code>self</code> with zeros. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed\" class=\"method trait-impl\"><a href=\"#method.new_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_zeroed</a>() -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an instance of <code>Self</code> from zeroed bytes. <a>Read more</a></div></details></div></details>","FromZeros","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#963\">Source</a></span><a href=\"#impl-Hash-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#965\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KnownLayout-for-*const+T\" class=\"impl\"><a href=\"#impl-KnownLayout-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; KnownLayout for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PointerMetadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PointerMetadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PointerMetadata</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type of metadata stored in a pointer to <code>Self</code>. <a>Read more</a></div></details></div></details>","KnownLayout","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1685\">Source</a></span><a href=\"#impl-Ord-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1688\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1672\">Source</a></span><a href=\"#impl-PartialEq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1675\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1700\">Source</a></span><a href=\"#impl-PartialOrd-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1703\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1709\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1715\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1721\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1727\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2518\">Source</a></span><a href=\"#impl-Pointer-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2519\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1174-1176\">Source</a><a href=\"#impl-SimdElement-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/core_simd/vector/trait.SimdElement.html\" title=\"trait core::core_simd::vector::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&lt;Metadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1178\">Source</a><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.1/core/core_simd/vector/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","wasmer::backend::sys::vm::VMFunctionCallback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFromBytes-for-*const+T\" class=\"impl\"><a href=\"#impl-TryFromBytes-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; TryFromBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes</a>(\n    bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code> with a DST length\nequal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> with a DST\nlength equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_read_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read the given <code>source</code> as a <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the prefix of the given <code>source</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the suffix of the given <code>source</code>. <a>Read more</a></div></details></div></details>","TryFromBytes","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ops/unsize.rs.html#69\">Source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<*const U>","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Copy-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#433-443\">Source</a></span><a href=\"#impl-Copy-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ops/unsize.rs.html#131\">Source</a><a href=\"#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<*const U>","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Eq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1681\">Source</a></span><a href=\"#impl-Eq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Freeze-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#846-854\">Source</a><a href=\"#impl-Freeze-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Freeze","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Immutable-for-*const+T\" class=\"impl\"><a href=\"#impl-Immutable-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Immutable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Immutable","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-PinCoerceUnsized-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/pin.rs.html#1773\">Source</a></span><a href=\"#impl-PinCoerceUnsized-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-PointerLike-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#985-994\">Source</a><a href=\"#impl-PointerLike-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.PointerLike.html\" title=\"trait core::marker::PointerLike\">PointerLike</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section>","PointerLike","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Send-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#88\">Source</a></span><a href=\"#impl-Send-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Sync-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#613\">Source</a></span><a href=\"#impl-Sync-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-Unpin-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#945-950\">Source</a></span><a href=\"#impl-Unpin-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Unpin","wasmer::backend::sys::vm::VMFunctionCallback"],["<section id=\"impl-UnwindSafe-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/panic/unwind_safe.rs.html#185\">Source</a></span><a href=\"#impl-UnwindSafe-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","wasmer::backend::sys::vm::VMFunctionCallback"]]],["wasmer_vm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#7\">Source</a><a href=\"#impl-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_null\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.84.0\">1.0.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#39\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the pointer is null.</p>\n<p>Note that unsized types have many possible null pointers, as only the\nraw data pointer is considered, not their length, vtable, etc.\nTherefore, two pointers that are null may still not compare equal to\neach other.</p>\n<h5 id=\"panics-during-const-evaluation\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation\">§</a>Panics during const evaluation</h5>\n<p>If this method is used during const evaluation, and <code>self</code> is a pointer\nthat is offset beyond the bounds of the memory it initially pointed to,\nthen there might not be enough information to determine whether the\npointer is null. This is because the absolute address in memory is not\nknown at compile time. If the nullness of the pointer cannot be\ndetermined, this method will panic.</p>\n<p>In-bounds pointers are never null, so the method will never panic for\nsuch pointers.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"Follow the rabbit\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n<span class=\"macro\">assert!</span>(!ptr.is_null());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.38.0\">1.38.0 (const: 1.38.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#65\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a></h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_metadata_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#122-124\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.with_metadata_of\" class=\"fn\">with_metadata_of</a>&lt;U&gt;(self, meta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>set_ptr_value</code>)</span></div></span></summary><div class=\"docblock\"><p>Uses the address value in a new pointer of another type.</p>\n<p>This operation will ignore the address part of its <code>meta</code> operand and discard existing\nmetadata of <code>self</code>. For pointers to a sized types (thin pointers), this has the same effect\nas a simple cast. For pointers to an unsized type (fat pointers) this recombines the address\nwith new metadata such as slice lengths or <code>dyn</code>-vtable.</p>\n<p>The resulting pointer will have provenance of <code>self</code>. This operation is semantically the\nsame as creating a new pointer with the data pointer value of <code>self</code> but the metadata of\n<code>meta</code>, being fat or thin depending on the <code>meta</code> operand.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>This function is primarily useful for enabling pointer arithmetic on potentially fat\npointers. The pointer is cast to a sized pointee to utilize offset operations and then\nrecombined with its own original metadata.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span>arr: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = arr.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">dyn </span>Debug;\n<span class=\"kw\">let </span>thin = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">unsafe </span>{\n    ptr = thin.add(<span class=\"number\">8</span>).with_metadata_of(ptr);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw-2\">&amp;*</span>ptr); <span class=\"comment\">// will print \"3\"\n</span>}</code></pre></div>\n<h5 id=\"incorrect-usage\"><a class=\"doc-anchor\" href=\"#incorrect-usage\">§</a><em>Incorrect</em> usage</h5>\n<p>The provenance from pointers is <em>not</em> combined. The result must only be used to refer to the\naddress allowed by <code>self</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">1u32</span>;\n\n<span class=\"kw\">let </span>x = (<span class=\"kw-2\">&amp;</span>x) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32;\n<span class=\"kw\">let </span>y = (<span class=\"kw-2\">&amp;</span>y) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32;\n\n<span class=\"kw\">let </span>offset = (x <span class=\"kw\">as </span>usize - y <span class=\"kw\">as </span>usize) / <span class=\"number\">4</span>;\n<span class=\"kw\">let </span>bad = x.wrapping_add(offset).with_metadata_of(y);\n\n<span class=\"comment\">// This dereference is UB. The pointer only has provenance for `x` but points to `y`.\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>bad });</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.65.0, const since 1.65.0\">1.65.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#137\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Changes constness without changing the type.</p>\n<p>This is a bit safer than <code>as</code> because it wouldn’t silently change the type if the code is\nrefactored.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#166\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>This is similar to <code>self as usize</code>, except that the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of\nthe pointer is discarded and not <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#exposed-provenance\" title=\"mod core::ptr\">exposed</a>. This means that\ncasting the returned address back to a pointer yields a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.without_provenance.html\" title=\"fn core::ptr::without_provenance\">pointer without\nprovenance</a>, which is undefined behavior to dereference. To properly\nrestore the lost information and obtain a dereferenceable pointer, use\n<a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a> or <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>map_addr</code></a>.</p>\n<p>If using those APIs is not possible because there is no way to preserve a pointer with the\nrequired provenance, then Strict Provenance might not be for you. Use pointer-integer casts\nor <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.expose_provenance\" title=\"method pointer::expose_provenance\"><code>expose_provenance</code></a> and <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a>\ninstead. However, note that this makes your code less portable and less amenable to tools\nthat check for compliance with the Rust memory model.</p>\n<p>On most platforms this will produce a value with the same bytes as the original\npointer, because all the bytes are dedicated to describing the address.\nPlatforms which need to store additional information in the pointer may\nperform a change of representation to produce a value containing only the address\nportion of the pointer. What that means is up to the platform to define.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expose_provenance\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#200\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Exposes the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">“provenance”</a> part of the pointer for future use in\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> and returns the “address” portion.</p>\n<p>This is equivalent to <code>self as usize</code>, which semantically discards provenance information.\nFurthermore, this (like the <code>as</code> cast) has the implicit side-effect of marking the\nprovenance as ‘exposed’, so on platforms that support it you can later call\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to reconstitute the original pointer including its provenance.</p>\n<p>Due to its inherent ambiguity, <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> may not be supported by tools\nthat help you to stay conformant with the Rust memory model. It is recommended to use\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> APIs such as <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>\nwherever possible, in which case <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>addr</code></a> should be used instead of <code>expose_provenance</code>.</p>\n<p>On most platforms this will produce a value with the same bytes as the original pointer,\nbecause all the bytes are dedicated to describing the address. Platforms which need to store\nadditional information in the pointer may not support this operation, since the ‘expose’\nside-effect which is required for <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.with_exposed_provenance.html\" title=\"fn core::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to work is typically not\navailable.</p>\n<p>This is an <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#exposed-provenance\" title=\"mod core::ptr\">Exposed Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#218\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Creates a new pointer with the given address and the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of\n<code>self</code>.</p>\n<p>This is similar to a <code>addr as *const T</code> cast, but copies\nthe <em>provenance</em> of <code>self</code> to the new pointer.\nThis avoids the inherent ambiguity of the unary cast.</p>\n<p>This is equivalent to using <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>wrapping_offset</code></a> to offset\n<code>self</code> to the given address, and therefore has all the same capabilities and restrictions.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#237\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.map_addr\" class=\"fn\">map_addr</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one, preserving the\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of <code>self</code>.</p>\n<p>This is a convenience for <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>, see that method for details.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#246\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0, const since 1.84.0\">1.9.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#297\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. If the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"panics-during-const-evaluation-1\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation-1\">§</a>Panics during const evaluation</h5>\n<p>This method will panic during const evaluation if the pointer cannot be\ndetermined to be null or not. See <a href=\"#method.is_null\"><code>is_null</code></a> for more information.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_ref() {\n        <span class=\"macro\">assert_eq!</span>(val_back, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n    }\n}</code></pre></div>\n<h5 id=\"null-unchecked-version\"><a class=\"doc-anchor\" href=\"#null-unchecked-version\">§</a>Null-unchecked version</h5>\n<p>If you are sure the pointer can never be null and are looking for some kind of\n<code>as_ref_unchecked</code> that returns the <code>&amp;T</code> instead of <code>Option&lt;&amp;T&gt;</code>, know that you can\ndereference the pointer directly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>val_back = <span class=\"kw-2\">&amp;*</span>ptr;\n    <span class=\"macro\">assert_eq!</span>(val_back, <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#329\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_ref_unchecked\" class=\"fn\">as_ref_unchecked</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;'a T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_ref_unchecked</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the value behind the pointer.\nIf the pointer may be null or the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a> must be used instead.\nIf the pointer may be null, but the value is known to have been initialized, <a href=\"#method.as_ref\"><code>as_ref</code></a> must be used instead.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_ref_unchecked)]\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr.as_ref_unchecked(), <span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#368-370\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"union\" href=\"https://doc.rust-lang.org/1.84.1/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nthe pointer is <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"panics-during-const-evaluation-2\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation-2\">§</a>Panics during const evaluation</h5>\n<p>This method will panic during const evaluation if the pointer cannot be\ndetermined to be null or not. See <a href=\"#method.is_null\"><code>is_null</code></a> for more information.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_uninit)]\n\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_uninit_ref() {\n        <span class=\"macro\">assert_eq!</span>(val_back.assume_init(), <span class=\"number\">10</span>);\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.61.0\">1.0.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#422-424\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset to a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_offset\"><code>wrapping_offset</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char, <span class=\"string\">'2'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char, <span class=\"string\">'3'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#475\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset in bytes to a pointer.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.61.0\">1.16.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#534-536\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_offset((y as isize) - (x as isize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.offset\"><code>offset</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.offset\"><code>offset</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_offset</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.offset\"><code>offset</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())</code> is always the same as <code>x</code>. In other\nwords, leaving the allocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_offset(<span class=\"number\">6</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_offset(step);\n}\n<span class=\"macro\">assert_eq!</span>(out.as_str(), <span class=\"string\">\"1, 3, 5, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#556\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_offset\" class=\"fn\">wrapping_byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds a signed offset in bytes to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\">wrapping_offset</a> on it. See that method\nfor documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#594\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.mask\" class=\"fn\">mask</a>(self, mask: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_mask</code>)</span></div></span></summary><div class=\"docblock\"><p>Masks out bits of the pointer according to a mask.</p>\n<p>This is convenience for <code>ptr.map_addr(|a| a &amp; mask)</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n<h6 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_mask)]\n</span><span class=\"kw\">let </span>v = <span class=\"number\">17_u32</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u32 = <span class=\"kw-2\">&amp;</span>v;\n\n<span class=\"comment\">// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\n</span><span class=\"kw\">let </span>tag_mask = <span class=\"number\">0b11</span>;\n<span class=\"kw\">let </span>ptr_mask = !tag_mask;\n\n<span class=\"comment\">// We can store something in these lower bits\n</span><span class=\"kw\">let </span>tagged_ptr = ptr.map_addr(|a| a | <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Get the \"tag\" back\n</span><span class=\"kw\">let </span>tag = tagged_ptr.addr() &amp; tag_mask;\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Note that `tagged_ptr` is unaligned, it's UB to read from it.\n// To get original pointer `mask` can be used:\n</span><span class=\"kw\">let </span>masked_ptr = tagged_ptr.mask(ptr_mask);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>masked_ptr }, <span class=\"number\">17</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0, const since 1.65.0\">1.47.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#683-685\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p><code>self</code> and <code>origin</code> must either</p>\n<ul>\n<li>point to the same address, or</li>\n<li>both be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to the same <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the memory range between\nthe two pointers must be in bounds of that object. (See below for an example.)</li>\n</ul>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n</ul>\n<p>As a consequence, the absolute distance between the pointers, in bytes, computed on\nmathematical integers (without “wrapping around”), cannot overflow an <code>isize</code>. This is\nimplied by the in-bounds requirement, and the fact that no allocated object can be larger\nthan <code>isize::MAX</code> bytes.</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr1 = Box::into_raw(Box::new(<span class=\"number\">0u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>ptr2 = Box::into_raw(Box::new(<span class=\"number\">1u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>diff = (ptr2 <span class=\"kw\">as </span>isize).wrapping_sub(ptr1 <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2.add(1), but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = (ptr1 <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8).wrapping_offset(diff).wrapping_offset(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(ptr2 <span class=\"kw\">as </span>usize, ptr2_other <span class=\"kw\">as </span>usize);\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to addresses that are in-bounds of the same object!\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>one = ptr2_other.offset_from(ptr2); <span class=\"comment\">// Undefined Behavior! ⚠️\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#706\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.offset_from\" title=\"method pointer::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#775-777\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.sub_ptr\" class=\"fn\">sub_ptr</a>(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be thought of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre></div>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n\n</span><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#820\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_sub_ptr\" class=\"fn\">byte_sub_ptr</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.sub_ptr\" title=\"method pointer::sub_ptr\"><code>sub_ptr</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guaranteed_eq\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#845-847\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.guaranteed_eq\" class=\"fn\">guaranteed_eq</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be equal.</p>\n<p>At runtime this function behaves like <code>Some(self == other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine equality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its equality known.\nBut when it returns <code>Some</code>, the pointers’ equality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guaranteed_ne\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#875-877\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.guaranteed_ne\" class=\"fn\">guaranteed_ne</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be inequal.</p>\n<p>At runtime this function behaves like <code>Some(self != other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine inequality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its inequality known.\nBut when it returns <code>Some</code>, the pointers’ inequality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#934-936\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset to a pointer.</p>\n<p>This can only move the pointer forward (or not move it). If you need to move forward or\nbackward depending on the value, then you might want <a href=\"#method.offset\"><code>offset</code></a> instead\nwhich takes a signed offset.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_add\"><code>wrapping_add</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">1</span>), <span class=\"string\">b'2'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">2</span>), <span class=\"string\">b'3'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#986\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset in bytes to a pointer.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.add\" title=\"method pointer::add\">add</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1041-1043\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset from a pointer.</p>\n<p>This can only move the pointer backward (or not move it). If you need to move forward or\nbackward depending on the value, then you might want <a href=\"#method.offset\"><code>offset</code></a> instead\nwhich takes a signed offset.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The offset in bytes, <code>count * size_of::&lt;T&gt;()</code>, computed on mathematical integers (without\n“wrapping around”), must fit in an <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#provenance\" title=\"mod core::ptr\">derived from</a> a pointer to some\n<a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<p>Consider using <a href=\"#method.wrapping_sub\"><code>wrapping_sub</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: <span class=\"kw-2\">*const </span>u8 = s.as_ptr().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end.sub(<span class=\"number\">1</span>), <span class=\"string\">b'3'</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end.sub(<span class=\"number\">2</span>), <span class=\"string\">b'2'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1099\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset in bytes from a pointer.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.sub\" title=\"method pointer::sub\">sub</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1158-1160\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_add((y as usize) - (x as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.add\"><code>add</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.add\"><code>add</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_add</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.add\"><code>add</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_add(<span class=\"number\">6</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_add(step);\n}\n<span class=\"macro\">assert_eq!</span>(out, <span class=\"string\">\"1, 3, 5, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1178\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_add\" class=\"fn\">wrapping_byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Adds an unsigned offset in bytes to a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_add\" title=\"method pointer::wrapping_add\">wrapping_add</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1236-1238\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset from a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_sub((x as usize) - (y as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.sub\"><code>sub</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.sub\"><code>sub</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_sub</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.sub\"><code>sub</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements (backwards)\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>start_rounded_down = ptr.wrapping_sub(<span class=\"number\">2</span>);\nptr = ptr.wrapping_add(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = String::new();\n<span class=\"kw\">while </span>ptr != start_rounded_down {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr).unwrap();\n    }\n    ptr = ptr.wrapping_sub(step);\n}\n<span class=\"macro\">assert_eq!</span>(out, <span class=\"string\">\"5, 3, 1, \"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1256\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.wrapping_byte_sub\" class=\"fn\">wrapping_byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Subtracts an unsigned offset in bytes from a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#method.wrapping_sub\" title=\"method pointer::wrapping_sub\">wrapping_sub</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1270-1272\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read.html\" title=\"fn core::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1291-1293\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read_volatile.html\" title=\"fn core::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1311-1313\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/ptr/fn.read_unaligned.html\" title=\"fn core::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.83.0\">1.26.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1331-1333\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.83.0\">1.26.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1351-1353\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1400-1402\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes. The value returned can be\nused with the <code>wrapping_add</code> method.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = x.as_ptr();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || <span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1438-1440\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">1</span>).is_aligned());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned_to\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1478\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html#tymethod.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre></div>\n</div></details></div></details>",0,"wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/intrinsics/mod.rs.html#3906\">Source</a><a href=\"#impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/trait.AggregateRawPtr.html\" title=\"trait core::intrinsics::AggregateRawPtr\">AggregateRawPtr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const P</a><div class=\"where\">where\n    T: <a class=\"traitalias\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/traitalias.Thin.html\" title=\"traitalias core::ptr::metadata::Thin\">Thin</a>,\n    P: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Metadata\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/intrinsics/mod.rs.html#3907\">Source</a><a href=\"#associatedtype.Metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.1/core/intrinsics/trait.AggregateRawPtr.html#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a> = &lt;P as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span></details></div></details>","AggregateRawPtr<*const T>","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#350\">Source</a></span><a href=\"#impl-Clone-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#352\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2581\">Source</a></span><a href=\"#impl-Debug-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2582\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromZeros-for-*const+T\" class=\"impl\"><a href=\"#impl-FromZeros-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Overwrites <code>self</code> with zeros. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed\" class=\"method trait-impl\"><a href=\"#method.new_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_zeroed</a>() -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an instance of <code>Self</code> from zeroed bytes. <a>Read more</a></div></details></div></details>","FromZeros","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#963\">Source</a></span><a href=\"#impl-Hash-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#965\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.1/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KnownLayout-for-*const+T\" class=\"impl\"><a href=\"#impl-KnownLayout-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; KnownLayout for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PointerMetadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PointerMetadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PointerMetadata</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type of metadata stored in a pointer to <code>Self</code>. <a>Read more</a></div></details></div></details>","KnownLayout","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1685\">Source</a></span><a href=\"#impl-Ord-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1688\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1672\">Source</a></span><a href=\"#impl-PartialEq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1675\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1700\">Source</a></span><a href=\"#impl-PartialOrd-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1703\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1709\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1715\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1721\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1727\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2518\">Source</a></span><a href=\"#impl-Pointer-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/fmt/mod.rs.html#2519\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1174-1176\">Source</a><a href=\"#impl-SimdElement-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/core_simd/vector/trait.SimdElement.html\" title=\"trait core::core_simd::vector::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&lt;Metadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1178\">Source</a><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.1/core/core_simd/vector/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.isize.html\">isize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFromBytes-for-*const+T\" class=\"impl\"><a href=\"#impl-TryFromBytes-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; TryFromBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes</a>(\n    bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code> with a DST length\nequal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> with a DST\nlength equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_read_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read the given <code>source</code> as a <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the prefix of the given <code>source</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the suffix of the given <code>source</code>. <a>Read more</a></div></details></div></details>","TryFromBytes","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ops/unsize.rs.html#69\">Source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<*const U>","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Copy-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#433-443\">Source</a></span><a href=\"#impl-Copy-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ops/unsize.rs.html#131\">Source</a><a href=\"#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<*const U>","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Eq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/ptr/const_ptr.rs.html#1681\">Source</a></span><a href=\"#impl-Eq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Freeze-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#846-854\">Source</a><a href=\"#impl-Freeze-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Freeze","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Immutable-for-*const+T\" class=\"impl\"><a href=\"#impl-Immutable-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Immutable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Immutable","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-PinCoerceUnsized-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/pin.rs.html#1773\">Source</a></span><a href=\"#impl-PinCoerceUnsized-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-PointerLike-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#985-994\">Source</a><a href=\"#impl-PointerLike-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.PointerLike.html\" title=\"trait core::marker::PointerLike\">PointerLike</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a></h3></section>","PointerLike","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Send-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#88\">Source</a></span><a href=\"#impl-Send-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Sync-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#613\">Source</a></span><a href=\"#impl-Sync-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-Unpin-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/marker.rs.html#945-950\">Source</a></span><a href=\"#impl-Unpin-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Unpin","wasmer_vm::libcalls::eh::dwarf::eh::LPad"],["<section id=\"impl-UnwindSafe-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/panic/unwind_safe.rs.html#185\">Source</a></span><a href=\"#impl-UnwindSafe-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","wasmer_vm::libcalls::eh::dwarf::eh::LPad"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[154513,154417]}