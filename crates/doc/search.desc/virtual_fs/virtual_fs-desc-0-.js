searchState.loadedDescShard("virtual_fs", 0, "The address was in use\nThe address could not be found\nFile exists\nReads bytes from a source.\nReads bytes from a source.\nSeek bytes asynchronously.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nWrites bytes asynchronously.\nWrites bytes to a sink.\nThe fd given as a base was not a directory so the …\nA pipe was closed\nThe connection was aborted\nThe connection request was refused\nThe connection was reset\nDirectory not Empty\nThe requested file or directory could not be found\nContains the error value\nA chain of one or more <code>FileSystem</code>s.\nError type for external users\nSomething failed when doing IO. These errors can generally …\nStdio will inherit the file handlers of its parent\nThe operation was interrupted before it could finish\nInvalid internal data, if the argument data is invalid, …\nThe fd given was not usable\nThe provided data is invalid\nThe filesystem has failed to lock a resource.\nStdio will be sent to the log handler\nThe requested device couldn’t be accessed\nExpected a file but found not a file\nCould not perform the operation because there was not an …\nStdio will be dropped\nContains the success value\nA primary filesystem and chain of secondary filesystems …\nCaller was not allowed to perform this operation\nStdio will be piped to a file descriptor\nA wrapper around a byte buffer that is incrementally …\nAn immutable file backed by an <code>OwnedBuffer</code>.\nDetermines the mode that stdio handlers will operate in\nThe operation did not complete within the given amount of …\nA <code>FileSystem</code> wrapper that will automatically log all …\nFound EOF when EOF was not expected\nSome other unhandled error. If you see this, it’s …\nOperation is not supported on this filesystem\nTrait needed to get downcasting from <code>VirtualFile</code> to work.\nThis trait relies on your file closing when it goes out of …\nOperation would block, this error lets the caller know …\nA call to write returned 0\nAdvances the size of the filled region of the buffer.\nSets the option for the append mode.\nUsed for sharing references to the same file across …\nUsed for sharing references to the same file across …\nWraps a clonable Arc of a file system - in practice this …\nGet the full contents of this file as an <code>OwnedBuffer</code>.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nUsed for /dev/zero - infinitely returns zero which is …\nReturns the total capacity of the buffer.\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nClears the buffer, resetting the filled region to empty.\nThis method will copy a file from a source to this …\nCopies the reference of a file from one file system to …\nThis method will copy a file from a source to this …\nCopies the reference of a file from one file system to …\nUsed for /dev/zero - infinitely returns zero which is …\nSets the option to create a new file, or open it if it …\nMake sure a directory (and all its parents) exist.\nSets the option to create a new file, failing if it …\nthe time at which the file was created in nanoseconds as a …\nWhen no file system is used by a WebC then this is used as …\nGet something that can be used to iterate over the …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nFlushes this output stream, ensuring that all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed for “special” files such as <code>stdin</code>, <code>stdout</code> and …\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the file is opened or closed. This function …\nDetermines if this writer has an efficient …\nthe last time the file was accessed in nanoseconds as a …\nthe last time the file was modified in nanoseconds as a …\nReturns the minimum allowed rights, given the rights of …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nNullFile is a special file for <code>/dev/null</code>, which returns 0 …\nCommon <code>FileSystem</code> operations.\nUse an existing <code>OpenOptionsConfig</code> to configure this …\nWraps a boxed file system with an implemented trait …\nWaits for a seek operation to complete.\nAttempts to flush the object, ensuring that any buffered …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nPolls the file for when there is data to be read\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nPolls the file for when it is available for writing\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nUsed for /dev/zero - infinitely returns zero which is …\nSets the option for read access.\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nReturns the number of bytes at the end of the slice that …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will seek an IO object, and then …\nSets the size of the filled region of the buffer.\nChange the size of the file, if the <code>new_size</code> is greater …\nsets accessed and modified time\nShuts down the output stream, ensuring that the value can …\nthe size of the file in bytes\nUsed for /dev/stdin, /dev/stdout, dev/stderr - returns a …\nAttempts to seek to an offset, in bytes, in a stream.\nCreates a future which will return the current seek …\nThis method gets metadata without following symlinks in …\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nWraps the memory file system implementation - this has been\nSets the option for truncating a previous file.\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a buffer that may be …\nAnother implementation of the union that uses paths, its …\nRequest deletion of the file\nWould a file opened with this <code>OpenOptionsConfig</code> change …\nSets the option for write access.\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nWrites a buffer into this writer, advancing the buffer’s …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in little-endian …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in little-endian …\nWrites to this file using an mmap offset and reference …\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in little-endian order to …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in little-endian order to …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in little-endian order to …\nWrites a signed 8-bit integer to the underlying writer.\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 8-bit integer to the underlying writer.\nLike <code>write</code>, except that it writes from a slice of buffers.\nUsed for /dev/zero - infinitely returns zero which is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a <code>VirtualFile</code>, and also invokes a provided function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA chain of one or more <code>FileSystem</code>s.\nGet something that can be used to iterate over the …\nDefault size for write buffers.\nA thin wrapper around <code>std::fs::File</code>\nA wrapper type around Stderr that implements <code>VirtualFile</code>.\nA wrapper type around Stdin that implements <code>VirtualFile</code>.\nA wrapper type around Stdout that implements <code>VirtualFile</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncreates a new host file from a <code>std::fs::File</code> and a path\nAllows tracking and limiting the memory usage of a memfs […\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe in-memory file system!\nA wrapper type around the standard I/O stream of the same …\nA wrapper type around the standard I/O stream of the same …\nA wrapper type around the standard I/O stream of the same …\nThis module contains the <code>FileHandle</code> and <code>File</code> …\nThis module contains the <code>FileSystem</code> type itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contains the standard I/O streams, i.e. …\nThe real file! It is simply a buffer of bytes with a …\nA file handle. The file system doesn’t return the <code>File</code> …\nRead only file that uses copy-on-write\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe in-memory file system!\nThe core of the file system. It contains a collection of …\nAdd a child to a directory node represented by <code>inode</code>.\nFrom the inode of a parent node (so, a directory), returns …\nFrom the inode of a parent node (so, a directory), returns …\nFrom the inode of a parent node (so, a directory), returns …\nCanonicalize a path, i.e. try to resolve to a canonical, …\nCanonicalize a path without validating that it actually …\nLike <code>Self::canonicalize</code> but without returning the inode of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inode associated to a path if it exists.\nGet the inode associated to a “parent path”. The …\nInserts a arc directory into the file system that …\nInserts a arc directory into the file system that …\nInserts a arc file into the file system that references …\nInserts a arc file into the file system that references …\nInserts a arc file into the file system that references …\nInserts a readonly file into the file system that uses …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge all items from a given source path (directory) of a …\nRemove the child at position <code>position</code> of a directory node …\nSet a new name for the node represented by <code>inode</code>.\nUses a mmap’ed file as a cache for file data thus …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wrapper type around the standard I/O stream of the same …\nA wrapper type around the standard I/O stream of the same …\nA wrapper type around the standard I/O stream of the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCopies the reference of a file from one file system to …\nCopies the reference of a file from one file system to …\nMake sure a directory (and all its parents) exist.\nCreates a white out file which hides it from secondary …\nDoes this item exists?\nReturns true if the path has been hidden by a whiteout file\nDoes this path refer to a directory?\nDoes this path refer to a file?\nReturns true if the path is a whiteout file\nAsynchronously read a file’s contents into memory.\nAsynchronously read a file’s contents into memory as a …\nRemoves a white out file from the primary\nUpdate a file’s modification and access times, creating …\nRecursively iterate over all paths inside a directory, …\nAsynchronously write some bytes to a file.\nA primary filesystem and chain of secondary filesystems …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>FileSystem</code> using a primary <code>crate::FileSystem</code> …\nGet a reference to the primary filesystem.\nGet a reference to the secondary filesystems.\nGet a mutable reference to the secondary filesystems.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA pair of pipes that are connected together.\nShared version of BidiPipe for situations where you need …\nGet the receiver pipe.\nGet the receiver pipe.\nCombines two ends of a duplex pipe back together again\nthe time at which the file was created in nanoseconds as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the sender pipe.\nGet the mutable sender pipe.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the file is opened or closed. This function …\nthe last time the file was accessed in nanoseconds as a …\nthe last time the file was modified in nanoseconds as a …\nPolls the file for when there is data to be read\nPolls the file for when it is available for writing\nReceive side of the pipe\nReceives bytes from the pipe Also, buffers the last read …\nTransmit side of the pipe\nChange the size of the file, if the <code>new_size</code> is greater …\nthe size of the file in bytes\nSplit into two pipes that are connected to each other\nSends bytes down the pipe\nRequest deletion of the file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA “special” file is a file that is locked to one file …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn immutable file backed by an <code>OwnedBuffer</code>.\nAccess the underlying buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCustom file system wrapper to map requested file paths\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCanonicalize a path without validating that it actually …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>mem_fs::FileSystem::mount_directory_entries</code>.\nA <code>FileSystem</code> wrapper that will automatically log all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows different filesystems of different types to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a filesystem where all <code>Volume</code>s in a <code>Container</code> are …\nNormalize a <code>Path</code> into a <code>PathSegments</code>, dealing with things …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")