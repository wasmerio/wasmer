searchState.loadedDescShard("virtual_net", 0, "The address was in use\nThe address could not be found\nFile exists\nAn archived <code>IpCidr</code>\nAn archived <code>IpRoute</code>\nA pipe was closed\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nThe connection was aborted\nThe connection request was refused\nThe connection was reset\nContains the error value\nSomething failed when doing IO. These errors can generally …\nInsufficient memory\nThe operation was interrupted before it could finish\nInvalid internal data, if the argument data is invalid, …\nThe handle given was not usable\nThe provided data is invalid\nRepresents an IP address and its netmask\nThe resolver for an archived <code>IpCidr</code>\nRepresents a routing entry in the routing table of the …\nThe resolver for an archived <code>IpRoute</code>\nThe filesystem has failed to lock a resource.\nThe requested device couldn’t be accessed\nCould not perform the operation because there was not an …\nContains the success value\nCaller was not allowed to perform this operation\nThe operation did not complete within the given amount of …\nToo many open files\nFound EOF when EOF was not expected\nSome other unhandled error. If you see this, it’s …\nThe operation is not supported.\nConnected sockets have a persistent connection to a remote …\nConnectionless sockets are able to send and receive …\nICMP sockets are low level devices bound to a specific …\nRepresents an IO source\nAn implementation of virtual networking\nOperation would block, this error lets the caller know …\nA call to write returned 0\nAccepts a new connection from the TCP listener\nReturns the local address of this TCP listener\nReturns the local address for this socket\nReturns the address (IP and Port) of the peer socket that …\nReturns the remote address of this UDP socket if it has …\nCreates a socket that can be used to send and receive ICMP …\nCreates a low level socket that can read and write …\nOpens a UDP socket that listens on a specific IP and Port …\nBridges this local network with a remote network, which is …\nIndicates if the SO_BROADCAST flag is set which means that …\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nThe archived counterpart of <code>IpRoute::cidr</code>\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nCloses the socket\nOpens a TCP connection to a particular destination IP …\nCreates <code>Bytes</code> instance from slice, by copying it.\nAcquires an IP address on the network and configures the …\nIndicates if the packet will pass straight through to the …\nThe archived counterpart of <code>IpRoute::expires_at</code>\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Bytes with a buffer whose lifetime is controlled …\nCreates a new <code>Bytes</code> from a static slice.\nAdds a default gateway to the routing table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>IpCidr::ip</code>\nAdds a static IP address to the interface with a netmask …\nClears all the assigned IP addresses for this interface\nLists all the IP addresses currently assigned to this …\nRemoves a static (or dynamic) IP address from the interface\nReturn true if the socket is closed\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data and …\nTells this interface that it will subscribe to a …\nTells this interface that it will subscribe to a …\nIndicates if the KEEP_ALIVE flag is set which means that …\nTells this interface that it will unsubscribe to a …\nTells this interface that it will unsubscribe to a …\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nReturns how long the socket will remain in a TIME_WAIT …\nLists for TCP connections on a specific IP and Port …\nReturns the hardware MAC address for this interface\nGets a flag that indicates if multicast packets that this …\nGets a flag that indicates if multicast packets that this …\nGets the TTL for IPv4 multicast packets which is the …\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nIndicates if the NO_DELAY flag is set which means that data\nPolls the source to see if there is data waiting\nPolls the source to see if data can be sent\nThe archived counterpart of <code>IpRoute::preferred_until</code>\nThe archived counterpart of <code>IpCidr::prefix</code>\nReturns if the socket is running in promiscuous mode …\nSize of the receive buffer that holds all data that has not\nRemoves a previously registered waker using a token\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nPerforms DNS resolution for a specific hostname\nAdds a specific route to the routing table\nClears the routing table for this interface\nLists all the routes defined in the routing table for this …\nRemoves a routing rule from the routing table\nSize of the send buffer that holds all data that is …\nSets a flag that means that the UDP socket is able to …\nWhen DONT_ROUTE is set the packet will be sent directly to …\nRegisters a waker for when a new connection has arrived. …\nRegisters a waker for when this connection is ready to …\nWhen KEEP_ALIVE is set the connection will periodically …\nSets the length of the buffer.\nDetermines how long the socket will remain in a TIME_WAIT …\nSets a flag that indicates if multicast packets that this …\nSets a flag that indicates if multicast packets that this …\nSets the TTL for IPv4 multicast packets which is the …\nWhen NO_DELAY is set the data that needs to be transmitted …\nTells the raw socket and its backing switch that all …\nSets the receive buffer size which acts as a trottle for …\nSets the size of the send buffer which will hold the bytes …\nSets how many network hops the packets are permitted for …\nSets how many network hops the packets are permitted for …\nShuts down either the READER or WRITER sides of the socket …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nReturns the status/state of the socket\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTries to accept a new connection\nAttempts to flush the object, ensuring that any buffered …\nTry to convert self into <code>BytesMut</code>.\nAttempts to cheaply reclaim already allocated capacity for …\nTries to read a packet from the socket\nRecv a packet from the socket\nRecv a packet from the socket\nTries to send out a datagram or stream of bytes on this …\nSends out a datagram or stream of bytes on this socket\nSends out a datagram or stream of bytes on this socket to …\nReturns the maximum number of network hops before packets …\nReturns the maximum number of network hops before packets …\nDisconnects from the remote network essentially unbridging …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nThe archived counterpart of <code>IpRoute::via_router</code>\nCreates a new <code>BytesMut</code> with the specified capacity.\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new interface on the remote location using a …\nCreates a new interface on the remote location using a …\nCreates a new interface on the remote location using a …\nCreates a new interface on the remote location using a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an amount (e.g. amount of bytes)\nBegins the process of accepting a socket and returns it …\nCreates a socket that can be used to send and receive ICMP …\nCreates a low level socket that can read and write …\nOpens a UDP socket that listens on a specific IP and Port …\nBoth the reading and the writing portions of the [<code>TcpStream</code>…\nBridges this local network with a remote network, which is …\nList of CIDR routes from a routing table\nCloses the socket\nOpens a TCP connection to a particular destination IP …\nAcquires an IP address on the network and configures the …\nRepresents a duration of time\nAn error has occurred\nReturns a flag of true or false\nFlushes all the data by ensuring a full round trip is …\nAdds a default gateway to the routing table\nReturns the local address of this TCP listener\nReturns the address (IP and Port) of the peer socket that …\nIndicates if the SO_BROADCAST flag is set which means that …\nIndicates if the packet will pass straight through to the …\nLists all the IP addresses currently assigned to this …\nIndicates if the KEEP_ALIVE flag is set which means that …\nReturns how long the socket will remain in a TIME_WAIT …\nReturns the hardware MAC address for this interface\nGets a flag that indicates if multicast packets that this …\nGets a flag that indicates if multicast packets that this …\nGets the TTL for IPv4 multicast packets which is the …\nIndicates if the NO_DELAY flag is set which means that data\nReturns if the socket is running in promiscuous mode …\nSize of the receive buffer that holds all data that has not\nLists all the routes defined in the routing table for this …\nSize of the send buffer that holds all data that is …\nReturns the status/state of the socket\nReturns the maximum number of network hops before packets …\nAdds a static IP address to the interface with a netmask …\nA single IP address\nList of IP addresses\nClears all the assigned IP addresses for this interface\nRemoves a static (or dynamic) IP address from the interface\nReturn true if the socket is closed\nTells this interface that it will subscribe to a …\nTells this interface that it will subscribe to a …\nTells this interface that it will unsubscribe to a …\nTells this interface that it will unsubscribe to a …\nLists for TCP connections on a specific IP and Port …\nRepresents a MAC address\nMessage sent by the client to the server\nMessage sent by the server back to a client\nNothing is returned (or noop)\nThe reading portion of the [<code>TcpStream</code>] should be shut down.\nPerforms DNS resolution for a specific hostname\nAdds a specific route to the routing table\nClears the routing table for this interface\nList of IP routes from a routing table\nRemoves a routing rule from the routing table\nSets a flag that means that the UDP socket is able to …\nWhen DONT_ROUTE is set the packet will be sent directly to …\nWhen KEEP_ALIVE is set the connection will periodically …\nDetermines how long the socket will remain in a TIME_WAIT …\nSets a flag that indicates if multicast packets that this …\nSets a flag that indicates if multicast packets that this …\nSets the TTL for IPv4 multicast packets which is the …\nWhen NO_DELAY is set the data that needs to be transmitted …\nTells the raw socket and its backing switch that all …\nSets the receive buffer size which acts as a trottle for …\nSets the size of the send buffer which will hold the bytes …\nSets how many network hops the packets are permitted for …\nPossible values which can be passed to the […\nShuts down either the READER or WRITER sides of the socket …\nReference to a socket\nA single IP address\nList of socket addresses\nRepresents a socket ID\nThe status of the socket\nThe TTL of a packet\nDisconnects from the remote network essentially unbridging …\nThe writing portion of the [<code>TcpStream</code>] should be shut down.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll ports are allowed\nAll domains\nAll IPs\nAll IPs\nAllowed DNS queries\nRepresents a DNS rule\nRepresents the direction of the network traffic\nA single domain like: example.com\nA domain glob like: *.example.com\nSpecification of a domain\nA single IP\nSingle IP\nAn IP range in the format of <code>ip/mask</code>\nAn IP range in the format of <code>ip/mask</code>\nAllowed IPv4 traffic\nRepresents an Ipv4 rule\nSpecification of an Ipv4\nAllowed IPv6 traffic\nRepresents an Ipv6 rule\nSpecification of an Ipv6 address\nNegative of a rule\nAllows a single port\nAllows a range of ports\nSpecification of a port rule\nRepresents all supported rules\nRepresents the errors that could happen during parsing the …\nRepresents a ruleset that can be used to specify a …\nReturns the allowed ports on the domains allowed by this …\nReturns <code>true</code> if the <code>domain</code> is allowed by this rule\nReturns <code>true</code> if this rule allows querying the specific …\nReturns <code>true</code> if at least one rule allows querying the …\nReturns <code>true</code> if this rule allows accessing <code>socket_addr</code> in …\nReturns <code>true</code> if at least one rule allows accessing …\nReturns <code>true</code> if this rule blocks querying the specific …\nReturns <code>true</code> if this rule blocks accessing <code>socket_addr</code> in …\nExpands the DNS rule that allows the specified <code>domain</code> into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this rule is a DNS rule and has not been …\nReturns allowed ports for the specified <code>domain</code> if this …\nSets the expanded state of this rule if its a DNS rule\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new interface on the remote location using a …\nCreates a new interface on the remote location using a …\nCreates a new interface on the remote location using a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")