searchState.loadedDescShard("wasmer_vm", 0, "Runtime library support for Wasmer.\nallocate exception object and get an exnref for it\nThe memory does not support atomic operations.\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nSignatures are stored in the table and checked in the …\nceil.f32\nceil.f64\nThe operation would cause the size of the memory to exceed …\ndata.drop\ndebug_str\ndebug_usize\nA dynamic function has the native signature: …\nThe actual memory can be resized and moved.\nThe personality function\nThe second stage of the EH personality function\nelem.drop\nOpaque pointer to arbitrary hostdata.\nfloor.f32\nfloor.f64\nPointer to function: contains enough information to call …\nref.func\nA function export value.\nA safe wrapper around <code>VMFunctionBody</code>.\nA user defined error value, used for error cases not …\nA global export value.\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nA <code>heap_addr</code> instruction was misaligned.\nThe data is owned here.\nmemory.atomic.notify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nResolved import pointers.\nIndirect call to a null table entry.\nThe data is stored inline in the <code>VMContext</code> of an instance.\nThis is an intermediate type that manages the raw …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nInternal handle to an object owned by the current context.\nInvalid memory was provided.\nA trap raised from a wasm libcall\nThe name of a runtime library routine.\nGiven a caught native exception pointer, get the exnref …\nRepresents memory that is used by the WebAsssembly module\nCaller asked for a maximum memory greater than we can give …\nData used by the generated code is generally located …\nA memory export value.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nError type describing things that can go wrong when …\nReturned when a shared memory is required, but the given …\nImplementation styles for WebAssembly linear memory.\nCaller asked for more minimum memory than we can give them.\nA simple struct consisting of a page-aligned pointer to …\nThe type of mmap to create\nnearest.f32\nnearest.f64\nA location in memory for a Waiter\nA trap indicating that the runtime was unable to allocate …\nThe probestack based on the Rust probestack\nThe memory is private to the process and not shared with …\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nGet the values buffer pointer out of an exnref\nLow level error with mmap.\nPointers to section data.\nThe memory is shared with other processes. This is only …\nWebAssembly requires that the caller and callee signatures …\nThe current stack space was exhausted.\nA static function has the native signature: …\nAddress space is allocated up front.\nHandle to an object managed by a context.\nUnique ID to identify a context.\nTrait to represent an object managed by a context. This is …\nSet of objects managed by a context.\nA table export value.\nA <code>table_addr</code> instruction detected an out-of-bounds error.\ntable.copy\nA reference stored in a table. Can be either an externref …\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nImplementation styles for WebAssembly tables.\nA tag export value.\nTarget specific type for shared signature index.\nthrow\nStores trace message with backtrace.\nA trap code describing the reason for a trap.\nFunction which may handle custom signals while processing …\ntrunc.f32\ntrunc.f64\nAn atomic memory access was attempted with an unaligned …\nA WASM exception was thrown but not caught.\nAn exception was thrown but it was left uncaught.\nA throw_ref was executed but the exnref was not …\nCode that was supposed to have been unreachable was …\nReturned when trying to call a memory operation that is …\nA user-raised trap through <code>raise_user_trap</code>.\nVersion number of this crate.\nAn index type for builtin functions.\nThe VM caller-checked “anyfunc” record, for …\nConfiguration for the runtime VM Currently only the stack …\nThe VM “context”, which is pointed to by the <code>vmctx</code> arg …\nThe <code>VMDynamicFunctionContext</code> is the context that dynamic …\nUnderlying object referenced by a <code>VMExceptionRef</code>.\nRepresents a reference to a VMExceptionObj.\nThe value of an export passed from one instance to another.\nUnderlying object referenced by a <code>VMExternRef</code>.\nRepresents an opaque reference to any data within …\nA function reference. A single word that points to …\nA function export value.\nA placeholder byte-sized type which is just used to …\nUnion representing the first parameter passed when calling …\nUnderlying FunctionEnvironment used by a <code>VMFunction</code>.\nAn imported function.\nA function kind is a calling convention into and out of …\nA Global instance\nThe storage for a WebAssembly global defined within the …\nThe fields compiled code needs to access to utilize a …\nA handle holding an <code>Instance</code> of a WebAssembly module.\nRepresents linear memory that can be either owned or shared\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nThis class computes offsets to fields within VMContext and …\nA linear memory instance.\nA shared linear memory instance.\nAn index into the shared signature registry, usable for …\nA tag index, unique within the Store in which the instance …\nA table instance.\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nA tag export value.\nThe type for tramplines in the VM.\nA trap raised from the Wasm generated code\nThe address of the inner dynamic function.\nThe address of the Waiter location\nPointer to the <code>VMCallerCheckedAnyfunc</code> which contains data …\nPointer to the table data.\nThe start address which is always valid, even if the …\nA pointer to the imported function body.\nReturns the total number of builtin functions.\nAddress of the function call trampoline to invoke this …\nCatches any wasm traps that happen within the execution of …\nWhether or not this type has transferred ownership of the …\nThe contents of the environment.\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nThe context that the inner dynamic function will receive.\nThe current number of elements in the table.\nThe current logical size of this linear memory in bytes.\nA pointer to the imported table description.\nA pointer to the imported memory description.\nA pointer to the imported global variable description.\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nAdd current thread to the waiter hash, and wait until …\nA pointer to the <code>VMContext</code> that owns the function or host …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts a <code>VMFuncRef</code> from a <code>RawValue</code>.\nFunction body.\nResolved addresses for imported functions.\nReturns an index for wasm’s <code>data.drop</code> instruction.\nReturns an index for wasm’s <code>elem.drop</code>.\nReturns an index for wasm’s <code>func.ref</code> instruction.\nReturns an index for wasm’s imported <code>debug_str</code> builtin …\nReturns an index for wasm’s imported <code>debug_usize</code> builtin …\nReturns an index for wasm’s imported <code>memory.grow</code> builtin …\nReturns an index for wasm’s imported <code>memory.size</code> builtin …\nReturns an index for wasm’s imported <code>memory.atomic.notify</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait32</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait64</code>…\nReturns an index for wasm’s <code>memory.copy</code> for imported …\nReturns an index for wasm’s <code>memory.fill</code> for imported …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nReturns an index for wasm’s <code>memory.grow</code> builtin function.\nReturns an index for wasm’s <code>memory.size</code> builtin function.\nReturns an index for wasm’s local <code>memory.atomic.notify</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait32</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait64</code> …\nReturns an index for wasm’s <code>memory.copy</code> for locally …\nReturns an index for wasm’s <code>memory.fill</code> for locally …\nReturns an index for wasm’s <code>memory.init</code> instruction.\nReturns an index for wasm’s <code>raise_trap</code> instruction.\nReturns an index for wasm’s <code>table.copy</code> when both tables …\nReturns an index for wasm’s <code>table.fill</code> instruction for …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.init</code>.\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nResolved addresses for imported globals.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nHandle to the <code>VMFunction</code> in the context.\nHandle to the <code>VMTable</code> in the context.\nA handle to the <code>Memory</code> that owns the memory description.\nA handle to the <code>Global</code> that owns the global description.\nAssociated data owned by a host function.\nHost functions can have custom environments.\nReturn the index as an u32 number.\nReturns index value.\nThis function is required to be called before any …\nAn <code>Instance</code> contains all the runtime state used by …\nThe <code>Instance</code> itself.\nThe layout of the <code>instance_ptr</code> buffer.\nThe layout of <code>Instance</code> (which can vary).\nThe buffer that will contain the <code>VMInstance</code> and dynamic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>VMFuncRef</code> into a <code>RawValue</code>.\nThe function kind (specifies the calling convention for the\nThe kind of tag.\nRuntime library calls.\nList the objects in the store.\nList the objects in the store, mutably.\nResolved addresses for imported memories.\nMemory management for linear memories.\nGets the message for this trap code\nLow-level abstraction for allocating and managing …\nReturn a new <code>VMOffsets</code> instance, for a given pointer size.\nConstructs <code>TargetSharedSignatureIndex</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size …\nNumber of local memories defined in the module\nNumber of local tables defined in the module\nReturns the offset-guard size\nInformation about the offsets into the <code>instance_ptr</code> buffer …\nWhen executing on the Wasm stack, temporarily switch back …\nThis section defines the <code>PROBESTACK</code> intrinsic which is …\nRaises a trap from inside library code immediately.\nRaises a user-defined trap immediately.\nResets the memory back to zero length\nResets the memory down to a zero size\nResets the memory down to a zero size\nResets the memory down to a zero size\nCarries a Rust panic across wasm code and resumes the …\nDefault stack size is 1MB.\nImplement a registry of function signatures, for fast …\nThe function type, used for compatibility checking.\nThe tag type, used for compatibility checking.\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturn the size of <code>VMFuncRef</code>.\nReturn the size of <code>VMCallerCheckedAnyfunc</code>.\nReturn the size of the <code>VMContext</code> allocation.\nReturn the size of <code>VMDynamicFunctionContext</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMFunctionImport</code>.\nReturn the size of <code>VMGlobalImport</code>.\nReturn the size of a pointer to a <code>VMGlobalDefinition</code>;\nReturn the size of <code>VMMemoryDefinition</code>.\nThe size of the <code>current_length</code> field.\nReturn the size of <code>VMMemoryImport</code>.\nReturn the size of <code>VMSharedSignatureIndex</code>.\nReturn the size of <code>VMSharedTagIndex</code>.\nReturn the size of <code>VMTableDefinition</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMTableImport</code>.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nOur chosen implementation style.\nMemory management for tables.\nThe WebAssembly table description.\nResolved addresses for imported tables.\nAccess the internal atomics handler.\nReturn the function name associated to the libcall.\nThis is the module that facilitates the usage of Traps in …\nAttempts to clone this memory (if its clonable)\nOwned memory can not be cloned (this will always return …\nShared memory can always be cloned\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this memory.\nFunction signature id.\nRaw value of the global.\nThe offset to the pointer to the anyfunc inside the ref.\nThe offset of the <code>call_trampoline</code> field.\nThe offset of the <code>func_ptr</code> field.\nThe offset of the <code>type_index</code> field.\nThe offset of the <code>vmctx</code> field.\nThis file declares <code>VMContext</code> and several related structs …\nWasm functions take a pointer to <code>VMContext</code>.\nFunction <code>VMContext</code> or host env.\nReturn the offset to builtin function in …\nThe offset of the builtin functions array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>signature_ids</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>tags</code> array.\nReturn the offset to <code>VMFunctionImport</code> index <code>index</code>.\nReturn the offset to the <code>body</code> field in …\nReturn the offset to the <code>vmctx</code> field in …\nReturn the offset to the <code>VMGlobalDefinition</code> index <code>index</code>.\nReturn the offset to <code>VMGlobalImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMGlobalImport</code> …\nReturn the offset to <code>VMMemoryDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMMemoryDefinition</code> …\nReturn the offset to the <code>current_length</code> field in …\nReturn the offset to <code>VMMemoryImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMMemoryImport</code> …\nReturn the offset to the <code>vmctx</code> field in <code>VMMemoryImport</code> …\nReturn the offset to <code>VMSharedSignatureIndex</code> index <code>index</code>.\nReturn the offset to <code>VMTableDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMTableDefinition</code> …\nReturn the offset to the <code>current_elements</code> field in …\nReturn the offset to <code>VMTableImport</code> index <code>index</code>.\nReturn the offset to the <code>definition</code> field in <code>VMTableImport</code> …\nThe offset of the <code>address</code> field.\nThe offset of the <code>ctx</code> field.\nThe offset of the <code>body</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>vmctx</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_length</code> field.\nThe offset of the <code>from</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_elements</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nOptional stack size (in byte) of the VM. Value lower than …\nCall the wasm function pointed to by <code>callee</code>.\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the OOM occurred\nNative stack backtrace at the time the exception was …\nThe exception reference of the uncaught exception.\nThe program counter in generated code where this trap …\nOptional trapcode associated to the signal that caused the …\nCode of the trap.\nUnderlying object referenced by a <code>VMExceptionRef</code>.\nRepresents a reference to a VMExceptionObj.\nGets the backtrace of this exception at the time it was …\nExtracts a <code>VMExceptionRef</code> from a <code>RawValue</code>.\nConverts the <code>VMExceptionRef</code> into a <code>RawValue</code>.\nCreates a new VMExceptionObj from the given tag and …\nCreates a new VMExceptionObj from the given tag with all …\nGets the payload of this exception.\nGets the tag of this exception.\nGets the raw u32 exnref value.\nA function export value.\nA global export value.\nA memory export value.\nA table export value.\nA tag export value.\nThe value of an export passed from one instance to another.\nA function export value.\nA tag export value.\nPointer to the <code>VMCallerCheckedAnyfunc</code> which contains data …\nAssociated data owned by a host function.\nThe function kind (specifies the calling convention for the\nThe kind of tag.\nCreate a new <code>VMTag</code>.\nThe function type, used for compatibility checking.\nThe tag type, used for compatibility checking.\nUnderlying object referenced by a <code>VMExternRef</code>.\nRepresents an opaque reference to any data within …\nReturns a reference to the underlying value.\nExtracts a <code>VMExternRef</code> from a <code>RawValue</code>.\nConverts the <code>VMExternRef</code> into a <code>RawValue</code>.\nWraps the given value to expose it to Wasm code as an …\nUnderlying FunctionEnvironment used by a <code>VMFunction</code>.\nReturns a mutable reference to the underlying value.\nReturns a reference to the underlying value.\nThe contents of the environment.\nWraps the given value to expose it to Wasm code as a …\nA Global instance\nCopies this global\nCreate a new, zero bit-pattern initialized global from a …\nGet the type of the global.\nGet a pointer to the underlying definition used by the …\nResolved import pointers.\nResolved addresses for imported functions.\nResolved addresses for imported globals.\nResolved addresses for imported memories.\nConstruct a new <code>Imports</code> instance.\nConstruct a new <code>Imports</code> instance with no imports.\nResolved addresses for imported tables.\nA WebAssembly instance.\nA handle holding an <code>Instance</code> of a WebAssembly module.\nEagerly builds all the <code>VMFuncRef</code>s for imported and local …\nReturn a pointer to the <code>VMBuiltinFunctionsArray</code>.\nPointer to the object store of the context owning this …\nDrop the given data segment, truncating its length to zero.\nDrop an element.\nReturn an iterator over the exports of this instance.\nFinishes the instantiation process started by <code>Instance::new</code>…\nReturns the argument unchanged.\nGet a <code>VMFuncRef</code> for the given <code>FunctionIndex</code>.\nMapping of function indices to their func ref backing …\nPointers to function call trampolines in executable memory.\nPointers to functions in executable memory.\nGet an imported, foreign table.\nGet a locally-defined table.\nGet a table defined locally within this module.\nGet a locally defined memory as mutable.\nGet a locally defined or imported memory.\nCompute the offset for a memory data initializer.\nReturn a byte-slice view of a memory’s data.\nGet a table by index regardless of whether it is …\nGet a table handle by index regardless of whether it is …\nCompute the offset for a table element initializer.\nGet a locally defined or imported memory.\nGet a locally defined or imported memory.\nReturn the indexed <code>VMGlobalDefinition</code>.\nReturn the indexed <code>VMGlobalDefinition</code>.\nWebAssembly global data.\nReturn a pointer to the <code>VMGlobalDefinition</code>s.\nMapping of function indices to their func ref backing …\nReturn the indexed <code>VMFunctionImport</code>.\nReturn a pointer to the <code>VMFunctionImport</code>s.\nReturn the indexed <code>VMGlobalImport</code>.\nReturn a pointer to the <code>VMGlobalImport</code>s.\nReturn a pointer to the <code>VMMemoryImport</code>s.\nReturn the indexed <code>VMMemoryImport</code>.\nPerform a <code>memory.copy</code> on an imported memory.\nPerform the <code>memory.fill</code> operation on an imported memory.\nGrow imported memory by the specified amount of pages.\nPerform an Atomic.Notify\nReturns the number of allocated wasm pages in an imported …\nPerform an Atomic.Wait32\nPerform an Atomic.Wait64\nReturn the index <code>VMTableImport</code>.\nReturns the element at the given index.\nGrow table by the specified amount of elements.\nSet table element by index for an imported table.\nReturns the number of elements in a given imported table.\nReturn a pointer to the <code>VMTableImports</code>s.\nInitialize the table memory from the provided initializers.\nInitialize the <code>Instance::passive_elements</code> map by resolving …\nInitialize the table memory from the provided initializers.\nReturn a reference to the contained <code>Instance</code>.\nThe <code>Instance</code> itself.\nThe layout of <code>Instance</code> (which can vary).\nReturn a mutable reference to the contained <code>Instance</code>.\nCalls <code>U::from(self)</code>.\nInvoke the WebAssembly start function of the instance, if …\nDo a <code>memory.copy</code> for a locally defined memory.\nPerform the <code>memory.fill</code> operation on a locally defined …\nPerform an Atomic.Notify\nPerform an Atomic.Wait32\nPerform an Atomic.Wait64\nLookup an export with the given name.\nLookup an export with the given export declaration.\nWebAssembly linear memory data.\nReturn a pointer to the <code>VMMemoryDefinition</code>s.\nReturn the indexed <code>VMMemoryDefinition</code>.\nGrow memory by the specified amount of pages.\nGrow memory in this instance by the specified amount of …\nReturn the memory index for the given <code>VMMemoryDefinition</code>.\nReturn the memory index for the given <code>VMMemoryDefinition</code> …\nPerforms the <code>memory.init</code> operation.\nReturn the indexed <code>VMMemoryDefinition</code>.\nReturns the number of allocated wasm pages.\nReturn a reference-counting pointer to a module.\nThe <code>ModuleInfo</code> this <code>Instance</code> was instantiated from.\nReturn a reference to a module.\nCreate a new <code>VMInstance</code> pointing at freshly allocated …\nOffsets in the <code>vmctx</code> region.\nOffsets in the <code>vmctx</code> region.\nPassive data segments from our module. As <code>data.drop</code>s …\nPassive elements in this instantiation. As <code>elem.drop</code>s …\nSet the indexed global to <code>VMGlobalDefinition</code>.\nSet the indexed memory to <code>VMMemoryDefinition</code>.\nUpdates the value for a defined table to <code>VMTableDefinition</code>.\nReturn the indexed <code>VMSharedTagIndex</code>.\nReturn a pointer to the <code>VMSharedTagIndex</code>s.\nReturn a pointer to the <code>VMSharedSignatureIndex</code>s.\nReturn the indexed <code>VMTableDefinition</code>.\nThe <code>table.fill</code> operation: fills a portion of a table with …\nGet table element by index.\nGet table element reference.\nGrow table by the specified amount of elements.\nGrow table in this instance by the specified amount of …\nReturn the table index for the given <code>VMTableDefinition</code>.\nReturn the table index for the given <code>VMTableDefinition</code> in …\nThe <code>table.init</code> operation: initializes a portion of a table …\nReturn the indexed <code>VMTableDefinition</code>.\nSet table element by index.\nSet table element reference.\nReturns the number of elements in a given table.\nWebAssembly table data.\nReturn a pointer to the <code>VMTableDefinition</code>s.\nWebAssembly tag data. Notably, this stores <em>all</em> tags, not …\nReturn a reference to the vmctx used by compiled wasm code.\nReturn a reference to the vmctx used by compiled wasm code.\nAdditional context used by compiled WebAssembly code. This …\nReturn the offset from the vmctx pointer to its containing …\nHelper function to access various locations offset from …\nReturn a raw pointer to the vmctx used by compiled wasm …\nReturn a raw pointer to the vmctx used by compiled wasm …\nReturn a reference to the <code>VMOffsets</code> to get offsets in the …\nThis is an intermediate type that manages the raw …\nWhether or not this type has transferred ownership of the …\nCalculate the appropriate layout for the internal <code>Instance</code> …\nThe layout of the <code>instance_ptr</code> buffer.\nThe buffer that will contain the <code>VMInstance</code> and dynamic …\nFinish preparing by writing the internal <code>Instance</code> into …\nGet the locations of where the local <code>VMMemoryDefinition</code>s …\nAllocates instance data for use with <code>VMInstance::new</code>.\nGet the <code>VMOffsets</code> for the allocated buffer.\nInformation about the offsets into the <code>instance_ptr</code> buffer …\nGet the locations of where the <code>VMTableDefinition</code>s should …\nallocate exception object and get an exnref for it\nceil.f32\nceil.f64\ndata.drop\ndebug_str\ndebug_usize\nThe personality function\nThe second stage of the EH personality function\nelem.drop\nfloor.f32\nfloor.f64\nref.func\nmemory.atomic.notify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nThe name of a runtime library routine.\nGiven a caught native exception pointer, get the exnref …\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nnearest.f32\nnearest.f64\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nGet the values buffer pointer out of an exnref\ntable.copy\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nthrow\ntrunc.f32\ntrunc.f64\nProbestack check\nThe function pointer to a libcall\nSafety\nThe implementation of Wasmer’s personality function.\nImplementation for allocating an exception. Returns the …\nImplementation of <code>data.drop</code>.\n(debug) Print a string.\n(debug) Print an usize.\nImplementation of <code>elem.drop</code>.\nGiven a pointer to a caught exception, return the exnref …\nImplementation of f32.ceil\nImplementation of f32.floor\nImplementation of f32.nearest\nImplementation of f32.trunc\nImplementation of f64.ceil\nImplementation of f64.floor\nImplementation of f64.nearest\nImplementation of f64.trunc\nImplementation of <code>func.ref</code>.\nImplementation of memory.notfy for imported 32-bit …\nImplementation of memory.wait32 for imported 32-bit …\nImplementation of memory.wait64 for imported 32-bit …\nImplementation of <code>memory.copy</code> for imported memories.\nImplementation of <code>memory.fill</code> for imported memories.\nImplementation of memory.grow for imported 32-bit memories.\nImplementation of memory.size for imported 32-bit memories.\nImplementation of <code>table.get</code> for imported tables.\nImplementation of <code>table.grow</code> for imported tables.\nImplementation of <code>table.set</code> for imported tables.\nImplementation of <code>table.size</code> for imported tables.\nImplementation of memory.notfy for locally-defined 32-bit …\nImplementation of memory.wait32 for locally-defined 32-bit …\nImplementation of memory.wait64 for locally-defined 32-bit …\nImplementation of <code>memory.copy</code> for locally defined memories.\nImplementation of <code>memory.fill</code> for locally defined memories.\nImplementation of memory.grow for locally-defined 32-bit …\nImplementation of <code>memory.init</code>.\nImplementation of memory.size for locally-defined 32-bit …\nImplementation for raising a trap\nGiven a VMContext and an exnref (handle to an exception …\nImplementation of <code>table.copy</code>.\nImplementation of <code>table.fill</code>.\nImplementation of <code>table.get</code>.\nImplementation of <code>table.grow</code> for locally-defined tables.\nImplementation of <code>table.init</code>.\nImplementation of <code>table.set</code>.\nImplementation of <code>table.size</code>.\nImplementation for throwing an exception.\nUtilities for parsing DWARF-encoded data streams. See …\nImplementation of personality function and unwinding …\nParsing of GCC-style Language-Specific Data Area (LSDA) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead a type T and then bump the pointer by that amount.\nULEB128 and SLEB128 encodings are defined in Section 7.6 - …\nLanding pad.\n32-bit ARM Darwin platforms uses SjLj exceptions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads an offset (<code>usize</code>) from <code>reader</code> whose encoding is …\nReads a pointer from <code>reader</code> whose encoding is described by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nThe implementation of Wasmer’s personality function.\nThe second stage of the personality function. See module …\nRepresents memory that is used by the WebAsssembly module\nRepresents linear memory that can be either owned or shared\nA linear memory instance.\nA linear memory instance.\nA shared linear memory instance.\nCopies this memory to a new memory\nCopies the memory (in this case it performs a …\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nNotify waiters from the wait list. Return the number of …\nAdd current thread to the waiter hash, and wait until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates VMMemory from a custom implementation - the …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nReturns the number of pages in the allocated memory block\nGrow memory by the specified amount of wasm pages.\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe WebAssembly linear memory description.\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreates a new linear memory instance of the correct type …\nBuild a <code>Memory</code> with either self-owned or VM owned metadata.\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nResets the memory back to zero length\nResets the memory down to a zero size\nReturns the size of hte memory in pages\nReturns the memory style for this memory.\nOur chosen implementation style.\nAccess the internal atomics handler.\nConverts this owned memory into shared memory\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nThe owned memory definition used by the generated code\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nA simple struct consisting of a page-aligned pointer to …\nThe type of mmap to create\nThe memory is private to the process and not shared with …\nThe memory is shared with other processes. This is only …\nCreate a new <code>Mmap</code> pointing to <code>accessible_size</code> bytes of …\nReturn the allocated memory as a mutable pointer to u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a pointer to u8.\nReturn the allocated memory as a slice of u8.\nReturn the allocated memory as a slice of u8.\nReturn the allocated memory as a slice of u8.\nDuplicate in a new memory mapping.\nDuplicate in a new memory mapping.\nReturn whether any memory has been allocated.\nReturn the length of the allocated memory.\nMake the memory starting at <code>start</code> and extending for <code>len</code> …\nConstruct a new empty instance of <code>Mmap</code>.\nRound <code>size</code> up to the nearest multiple of <code>page_size</code>.\nCreate a new <code>Mmap</code> pointing to at least <code>size</code> bytes of …\nThe probestack based on the Rust probestack\nWebAssembly requires that the caller and callee signatures …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLooks up a shared signature index within this registry.\nCreate a new <code>SignatureRegistry</code>.\nRegister a signature and return its unique index.\nThe data is owned here.\nThe data is stored inline in the <code>VMContext</code> of an instance.\nInternal handle to an object owned by the current context.\nData used by the generated code is generally located …\nHandle to an object managed by a context.\nTrait to represent an object managed by a context. This is …\nSet of objects managed by a context.\nReturns underlying pointer to the VM data.\nReturn an vector of all globals and converted to u128\nConstructs a <code>StoreHandle</code> from a <code>StoreId</code> and an …\nReturns a reference to the object that this handle points …\nReturns a reference to the object that this handle points …\nReturns a pair of mutable references from two handles.\nReturns a mutable reference to the object that this handle …\nReturns a mutable reference to the object that this handle …\nReturns the ID of this context.\nReturns the internal handle contains within this handle.\nReturn an immutable iterator over all globals\nList the objects in the store.\nList the objects in the store, mutably.\nMoves the given object into a context and returns a handle …\nMoves the given object into a context and returns a handle …\nCreate a new instance of <code>Self</code>\nSet a global, at index idx. Will panic if idx is out of …\nSets the ID of this store\nOverrides the store id with a new ID\nReturns the ID of the context associated with the handle.\nOpaque pointer to arbitrary hostdata.\nPointer to function: contains enough information to call …\nA reference stored in a table. Can be either an externref …\nA table instance.\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nCopies the table into a new table\nCopy <code>len</code> elements from <code>table[src_index..]</code> to …\nReturns the argument unchanged.\nCreate a new linear table instance with specified minimum …\nGet reference to the specified element.\nReturns the size of the table\nGet the <code>VMTableDefinition</code>.\nGrow table by the specified amount of elements.\nCalls <code>U::from(self)</code>.\nCreate a new linear table instance with specified minimum …\nCreate a new <code>Table</code> with either self-owned or VM owned …\nSet reference to the specified element.\nReturns the number of allocated elements.\nReturns the style for this Table.\nOur chosen implementation style.\nThe WebAssembly table description.\nReturns the type for this Table.\nReturn a <code>VMTableDefinition</code> for exposing the table to …\nAtomic operations are disabled.\nA location in memory for a Waiter\nHashMap of Waiters for the Thread/Notify opcodes\nA weak handle to a <code>ThreadConditions</code> instance, which does …\nTo many waiter for an address\nWait/Notify is not implemented for this memory\nError that can occur during wait/notify calls.\nThe address of the Waiter location\nIf set to true, all waits will fail with an error.\nDisable the use of atomics, leading to all atomic waits …\nNotify waiters from the wait list\nAdd current thread to the waiter hash\nGet a weak handle to this <code>ThreadConditions</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ThreadConditions\nAttempt to upgrade this handle to a strong reference.\nWake all the waiters, <em>without</em> marking them as notified.\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nA <code>heap_addr</code> instruction was misaligned.\nIndirect call to a null table entry.\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nThe current stack space was exhausted.\nA <code>table_addr</code> instruction detected an out-of-bounds error.\nA trap code describing the reason for a trap.\nAn atomic memory access was attempted with an unaligned …\nAn exception was thrown but it was left uncaught.\nA throw_ref was executed but the exnref was not …\nCode that was supposed to have been unreachable was …\nWebAssembly trap handling, which is built on top of the …\nA trap raised from a wasm libcall\nA trap indicating that the runtime was unable to allocate …\nStores trace message with backtrace.\nA WASM exception was thrown but not caught.\nA user-raised trap through <code>raise_user_trap</code>.\nA trap raised from the Wasm generated code\nAttempts to downcast the <code>Trap</code> to a concrete type.\nAttempts to downcast the <code>Trap</code> to a concrete type.\nReturns true if the <code>Trap</code> is the same as T\nReturns true if the trap is an exception\nConstruct a new Wasm trap with the given trap code.\nConstruct a new OOM trap with the given source location …\nIf the <code>Trap</code> is an uncaught exception, returns it.\nReturns trap code, if it’s a Trap\nConstruct a new UncaughtException trap with the given …\nConstruct a new Error with the given a user error.\nConstruct a new Wasm trap with the given source location …\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the OOM occurred\nNative stack backtrace at the time the exception was …\nThe exception reference of the uncaught exception.\nThe program counter in generated code where this trap …\nOptional trapcode associated to the signal that caused the …\nCode of the trap.\nA Trap triggered by a wasm libcall\nA panic caused by the host\nRead-only information that is used by signal handlers to …\nFunction which may handle custom signals while processing …\nA custom error triggered by the user\nConfiguration for the runtime VM Currently only the stack …\nA trap caused by the Wasm generated code\nCatches any wasm traps that happen within the execution of …\nInformation about the currently running coroutine. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to handle the trap if it’s a wasm trap.\nThis function is required to be called before any …\nRuns the given function with a trap handler context. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA module for registering a custom alternate signal stack …\nWhen executing on the Wasm stack, temporarily switch back …\nRuns the given function on a separate stack so that its …\nRaises a trap from inside library code immediately.\nRaises a user-defined trap immediately.\nCarries a Rust panic across wasm code and resumes the …\nDefault stack size is 1MB.\nOptional stack size (in byte) of the VM. Value lower than …\nCall the wasm function pointed to by <code>callee</code>.\nA dynamic function has the native signature: …\nA static function has the native signature: …\nAn array that stores addresses of builtin functions. We …\nThe VM caller-checked “anyfunc” record, for …\nThe VM “context”, which is pointed to by the <code>vmctx</code> arg …\nThe <code>VMDynamicFunctionContext</code> is the context that dynamic …\nUnion representing the first parameter passed when calling …\nAn imported function.\nA function kind is a calling convention into and out of …\nThe storage for a WebAssembly global defined within the …\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nAn index into the shared signature registry, usable for …\nA tag index, unique within the Store in which the instance …\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nThe type for tramplines in the VM.\nThe address of the inner dynamic function.\nPointer to the table data.\nThe start address which is always valid, even if the …\nA pointer to the imported function body.\nAddress of the function call trampoline to invoke this …\nThe context that the inner dynamic function will receive.\nThe current number of elements in the table.\nThe current logical size of this linear memory in bytes.\nA pointer to the imported table description.\nA pointer to the imported memory description.\nA pointer to the imported global variable description.\nA pointer to the <code>VMContext</code> that owns the function or host …\nReturns the argument unchanged.\nFunction body.\nHandle to the <code>VMFunction</code> in the context.\nHandle to the <code>VMTable</code> in the context.\nA handle to the <code>Memory</code> that owns the memory description.\nA handle to the <code>Global</code> that owns the global description.\nHost functions can have custom environments.\nGet the inner value.\nReturn a mutable reference to the associated <code>Instance</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the pointer stored is null or not.\nPerform the <code>memory32.atomic.check32</code> operation for the …\nPerform the <code>memory32.atomic.check64</code> operation for the …\nDo an unsynchronized, non-atomic <code>memory.copy</code> for the …\nPerform the <code>memory.fill</code> operation for the memory in an …\nCreate a new <code>VMSharedTagIndex</code>.\nConstruct a <code>VMGlobalDefinition</code>.\nCreate a new <code>VMSharedSignatureIndex</code>.\nFunction signature id.\nRaw value of the global.\nWasm functions take a pointer to <code>VMContext</code>.\nFunction <code>VMContext</code> or host env.")