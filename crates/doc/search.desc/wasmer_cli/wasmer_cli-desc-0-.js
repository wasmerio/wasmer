searchState.loadedDescShard("wasmer_cli", 0, "The Wasmer binary lib\nVersion number of this crate.\nCommon module with common used structures across different …\nA convenient little abstraction for building up C …\nThe commands available in the Wasmer binary.\nCommon module with common used structures across different …\nImplements <code>PretyError</code> to print pretty errors in the CLI …\nLogging functions for the debug feature.\nRun the Wasmer CLI.\nUtility functions for the WebAssembly module\nA macro that prints a warning with nice colors\nThe compiler used for the store\nCranelift compiler\nHeadless compiler\nLLVM compiler\nPerfmap-based profilers.\nThe compiler options\nSinglepass compiler\nV8 runtime\nWamr runtime\nThe WebAssembly features that can be passed through the …\nWasmi runtime\nDeprecated, threads are enabled by default.\nEnable support for all pre-standard proposals.\nEnable support for the bulk memory proposal.\nUse Cranelift compiler.\nDetect features from a WebAssembly module binary.\nDisable support for the threads proposal.\nOnly available for the LLVM compiler. Enable the “…\nEnable compiler internal verification.\nReturn all enabled compilers\nEnable support for the exceptions proposal.\nEnable support for the extended constant expressions …\nFilter enabled backends based on required WebAssembly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a copy of the default features with user-configured …\nGet an engine for this backend type\nGet the enaled Wasm features.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse LLVM compiler.\nLLVM debug directory, where IR and object files will be …\nOnly available for the LLVM compiler. Sets the number of …\nEnable support for the memory64 proposal.\nEnable support for the module linking proposal.\nEnable support for the multi memory proposal.\nEnable support for the multi value proposal.\nEnable a profiler.\nEnable support for the reference types proposal.\nEnable support for the relaxed SIMD proposal.\nEnable support for the SIMD proposal.\nUse Singlepass compiler.\nCheck if this backend supports all the required …\nEnable support for the tail call proposal.\n<code>ToString::to_string</code>, but without panic on OOM.\nC constant array.\nAn identifier in C.\nA statement in the C programming language. This may not be …\nA Type in the C language.\nA C-style cast\nA declaration of some kind.\nA function or function pointer.\nC 16 bit signed integer type.\nC 32 bit signed integer type.\nC 64 bit signed integer type.\nC 8 bit signed integer type.\nC pointer sized signed integer type.\nA literal array of CStatements.\nA literal constant value, passed through directly as a …\nA pointer to some other type.\nA user defined type.\nTypedef one type to another.\nC 16 bit unsigned integer type.\nC 32 bit unsigned integer type.\nC 64 bit unsigned integer type.\nC 8 bit unsigned integer type.\nC pointer sized unsigned integer type.\nC <code>void</code> type.\nConvenience function to get a const void pointer type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate C source code from some <code>CStatements</code> into a String.\nGenerate the C source code for a type into the given <code>String</code>…\nGenerate C source code for the given CStatement.\nGenerate the C source code for a type with a nameinto the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a header file for the static object file produced.\nConvenience function to get a mutable void pointer type.\nThe type of the thing being declared.\nThe definition of the thing being declared.\nThe thing being cast.\nWhether the thing being declared is <code>const</code>.\nWhether the thing being declared is <code>extern</code>.\nThe contents of the array.\nThe name of the thing being declared.\nThe new name by which this type may be called.\nThe type of the thing being typedef’d.\nThe type to cast to.\nThe raw value acting as a constant.\nThe arguments the function takes.\nThe type that the pointer points to.\nThe type of the array.\nWhether the pointer is <code>const</code>.\nThe return value if it has one\nHelper functions to simplify the usage of the static …\nGenerate the header file that goes with the generated …\nAdd a Wasmer package’s bindings to your application\nCreate and manage Wasmer Edge apps\nAn executable CLI command that runs in an async context.\nUnregister and/or register wasmer as binfmt interpreter\nManage the local Wasmer cache\nAn executable CLI command.\nThe options for the wasmer Command Line Interface\nCompile a WebAssembly binary\nGet various configuration information needed to compile …\nCompile a WebAssembly binary into a native executable\nCompile a WebAssembly binary into an object file\nDeploy apps to Wasmer Edge [alias: app deploy]\nManage DNS records\nGenerate the C static_defs.h header file for the input …\nGenerate autocompletion for different shells\nGenerate man pages\nInitializes a new wasmer.toml file\nInspect a WebAssembly file\nManage journals (compacting, inspecting, filtering, …)\nLogin into Wasmer\nManage Wasmer namespaces\nPublish a package to a registry [alias: package publish]\nRun a WebAssembly file or Wasmer container\nUpdate wasmer to the latest version\nRun commands/packages on Wasmer Edge in an interactive …\nValidate a WebAssembly binary\nCommand-line arguments for the Wasmer CLI.\nRun spec testsuite\nShows the current logged in user for the current active …\nEdge app commands.\nCreate a standalone native executable for a given Wasm …\nCreate a standalone native executable for a given Wasm …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main function for the Wasmer CLI tool.\nEdge SSH command.\nPrint version info and exit.\nRuns a .wast WebAssembly test suites\nAdd a Wasmer package’s bindings to your application.\nConstruct a command which we can run to add packages.\nAdd the package as a dev-dependency.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd the JavaScript bindings using “npm install”.\nThe packages to add (e.g. “wasmer/wasmer-pack@0.5.0” …\nAdd the Python bindings using “pip install”.\nAdd the JavaScript bindings using “pnpm add”.\nExecute [<code>Add</code>].\nAdd the JavaScript bindings using “yarn add”.\nManage Wasmer Deploy apps.\nCreate a new Edge app.\nDelete an Edge app.\nReturns the argument unchanged.\nGet information about an edge app.\nShow short information about an Edge app.\nCalls <code>U::from(self)</code>.\nList Edge apps.\nShow logs for an Edge app.\nGet information about an edge app.\nEdge app version management.\nCreate a new Edge app.\nThe path to the directory where the config file for the …\nThe name of the app (can be changed later)\nWhether or not to deploy the application once it is …\nTries to retrieve templates from a local file cache. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad cached data from a file.\nName to use when creating a new package from a template.\nSkip local schema validation.\nDo not wait for the app to become reachable if deployed.\nDo not prompt for user input.\nDo not interact with any APIs.\nThe owner of the app.\nName of the package to use.\nDon’t print any message.\nA reference to the template to use.\nWhether or not to search (and use) a local manifest.\nApp volume management.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList volumes tied to an edge app.\nList the volumes of an app.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDelete an existing Edge app\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeploy an app to Wasmer Edge.\nWait for the app to be deployed.\nWait for the app to be deployed and ready.\nSpecify the name (user or namespace) of the app to be …\nWhether or not to automatically bump the package version …\nThe path to the directory containing the <code>app.yaml</code> file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not make the new app version the default (active) …\nDo not persist the app ID under <code>app_id</code> field in app.yaml.\nSkip local schema validation.\nDo not wait for the app to become reachable.\nDo not prompt for user input.\nSpecify the owner (user or namespace) of the app.\nName of the package to use when creating an app to deploy.\nThe path to the <code>app.yaml</code> file.\nAutomatically publish the package referenced by this app.\nDon’t print any message.\nA reference to the template to use when creating an app to …\nWhether or not to search (and use) a local manifest when …\nSame as [Self::deploy], but also prints verbose …\nApp volume management.\nReturns the argument unchanged.\nGet deployments for an app.\nCalls <code>U::from(self)</code>.\nList volumes tied to an edge app.\nGet logs for an app deployment.\nGet the volumes of an app.\nReturns the argument unchanged.\nID of the deployment.\nCalls <code>U::from(self)</code>.\nList the volumes of an app.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet logs for an app deployment.\nReturns the argument unchanged.\nID of the deployment.\nCalls <code>U::from(self)</code>.\nRetrieve detailed informations about an app\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow short information about an Edge app.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList apps belonging to a namespace\nGet all apps that are accessible by the current user, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of apps to display\nGet apps in a specific namespace.\nAsks whether to display the next page or not\nSort order for apps.\nRetrieve the logs of an app\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe date of the earliest log entry.\nThe identifier of the app instance to show logs related to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum log lines to fetch. Defaults to 1000.\nThe identifier of the request to show logs related to\nStreams of logs to display\nThe date of the latest log entry.\nContinuously watch for new logs and display them in …\nPurge caches for applications.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformations about available Edge regioins.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList available Edge regions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nManage and reveal secrets related to Edge apps.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new app secret.\nThe path to the directory where the config file for the …\nGiven a list of secrets, checks if the given secrets …\nReturns the argument unchanged.\nPath to a file with secrets stored in JSON format to …\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nWhether or not to redeploy the app after creating the …\nThe name of the secret to create.\nThe value of the secret to create.\nDelete an existing app secret.\nDelete all the secrets related to an app.\nThe path to the directory where the config file for the …\nDelete the secret(s) without asking for confirmation.\nReturns the argument unchanged.\nPath to a file with secrets stored in JSON format to …\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nThe name of the secret to delete.\nRetrieve the value of an existing app secret.\nThe path to the directory where the config file for the …\nThe identifier of the app to list secrets of.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nReveal the value of an existing app secret.\nReveal all the secrets related to an app.\nThe path to the directory where the config file for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nThe name of the secret to get the value of.\nUpdate an existing app secret.\nThe path to the directory where the config file for the …\nGiven a list of secrets, checks if the given secrets …\nReturns the argument unchanged.\nPath to a file with secrets stored in JSON format to …\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nDon’t print any message.\nWhether or not to redeploy the app after creating the …\nThe name of the secret to update.\nThe value of the secret to update.\nUtility struct used just to implement [<code>CliRender</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nA secrets-specific app to retrieve an app identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBackend app id like “da_xxysw34234”\nApp identifier.\nOptions for identifying an app.\nA utility struct used by commands that need the <code>AppIdent</code> …\nOptions for identifying an app.\nBackend app VERSION id like “dav_xxysw34234”\nIdentifier of the application.\nIdentifier of the application.\nIdentifier of the application.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the specified app from the API.\nPrompt for an app ident.\nResolve an app identifier through the API.\nConvert to <code>AppIdentOpts</code>. Useful for accessing the methods …\n<code>ToString::to_string</code>, but without panic on OOM.\nManage app versions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSwitch the active version of an app. (rollback / …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApp version ID to activate.\nShow information for a specific app version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<em>Name</em> of the version - NOT the unique version id!\nList versions of an app.\nPagination cursor - get versions after this version.\nGet all versions of the app. Overrides pagination flags (…\nPagination cursor - get versions before this version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of items to return.\nPagination offset - get versions after this offset.\nApp volume management.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList volumes tied to an edge app.\nRetrieve access credentials for the volumes of an app.\nThe possibile formats to output the credentials in.\nFormatting options for credentials.\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRotate the secrets linked to volumes of an app.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList the volumes of an app.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nManage authentication in Wasmer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLogin into Wasmer (using a browser or by providing a token …\nThe directory cached artefacts are saved to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVariable to login without opening a browser\nChange the current registry\nThe API token to use when communicating with the registry …\nSet Wasmer’s home directory\nSignifying that the token is authorized\nA utility struct used to manage the local server for …\nSignifying that the token is cancelled\nPayload from the frontend after the user has authenticated.\nPayload from the frontend after the user has authenticated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStatus of the token , whether it is authorized or cancelled\nToken Received from the frontend\nLog out from Wasmer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nWhether or not to revoke the associated token\nPrint the current user and where is logged into\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecute <code>wasmer whoami</code>\nUnregister and/or register wasmer as binfmt interpreter\nThe filename used to register the wasmer CLI as a binfmt …\nRegister wasmer as binfmt interpreter\nSoft unregister, and register\nUnregister a binfmt interpreter for wasm32\nMount point of binfmt_misc fs\nexecute Binfmt\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe options for the <code>wasmer cache</code> subcommand\nClear the cache\nDisplay the location of the cache\nThe operation to perform.\nExecute the cache command\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe options for the <code>wasmer compile</code> subcommand\nRuns logic for the <code>compile</code> subcommand\nReturns the argument unchanged.\nHashing algorithm to be used for module hash\nCalls <code>U::from(self)</code>.\nOutput file\nInput file\nCompilation Target triple\n“true” or “false” for handling input in the CLI\nThe options for the <code>wasmer config</code> subcommand: …\nNormal configuration\n<code>wasmer config get $KEY</code>\nSubcommand for <code>wasmer config set</code>\nPrint the proxy URL\nSet the active proxy URL\nPrint the token for the currently active registry or …\nSet the token for the currently active registry or nothing …\nPrint the registry URL of the currently active registry\nSet the registry URL of the currently active registry\nSubcommand for <code>wasmer config get</code>\n<code>wasmer config set $KEY $VALUE</code>\nSet if a proxy URL should be used\nSet or change the token for the current active registry\nSet the current active registry URL\nSet if telemetry is enabled\nSet if update notifications are enabled\nSetting that can be stored in the wasmer config\nPrint whether telemetry is currently enabled\nSet whether telemetry is currently enabled\nPrint whether update notifications are enabled\nSet whether update notifications are enabled\nDirectory containing Wasmer executables.\nC compiler flags for files that include Wasmer headers.\nPrint the path to the wasmer configuration file where all …\nWhether to enable update notifications\nWhether to enable telemetry\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDirectory containing Wasmer headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDirectory containing Wasmer libraries.\nLibraries needed to link against Wasmer components.\nOutputs the necessary details for compiling and linking a …\nPrint the installation prefix.\nRuns logic for the <code>config</code> subcommand\nSubcommand for <code>wasmer config get | set</code>\nToken to set\nUrl of the registry\nSet if a proxy URL should be used (empty = unset proxy)\nConnects to the Wasmer Edge distributed network.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne or more static IP address to assign the interface\nSkips bringing the interface up using the <code>ip</code> tool.\nDo not modify the postfix of the URL before connecting\nPrints the network token rather than connecting\nRuns in promiscuous mode\nThr URL we will be connecting to\nContainer related commands. (inspecting, unpacking, …)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRENAMED: the ‘container unpack’ command has been …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nallow\nIn pirita mode, specifies whether multi-atom pirita files …\nCommand entrypoint for multiple commands\nThe options for the <code>wasmer create-exe</code> subcommand\nGiven a pirita file, determines whether the file has one …\nPrefix map used during compilation of object files\nreject\nURL to download\nUrl or version to download the release from\nRelease version to download\nVolume object file (name + path to object file)\nAtom name\nCompiled atom files to link into the final binary\nCommand name\nCached compilation objects for files on disk\nGiven a pirita file, compiles the .wasm files into the …\nCreate the static_defs.h header files in the /include …\nOptional directorey used for debugging: if present, will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets up the prefix map from a collection like “sha123123…\nGenerate the wasmer_main.c that links all object files …\nHashing algorithm to be used for module hash\nOptional path to the static_defs.h header file, relative …\nSha256 hashes for the input files\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional libraries to link against. This is useful for …\nCross-compilation library path (path to libwasmer.a / …\nGiven a directory, links all the objects from the …\nLink compiled objects using the system linker\nManual prefixes for input files (file:prefix)\nModule info, set when the wasm file is compiled\nVolume name\nPath to volume fileblock object file\nOutput file\nInput file\nPath to the object file, relative to the entrypoint.json …\nPrefix for every input file, e.g. “wat2wasm:sha256abc123…\nGiven a .wasm file, compiles the .wasm file into the …\nRuns logic for the <code>compile</code> subcommand\nCompile the C code.\nCross-compilation tarball library path\nCompilation Target triple\nUse the system linker instead of zig for linking\nCan specify either a release version (such as “3.0.1”) …\nSerialize a set of volumes so they can be read by the C …\nVolume objects (if any) to link into the final binary\nSpecify <code>zig</code> binary path (defaults to <code>zig</code> in $PATH if not …\npath to library tarball cache dir\npath to the static libwasmer\nThe options for the <code>wasmer create-exe</code> subcommand\nAtom name to compile when compiling multi-atom pirita files\nOptional directorey used for debugging: if present, will …\nRuns logic for the <code>create-obj</code> subcommand\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutput file or directory if the input is a pirita file\nInput file\nPrefix for the function names in the input file in the …\nCompilation Target triple\nManage DNS records\nGet a domain\nGet zone file for a domain\nList domains\nRegister new domain\nSync local zone file with remotex\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow a domain\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of the domain.\nList domains.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of the namespace.\nShow a domain\nReturns the argument unchanged.\nauto update DNS records for this domain.\nCalls <code>U::from(self)</code>.\nName of the domain.\nowner under which the domain will live.\nShow a zone file\nShow a zone file\nName of the domain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not delete records that are not present in the zone file\noutput file name to store zone file\nfilename of  zone-file to sync\nThe options for the <code>wasmer gen-c-header</code> subcommand\nFor pirita files: optional atom name to compile\nRuns logic for the <code>gen-c-header</code> subcommand\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutput file\nInput file\nPrefix hash (default: SHA256 of input .wasm file)\nCompilation Target triple\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhere to store the generated file(s) to. Defaults to …\nThe shell to generate the autocompletions script for.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhere to store the generated file(s) to.\nCLI args for the <code>wasmer init</code> command\nAdd dependency on JS\nAdd dependency on Python\nWhat template to use for the initialized wasmer.toml\nInitialize wasmer.toml for a binary package\nInitialize an empty wasmer.toml\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet bindings returns the first .wai / .wit file found and …\nReturns the dependencies based on the <code>--template</code> flag\nInclude file paths into the target container filesystem\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize wasmer.toml for a library package\nIf the <code>manifest-path</code> is a Cargo.toml, use that file to …\nNamespace to init with, default = current logged in user …\nDirectory of the output file name. wasmer init will error …\nForce overwriting the wasmer.toml, even if it already …\nPackage name to init with, default = Cargo.toml name or …\nDon’t display debug output\nAdd default dependencies for common packages\nVersion of the initialized package\nWrites the metadata to a wasmer.toml file, making sure we …\nThe options for the <code>wasmer validate</code> subcommand\nRuns logic for the <code>validate</code> subcommand\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFile to validate as WebAssembly\nManage Journal files.\nCompacts a journal into a smaller size by removed …\nExports the contents of a journal to stdout as JSON objects\nExtracts an element of a journal\nFilters out certain events from a journal\nImports the events into a journal as JSON objects\nInspects the contents of a journal and summarizes it to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompacts a journal by removing duplicate or redundant …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be compacted\nExports all the events in a journal to STDOUT as JSON data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be printed\nWhat to extract from the journal\nExtracts an element from the journal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be compacted\nPath to the memory file that will be updated using this …\nRewrites a journal log removing events that match the …\nFilters out all core syscalls\nFilters out all the file system operations\nFlags that specify what should be filtered out\nFilters out all the memory events\nFilters out the networking\nFilters out the snapshots\nFilters out all the thread stacks\nFilters to be applied to the output journal, filter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be read\nPath to the journal that will be the output of the filter\nImports events into a journal file. Events are streamed as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be printed\nPrints a summarized version of contents of a journal to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to the journal that will be printed\nManage namespaces.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new namespace.\nDescription of the namespace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of the namespace.\nShow a namespace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of the namespace.\nList namespaces.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPackage related commands.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild a container from a package manifest.\nOnly checks whether the package could be built successfully\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutput path for the package file. Defaults to current …\nPath of the package or wasmer.toml manifest.\nRun the publish command without any output\nRead and return a manifest given a path.\nDifferent conditions that can be “awaited” when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDownload a package from the registry.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath where the package file should be written to. If not …\nThe package to download.\nRun the download command without any output\nUnpack the downloaded package.\nVerify that the downloaded file is a valid package.\nPublish (push and tag) a package to the registry.\nWhether or not the patch field of the version of the …\nRun the publish logic without sending anything to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSkip validation of the uploaded package\nDo not prompt for user input.\nOverride the name of the package to upload\nOverride the namespace of the package to upload\nDirectory containing the <code>wasmer.toml</code>, or a custom *.toml …\nOverride the package version of the uploaded package in …\nRun the publish command without any output\nTimeout (in seconds) for the publish query to the registry.\nWait for package to be available on the registry before …\nPush a package to the registry.\nRun the publish logic without sending anything to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nOverride the name of the package to upload. If a name is …\nOverride the namespace of the package to upload\nDirectory containing the <code>wasmer.toml</code>, or a custom *.toml …\nRun the publish command without any output\nTimeout (in seconds) for the publish query to the registry.\nTag an existing package.\nWhether or not the patch field of the version of the …\nRun the publish logic without sending anything to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDo not prompt for user input.\nThe hash of the package to tag\nThe package to tag.\nOverride the name of the package to upload\nOverride the namespace of the package to upload\nDirectory containing the <code>wasmer.toml</code>, or a custom *.toml …\nOverride the package version of the uploaded package in …\nRun the publish command without any output\nTimeout (in seconds) for the publish query to the registry.\nWait for package to be available on the registry before …\nWebc unpack format.\nSee <code>PackageUnpack::format</code> for details.\nExtract contents of a webc image to a directory.\nSee <code>PackageUnpack::format</code> for details.\nOutput format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe output directory.\nOverwrite existing directories/files.\nPath to the package.\nRun the unpack command without any output\nA directory containing a <code>wasmer.toml</code> file\nA file on disk (<code>*.wasm</code>, <code>*.webc</code>, etc.).\nA package to be downloaded (a URL, package name, etc.)\nThe input that was passed in via the command-line.\nThe unstable <code>wasmer run</code> subcommand.\nWe’ve been given the path for a file… What does it …\nThe address to serve on.\nCommand-line arguments passed to the package\nGenerate a coredump at this path if a WebAssembly trap …\nThe entrypoint module for webc packages.\nExit the current process, using the WASI exit code if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Run instance for arguments/env, assuming we’re …\nTry to load a Wasmer package from a directory containing a …\nTry to load a file into something that can be used to run …\nHashing algorithm to be used for module hash\nThe file, URL, or package to run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe function to invoke.\nTry to resolve the <code>PackageSource</code> to an executable artifact.\nSet the default stack size (default is 1048576)\n<code>ToString::to_string</code>, but without panic on OOM.\nThe default name of the directory to store cached …\nA struct representing cached capabilities for a specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA custom implementation of the [<code>virtual_net::VirtualNetwork</code>…\nA custom implementation of the [<code>virtual_net::VirtualNetwork</code>…\nCreates a socket that can be used to send and receive ICMP …\nCreates a low level socket that can read and write …\nOpens a UDP socket that listens on a specific IP and Port …\nBridges this local network with a remote network, which is …\nOpens a TCP connection to a particular destination IP …\nAcquires an IP address on the network and configures the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a default gateway to the routing table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a static IP address to the interface with a netmask …\nClears all the assigned IP addresses for this interface\nLists all the IP addresses currently assigned to this …\nRemoves a static (or dynamic) IP address from the interface\nLists for TCP connections on a specific IP and Port …\nReturns the hardware MAC address for this interface\nPerforms DNS resolution for a specific hostname\nAdds a specific route to the routing table\nClears the routing table for this interface\nLists all the routes defined in the routing table for this …\nRemoves a routing rule from the routing table\n<code>ToString::to_string</code>, but without panic on OOM.\nDisconnects from the remote network essentially unbridging …\nWASI Options\nRequire WASI modules to only import 1 version of WASI.\nDisable the cache for the compiled modules.\nEnables asynchronous threading\nFlag that indicates if the journal will be automatically …\nEnables an exponential backoff (measured in milli-seconds) …\nPass custom environment variables\nForward all host env variables to guest\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the WASI version (if any) for the provided module\nChecks if a given module has any WASI imports at all.\nAllow instances to send http requests.\nList of webc packages that are explicitly included for …\nHelper function for instantiating a module with Wasi …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of injected atoms\nMap a host directory to a different location for the Wasm …\nEnable networking with the host network.\nDisables the TTY bridge\nWASI pre-opened directory\nSpecifies one or more journal files that Wasmer will use …\nSkip writes to stdout and stderr when replying journal …\nAdds a periodic interval (measured in milli-seconds) that …\nIndicates what events will cause a snapshot to be taken …\nIf specified, the runtime will stop executing the WASM …\nList of other containers this module depends on\nTells the compactor to compact when it grows by a certain …\nTells the compactor not to compact when the journal log …\nSpecifies one or more journal files that Wasmer will use …\nThe options for the <code>wasmer self-update</code> subcommand\nRuns logic for the <code>self-update</code> subcommand\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStart a remote SSH session.\nCreate a new token for SSH access through the backend API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Edge SSH server host to connect to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal port mapping to the package that’s running, this …\nPrints the SSH command rather than executing it.\nSSH port to use.\nThe options for the <code>wasmer validate</code> subcommand\nRuns logic for the <code>validate</code> subcommand\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFile to validate as WebAssembly\nThe options for the <code>wasmer wast</code> subcommand\nRuns logic for the <code>validate</code> subcommand\nA flag to indicate wast stop at the first error or …\nReturns the argument unchanged.\nHashing algorithm to be used for module hash\nCalls <code>U::from(self)</code>.\nWast file to run\nHashing algorithm to be used for the module info\nSha256\nThe WebAssembly features that can be passed through the …\nXXHash\nDeprecated, threads are enabled by default.\nEnable support for all pre-standard proposals.\nEnable support for the bulk memory proposal.\nDisable support for the threads proposal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable support for the multi value proposal.\nEnable support for the reference types proposal.\nEnable support for the SIMD proposal.\nThe default value for <code>$WASMER_DIR</code>.\nThe default value for <code>$WASMER_DIR</code>.\nStruct to store login tokens for multiple registry URLs …\nCurrently active registry\nBy convention, something like <code>&quot;wasmer.io&quot;</code> should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad the config based on environment variables and default …\nGets the current (active) registry URL\nReturns the login token for the registry\nCreates and returns the <code>WASMER_DIR</code> directory (or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current registry equals <code>registry</code>.\nThe proxy to use when connecting to the Internet.\nThe registry that wasmer will connect to.\nRegistry URL to login to\nGets the current (active) registry URL\nSave the config to a file\nSets the current (active) registry URL\nSets the login token for the registry URL\nWhether or not telemetry is enabled.\nLogin token for the registry\nMap from “RegistryUrl” to “LoginToken”, in order to\nWhether or not updated notifications are enabled.\nA registry as specified by the user.\nCommand-line flags for determining the local “Wasmer …\nGet the [<code>Registry</code>]’s string representation.\nThe directory all cached artifacts should be saved to.\nThe directory cached artefacts are saved to.\nLoad the current Wasmer config.\nThe directory all Wasmer artifacts are stored in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the specified token.\nGet the GraphQL endpoint for this [<code>Registry</code>].\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the proxy specified in wasmer config if present\nThe registry to fetch packages from (inferred from the …\nGet the GraphQL endpoint used to query the registry.\nGet the “public” url of the current registry (e.g. “…\nThe API token for the active registry.\nThe API token to use when communicating with the registry …\nSet Wasmer’s home directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a valid SSH token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToken used for network access.\nMap from unique app ID (da_…) to SSH token.\nToken used for ssh access.\nA <code>PrettyError</code> for printing <code>anyhow::Error</code> nicely.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PrettyError</code>.\nProcess a <code>Result</code> printing any errors and exiting the …\nMachine-readable logs.\nWhich span events to log.\nThe format used when generating logs.\nControl the output generated by the CLI.\nHuman-readable logs.\nWhen to display colored output.\nGet the draw target to be used with the <code>indicatif</code> crate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize logging based on the <code>$RUST_LOG</code> environment …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHas the <code>--verbose</code> flag been set?\nWhich span events to log.\nThe format to use when generating logs.\nDo not print progress messages.\nCheck whether we should emit ANSI escape codes for log …\nGenerate verbose output (repeat for more verbosity)\nFormatting options for a single item.\nFormatting options for a single item.\nFormatting options for a list of items.\nOutput format. (yaml, json, table)\nOutput format. (yaml, json, table)\nOutput format. (yaml, json, table, item-table)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the output format, defaulting to <code>ItemFormat::Yaml</code>.\nGet the output format, defaulting to the given value if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe identifier for an app or package in the form, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a package manifest from the manifest file.\nMerge two yaml values by recursively merging maps from b …\nThe package’s name.\nThe package’s owner, typically a username or namespace.\nParses an environment variable.\nParses a mapdir from a string\nThe package’s version number.\nThe package must exist in the registry.\nThe package must NOT exist in the registry.\nDefines how to check for a package.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAsk a user for an application name.\nPrompt for a namespace.\nAsk for a package name.\nAsk a user for a package name.\nAsk a user for a package version.\nPrompt for an app name. If an api provided, will check if …\nPrompt for an app name. If an api provided, will check if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to parse the string as a timestamp in a number of …\nSee <code>parse_timestamp_or_relative_time</code>.\nSee <code>parse_timestamp_or_relative_time</code>.\nConvenience function that will unpack .tar.gz files and …")