searchState.loadedDescShard("wasmer_types", 1, "Stores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nA “compiler-only” atomic fence.\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nReturns the argument unchanged.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nReturns the argument unchanged.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nReturns the argument unchanged.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nGets atomic access to a <code>&amp;mut bool</code>.\nGets atomic access to a pointer.\nGet atomic access to a <code>&amp;mut i8</code>.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet atomic access to a <code>&amp;mut i16</code>.\nGet atomic access to a <code>&amp;mut u16</code>.\nGet atomic access to a <code>&amp;mut i32</code>.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet atomic access to a <code>&amp;mut i64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut isize</code>.\nGet atomic access to a <code>&amp;mut usize</code>.\nGets atomic access to a <code>&amp;mut [bool]</code> slice.\nGets atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [i8]</code> slice.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [i16]</code> slice.\nGet atomic access to a <code>&amp;mut [u16]</code> slice.\nGet atomic access to a <code>&amp;mut [i32]</code> slice.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nGet atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nSignals the processor that it is inside a busy-wait …\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nThe message could not be sent because the channel is …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nAn error returned from the <code>send_timeout</code> method.\nThe sending-half of Rust’s synchronous <code>channel</code> type.\nThe message could not be sent because the channel is full …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nCreates a new asynchronous channel, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns an iterator that will block waiting for messages, …\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value on this channel, returning it …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a new synchronous, bounded channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nThe sending-half of Rust’s asynchronous <code>channel</code> type.\nThe sending-half of Rust’s synchronous <code>sync_channel</code> type.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nCreates a new asynchronous channel, returning the …\nClone a sender to send to other threads.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>TryRecvError</code>.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.\nReturns the argument unchanged.\nConverts a <code>SendError&lt;T&gt;</code> into a <code>TrySendError&lt;T&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will block waiting for messages, …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to send a value on this channel, returning it …\nSends a value on this synchronous channel.\nCreates a new synchronous, bounded channel.\nReturns an iterator that will attempt to yield all pending …\nAttempts to return a pending value on this receiver …\nAttempts to send a value on this channel without blocking.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer, or …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nReturns the argument unchanged.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nConverts a boxed slice into a vector by transferring …\nConverts a clone-on-write slice into a vector.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element in a vector if the …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nThe resolver for <code>LibCall::AllocException</code>\nThe archived counterpart of <code>LibCall::AllocException</code>\nalloc_exception\nAn archived <code>LibCall</code>\nThe resolver for <code>LibCall::CeilF32</code>\nThe archived counterpart of <code>LibCall::CeilF32</code>\nceil.f32\nThe resolver for <code>LibCall::CeilF64</code>\nThe archived counterpart of <code>LibCall::CeilF64</code>\nceil.f64\nThe resolver for <code>LibCall::DataDrop</code>\nThe archived counterpart of <code>LibCall::DataDrop</code>\ndata.drop\nThe resolver for <code>LibCall::DebugStr</code>\nThe archived counterpart of <code>LibCall::DebugStr</code>\ndebug_str\nThe resolver for <code>LibCall::DebugUsize</code>\nThe archived counterpart of <code>LibCall::DebugUsize</code>\ndebug_usize\nThe resolver for <code>LibCall::DeleteException</code>\nThe archived counterpart of <code>LibCall::DeleteException</code>\ndelete_exception\nThe resolver for <code>LibCall::EHPersonality</code>\nThe archived counterpart of <code>LibCall::EHPersonality</code>\nThe personality function\nThe resolver for <code>LibCall::ElemDrop</code>\nThe archived counterpart of <code>LibCall::ElemDrop</code>\nelem.drop\nThe resolver for <code>LibCall::FloorF32</code>\nThe archived counterpart of <code>LibCall::FloorF32</code>\nfloor.f32\nThe resolver for <code>LibCall::FloorF64</code>\nThe archived counterpart of <code>LibCall::FloorF64</code>\nfloor.f64\nThe resolver for <code>LibCall::FuncRef</code>\nThe archived counterpart of <code>LibCall::FuncRef</code>\nref.func\nThe resolver for <code>LibCall::ImportedMemory32AtomicNotify</code>\nThe archived counterpart of …\nmemory.atomic.botify for imported memories\nThe resolver for <code>LibCall::ImportedMemory32AtomicWait32</code>\nThe archived counterpart of …\nmemory.atomic.wait32 for imported memories\nThe resolver for <code>LibCall::ImportedMemory32AtomicWait64</code>\nThe archived counterpart of …\nmemory.atomic.wait64 for imported memories\nThe resolver for <code>LibCall::ImportedMemory32Copy</code>\nThe archived counterpart of <code>LibCall::ImportedMemory32Copy</code>\nmemory.copy for imported memories\nThe resolver for <code>LibCall::ImportedMemory32Fill</code>\nThe archived counterpart of <code>LibCall::ImportedMemory32Fill</code>\nmemory.fill for imported memories\nThe resolver for <code>LibCall::ImportedMemory32Size</code>\nThe archived counterpart of <code>LibCall::ImportedMemory32Size</code>\nmemory.size for imported functions\nThe resolver for <code>LibCall::ImportedTableGet</code>\nThe archived counterpart of <code>LibCall::ImportedTableGet</code>\ntable.get for imported tables\nThe resolver for <code>LibCall::ImportedTableGrow</code>\nThe archived counterpart of <code>LibCall::ImportedTableGrow</code>\ntable.grow for imported tables\nThe resolver for <code>LibCall::ImportedTableSet</code>\nThe archived counterpart of <code>LibCall::ImportedTableSet</code>\ntable.set for imported tables\nThe resolver for <code>LibCall::ImportedTableSize</code>\nThe archived counterpart of <code>LibCall::ImportedTableSize</code>\ntable.size for imported tables\nThe name of a runtime library routine.\nThe resolver for an archived <code>LibCall</code>\nThe resolver for <code>LibCall::Memory32AtomicNotify</code>\nThe archived counterpart of <code>LibCall::Memory32AtomicNotify</code>\nmemory.atomic.notify for local memories\nThe resolver for <code>LibCall::Memory32AtomicWait32</code>\nThe archived counterpart of <code>LibCall::Memory32AtomicWait32</code>\nmemory.atomic.wait32 for local memories\nThe resolver for <code>LibCall::Memory32AtomicWait64</code>\nThe archived counterpart of <code>LibCall::Memory32AtomicWait64</code>\nmemory.atomic.wait64 for local memories\nThe resolver for <code>LibCall::Memory32Copy</code>\nThe archived counterpart of <code>LibCall::Memory32Copy</code>\nmemory.copy for local memories\nThe resolver for <code>LibCall::Memory32Fill</code>\nThe archived counterpart of <code>LibCall::Memory32Fill</code>\nmemory.fill for local memories\nThe resolver for <code>LibCall::Memory32Init</code>\nThe archived counterpart of <code>LibCall::Memory32Init</code>\nmemory.init\nThe resolver for <code>LibCall::Memory32Size</code>\nThe archived counterpart of <code>LibCall::Memory32Size</code>\nmemory.size for local functions\nThe resolver for <code>LibCall::NearestF32</code>\nThe archived counterpart of <code>LibCall::NearestF32</code>\nnearest.f32\nThe resolver for <code>LibCall::NearestF64</code>\nThe archived counterpart of <code>LibCall::NearestF64</code>\nnearest.f64\nThe resolver for <code>LibCall::Probestack</code>\nThe archived counterpart of <code>LibCall::Probestack</code>\nprobe for stack overflow. These are emitted for functions …\nThe resolver for <code>LibCall::RaiseTrap</code>\nThe archived counterpart of <code>LibCall::RaiseTrap</code>\nA custom trap\nThe resolver for <code>LibCall::ReadException</code>\nThe archived counterpart of <code>LibCall::ReadException</code>\nread_exception\nThe resolver for <code>LibCall::Rethrow</code>\nThe archived counterpart of <code>LibCall::Rethrow</code>\nrethrow\nThe resolver for <code>LibCall::TableCopy</code>\nThe archived counterpart of <code>LibCall::TableCopy</code>\ntable.copy\nThe resolver for <code>LibCall::TableFill</code>\nThe archived counterpart of <code>LibCall::TableFill</code>\ntable.fill\nThe resolver for <code>LibCall::TableGet</code>\nThe archived counterpart of <code>LibCall::TableGet</code>\ntable.get for local tables\nThe resolver for <code>LibCall::TableGrow</code>\nThe archived counterpart of <code>LibCall::TableGrow</code>\ntable.grow for local tables\nThe resolver for <code>LibCall::TableInit</code>\nThe archived counterpart of <code>LibCall::TableInit</code>\ntable.init\nThe resolver for <code>LibCall::TableSet</code>\nThe archived counterpart of <code>LibCall::TableSet</code>\ntable.set for local tables\nThe resolver for <code>LibCall::TableSize</code>\nThe archived counterpart of <code>LibCall::TableSize</code>\ntable.size for local tables\nThe resolver for <code>LibCall::Throw</code>\nThe archived counterpart of <code>LibCall::Throw</code>\nthrow\nThe resolver for <code>LibCall::TruncF32</code>\nThe archived counterpart of <code>LibCall::TruncF32</code>\ntrunc.f32\nThe resolver for <code>LibCall::TruncF64</code>\nThe archived counterpart of <code>LibCall::TruncF64</code>\ntrunc.f64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the function name associated to the libcall.\nAn archived <code>MemoryStyle</code>\nThe resolver for <code>MemoryStyle::Dynamic</code>\nThe archived counterpart of <code>MemoryStyle::Dynamic</code>\nThe actual memory can be resized and moved.\nMarker trait for 32-bit memories.\nMarker trait for 64-bit memories.\nTrait for the <code>Memory32</code> and <code>Memory64</code> marker types.\nImplementation styles for WebAssembly linear memory.\nThe resolver for an archived <code>MemoryStyle</code>\nType used to pass this value as an argument or return …\nOne value used for counting.\nType used to represent an offset into a memory. This is <code>u32</code>…\nThe resolver for <code>MemoryStyle::Static</code>\nThe archived counterpart of <code>MemoryStyle::Static</code>\nAddress space is allocated up front.\nZero value used for <code>WasmPtr::is_null</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the memory is 64-bit\nConvert a <code>Native</code> to an <code>Offset</code>.\nReturns the offset-guard size\nConvert an <code>Offset</code> to a <code>Native</code>.\nThe archived counterpart of <code>MemoryStyle::Static::bound</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nMirror version of ModuleInfo that can derive rkyv traits\nThe resolver for an archived <code>ArchivableModuleInfo</code>\nAn archived <code>ArchivableModuleInfo</code>\nAn archived <code>ImportKey</code>\nAn archived <code>ModuleId</code>\nThis iterator allows us to iterate over the exports and …\nHash key of an import\nThe resolver for an archived <code>ImportKey</code>\nThis iterator allows us to iterate over the imports and …\nThe resolver for an archived <code>ModuleId</code>\nA translated WebAssembly module, excluding the function …\nGet the custom sections of the module given a <code>name</code>.\nCustom sections in the module.\nThe archived counterpart of …\nThe data for each CustomSection in the module.\nThe archived counterpart of …\nGet the exported signatures of the module\nGet the export types of the module\nExported entities.\nThe archived counterpart of <code>ArchivableModuleInfo::exports</code>\nThe archived counterpart of <code>ImportKey::field</code>\nField name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>LocalFunctionIndex</code> into a <code>FunctionIndex</code>.\nWebAssembly function names.\nThe archived counterpart of …\nGet only the functions\nGet only the functions\nWebAssembly functions (imported and local).\nThe archived counterpart of <code>ArchivableModuleInfo::functions</code>\nGet the given passive element, if it exists.\nConvert a <code>LocalGlobalIndex</code> into a <code>GlobalIndex</code>.\nWebAssembly global initializers.\nThe archived counterpart of …\nGet only the globals\nGet only the globals\nWebAssembly global variables (imported and local).\nThe archived counterpart of <code>ArchivableModuleInfo::globals</code>\nReturns the module hash if available\nhash of the module\nThe archived counterpart of <code>ArchivableModuleInfo::hash</code>\nThe archived counterpart of <code>ModuleId::id</code>\nA unique identifier (within this process) for this module.\nThe archived counterpart of <code>ImportKey::import_idx</code>\nImport index\nGet the imported function types of the module.\nGet the import types of the module\nImported entities with the (module, field, …\nThe archived counterpart of <code>ArchivableModuleInfo::imports</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest whether the given function index is for an imported …\nTest whether the given global index is for an imported …\nTest whether the given memory index is for an imported …\nTest whether the given table index is for an imported …\nTest whether the given tag index is for an imported tag.\nConvert a <code>FunctionIndex</code> into a <code>LocalFunctionIndex</code>. Returns …\nConvert a <code>GlobalIndex</code> into a <code>LocalGlobalIndex</code>. Returns …\nConvert a <code>MemoryIndex</code> into a <code>LocalMemoryIndex</code>. Returns …\nConvert a <code>TableIndex</code> into a <code>LocalTableIndex</code>. Returns None …\nConvert a <code>TagIndex</code> into a <code>LocalTagIndex</code>. Returns None if …\nGet only the memories\nGet only the memories\nWebAssembly linear memories (imported and local).\nThe archived counterpart of <code>ArchivableModuleInfo::memories</code>\nConvert a <code>LocalMemoryIndex</code> into a <code>MemoryIndex</code>.\nThe archived counterpart of <code>ImportKey::module</code>\nModule name\nGet the Module name\nThe name of this wasm module, often found in the wasm file.\nThe archived counterpart of <code>ArchivableModuleInfo::name</code>\nCreate a new <code>ExportsIterator</code> for a given iterator and size\nCreate a new <code>ImportsIterator</code> for a given iterator and size\nAllocates the module data structures.\nNumber of imported functions in the module.\nThe archived counterpart of …\nNumber of imported globals in the module.\nThe archived counterpart of …\nNumber of imported memories in the module.\nThe archived counterpart of …\nNumber of imported tables in the module.\nThe archived counterpart of …\nNumber of imported tags in the module.\nThe archived counterpart of …\nWebAssembly passive data segments.\nThe archived counterpart of …\nWebAssembly passive elements.\nThe archived counterpart of …\nWebAssembly function signatures.\nThe archived counterpart of …\nThe module “start” function, if present.\nThe archived counterpart of …\nConvert a <code>LocalTableIndex</code> into a <code>TableIndex</code>.\nWebAssembly table initializers.\nThe archived counterpart of …\nGet only the tables\nGet only the tables\nWebAssembly tables (imported and local).\nThe archived counterpart of <code>ArchivableModuleInfo::tables</code>\nConvert a <code>LocalTagIndex</code> into a <code>TagIndex</code>.\nWebAssembly tag variables (imported and local).\nThe archived counterpart of <code>ArchivableModuleInfo::tags</code>\nAn archived <code>ModuleHash</code>\nHashing algorithm to be used for the module info\nThe hash of a WebAssembly module.\nThe resolver for an archived <code>ModuleHash</code>\nSha256\nThe resolver for <code>ModuleHash::Sha256</code>\nThe archived counterpart of <code>ModuleHash::Sha256</code>\nsha256\nXXHash\nThe resolver for <code>ModuleHash::XXHash</code>\nThe archived counterpart of <code>ModuleHash::XXHash</code>\nxxhash\nGet the raw hash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a random <code>ModuleHash</code>. For when you don’t care …\nGenerate a new <code>ModuleHash</code> based on the Sha256 hash of some …\nCreate a new <code>ModuleHash</code> from the raw sha256 hash.\nParse a Sha256 hash from a hex-encoded string.\nGenerate a new <code>ModuleHash</code> based on the XXHash hash of some …\nCreate a new <code>ModuleHash</code> from the raw xxhash hash.\nParse a XXHash hash from a hex-encoded string.\nThe ABI for this type (i32, i64, f32, f64)\n<code>NativeWasmType</code> represents a Wasm type that has a direct …\nType for this <code>NativeWasmType</code>.\nAlignment of the metadata.\nCurrent ABI version. Increment this any time breaking …\nLength of the metadata header.\nMagic number to identify wasmer metadata.\nMetadata header which holds an ABI version and the length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert the header into its bytes representation.\nCreates a new header for metadata of the given length.\nParses the header and returns the length of the metadata …\nSource locations.\nTypes for traps.\nDescription of a frame in a backtrace.\nReturns the argument unchanged.\nReturns the WebAssembly function index for this frame.\nThe index of the function in the module\nReturns the offset from the original wasm module’s …\nThe source location of the function\nReturns a descriptive name of the function for this frame, …\nThe function name, if one is available.\nThe source location of the instruction\nCalls <code>U::from(self)</code>.\nReturns the identifer of the module that this frame is for.\nThe name of the module\nReturns the offset within the original wasm module this …\nCreates a new FrameInfo, useful for testing.\nAn archived <code>SourceLoc</code>\nA source location.\nThe resolver for an archived <code>SourceLoc</code>\nRead the bits of this source location.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the default source location?\nCreate a new source location with the given bits.\nAn archived <code>TrapInformation</code>\nInformation about trap.\nThe resolver for an archived <code>TrapInformation</code>\nThe archived counterpart of <code>TrapInformation::code_offset</code>\nThe offset of the trapping instruction in native code. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>TrapInformation::trap_code</code>\nCode of the trap.\nUnique ID to identify a context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn archived <code>TableStyle</code>\nThe resolver for <code>TableStyle::CallerChecksSignature</code>\nThe archived counterpart of …\nSignatures are stored in the table and checked in the …\nImplementation styles for WebAssembly tables.\nThe resolver for an archived <code>TableStyle</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApple Aarch64 platforms use their own variant of the …\nThe “architecture” field, which in some cases also …\nThe “binary format” field, which is usually omitted, …\nThe calling convention, which specifies things like which …\nThe nomenclature is inspired by the <code>cpuid</code> crate. The list …\nA custom vendor. “Custom” in this context means that …\nThe target memory endianness.\nThe “environment” field, which specifies an ABI …\nThe “operating system” field, which sometimes implies …\nThe width of a pointer (in the default address space).\n“System V”, which is used on most Unix-like platfoms. …\nThis is the target that we will use for compiling the …\nA target “triple”. Historically such things had three …\nUser-suggested optimization that might be operated on the …\nThe “vendor” field, which in practice is little more …\nThe WebAssembly C ABI. …\n“Windows Fastcall”, which is used on Windows. Note …\nx86_64 target that only supports Haswell-compatible Intel …\nThe “architecture” (and sometimes the subarchitecture).\nExtracts a string slice.\nThe “binary format” (rarely used).\nReturn the number of bits in a pointer.\nReturn the number of bytes in a pointer.\nThe triple associated for the target.\nThe C data model for a given target. If the model is not …\nReturn the default calling convention for the given target …\nReturn the endianness of this architecture.\nReturn the endianness of this architecture.\nReturn the endianness of this target’s architecture.\nThe “environment” on top of the operating system …\nRetrieves the features for the current Host\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the architecture for the current host.\nReturn the vendor for the current host.\nReturn the operating system for the current host.\nReturn the environment for the current host.\nReturn the binary format for the current host.\nReturn the triple for the current host.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a string\nConvert into a string\nConvert into a string\nConvert into a string\nConvert into a string\nChecks if this Architecture is some variant of Clever-ISA\nCheck if target is a native (eq to host) or not\nTest if this architecture uses the Thumb instruction set.\nCreates a new target given a triple\nThe “operating system” (sometimes also the …\nSuggest the <code>pass_params</code> (also known as g0m0) optimization …\nReturn the pointer bit width of this target’s …\nReturn the pointer bit width of this target’s …\nReturn the pointer width of this target’s architecture.\nRetrieves an empty set of <code>CpuFeature</code>s.\nThe triple associated for the target.\nReturn a <code>Triple</code> with all unknown fields.\nThe “vendor” (whatever that means).\nAn archived <code>TrapCode</code>\nThe resolver for <code>TrapCode::BadConversionToInteger</code>\nThe archived counterpart of …\nFailed float-to-int conversion.\nThe resolver for <code>TrapCode::BadSignature</code>\nThe archived counterpart of <code>TrapCode::BadSignature</code>\nSignature mismatch on indirect call.\nWill return the result of the invocation\nThe resolver for <code>TrapCode::HeapAccessOutOfBounds</code>\nThe archived counterpart of <code>TrapCode::HeapAccessOutOfBounds</code>\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nThe resolver for <code>TrapCode::HeapMisaligned</code>\nThe archived counterpart of <code>TrapCode::HeapMisaligned</code>\nA <code>heap_addr</code> instruction was misaligned.\nThe resolver for <code>TrapCode::IndirectCallToNull</code>\nThe archived counterpart of <code>TrapCode::IndirectCallToNull</code>\nIndirect call to a null table entry.\nThe resolver for <code>TrapCode::IntegerDivisionByZero</code>\nThe archived counterpart of <code>TrapCode::IntegerDivisionByZero</code>\nAn integer division by zero.\nThe resolver for <code>TrapCode::IntegerOverflow</code>\nThe archived counterpart of <code>TrapCode::IntegerOverflow</code>\nAn integer arithmetic operation caused an overflow.\nWill call the function again\nAfter the stack is unwound via asyncify what should the …\nThe resolver for <code>TrapCode::StackOverflow</code>\nThe archived counterpart of <code>TrapCode::StackOverflow</code>\nThe current stack space was exhausted.\nThe resolver for <code>TrapCode::TableAccessOutOfBounds</code>\nThe archived counterpart of …\nA <code>table_addr</code> instruction detected an out-of-bounds error.\nTraps with an error\nA trap code describing the reason for a trap.\nThe resolver for an archived <code>TrapCode</code>\nThe resolver for <code>TrapCode::UnalignedAtomic</code>\nThe archived counterpart of <code>TrapCode::UnalignedAtomic</code>\nAn atomic memory access was attempted with an unaligned …\nThe resolver for <code>TrapCode::UncaughtException</code>\nThe archived counterpart of <code>TrapCode::UncaughtException</code>\nAn exception was thrown but it was left uncaught.\nThe resolver for <code>TrapCode::UnreachableCodeReached</code>\nThe archived counterpart of …\nCode that was supposed to have been unreachable was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the message for this trap code\nAn archived <code>FunctionType</code>\nAn archived <code>GlobalInit</code>\nAn archived <code>GlobalType</code>\nAn archived <code>MemoryType</code>\nAn archived <code>Mutability</code>\nAn archived <code>TableType</code>\nAn archived <code>TagKind</code>\nAn archived <code>TagType</code>\nAn archived <code>Type</code>\nAn archived <code>V128</code>\nThe resolver for <code>Mutability::Const</code>\nThe archived counterpart of <code>Mutability::Const</code>\nThe global is constant and its value does not change\nThe resolver for <code>TagKind::Exception</code>\nThe archived counterpart of <code>TagKind::Exception</code>\nThis tag’s event is an exception.\nThe resolver for <code>Type::ExceptionRef</code>\nThe archived counterpart of <code>Type::ExceptionRef</code>\nA reference to a Wasm exception.\nA descriptor for an exported WebAssembly value.\nThe resolver for <code>Type::ExternRef</code>\nThe archived counterpart of <code>Type::ExternRef</code>\nA reference to opaque data in the Wasm instance.\nA list of all possible types which can be externally …\nThe resolver for <code>Type::F32</code>\nThe archived counterpart of <code>Type::F32</code>\nFloating point 32 bit integer.\nThe resolver for <code>GlobalInit::F32Const</code>\nThe archived counterpart of <code>GlobalInit::F32Const</code>\nAn <code>f32.const</code>.\nThe resolver for <code>Type::F64</code>\nThe archived counterpart of <code>Type::F64</code>\nFloating point 64 bit integer.\nThe resolver for <code>GlobalInit::F64Const</code>\nThe archived counterpart of <code>GlobalInit::F64Const</code>\nAn <code>f64.const</code>.\nThe resolver for <code>Type::FuncRef</code>\nThe archived counterpart of <code>Type::FuncRef</code>\nA reference to a Wasm function.\nThis external type is the type of a WebAssembly function.\nThe signature of a function that is either implemented in …\nThe resolver for an archived <code>FunctionType</code>\nThe resolver for <code>GlobalInit::GetGlobal</code>\nThe archived counterpart of <code>GlobalInit::GetGlobal</code>\nA <code>global.get</code> of another global.\nThis external type is the type of a WebAssembly global.\nGlobals are initialized via the <code>const</code> operators or by …\nThe resolver for an archived <code>GlobalInit</code>\nWebAssembly global.\nThe resolver for an archived <code>GlobalType</code>\nThe resolver for <code>Type::I32</code>\nThe archived counterpart of <code>Type::I32</code>\nSigned 32 bit integer.\nThe resolver for <code>GlobalInit::I32Const</code>\nThe archived counterpart of <code>GlobalInit::I32Const</code>\nAn <code>i32.const</code>.\nThe resolver for <code>Type::I64</code>\nThe archived counterpart of <code>Type::I64</code>\nSigned 64 bit integer.\nThe resolver for <code>GlobalInit::I64Const</code>\nThe archived counterpart of <code>GlobalInit::I64Const</code>\nAn <code>i64.const</code>.\nA descriptor for an imported value into a wasm module.\nThis external type is the type of a WebAssembly memory.\nA descriptor for a WebAssembly memory type.\nThe resolver for an archived <code>MemoryType</code>\nIndicator of whether a global is mutable or not\nThe resolver for an archived <code>Mutability</code>\nThe resolver for <code>GlobalInit::RefFunc</code>\nThe archived counterpart of <code>GlobalInit::RefFunc</code>\nA <code>ref.func &lt;index&gt;</code>.\nThe resolver for <code>GlobalInit::RefNullConst</code>\nThe archived counterpart of <code>GlobalInit::RefNullConst</code>\nA <code>ref.null</code>.\nThis external type is the type of a WebAssembly table.\nA descriptor for a table in a WebAssembly module.\nThe resolver for an archived <code>TableType</code>\nThis external type is the type of a WebAssembly tag.\nThe kind of a [<code>Tag</code>].\nThe resolver for an archived <code>TagKind</code>\nThe signature of a tag that is either implemented in a …\nThe resolver for an archived <code>TagType</code>\nA list of all possible value types in WebAssembly.\nThe resolver for an archived <code>Type</code>\nThe WebAssembly V128 type\nThe resolver for <code>Type::V128</code>\nThe archived counterpart of <code>Type::V128</code>\nA 128 bit number.\nThe resolver for <code>GlobalInit::V128Const</code>\nThe archived counterpart of <code>GlobalInit::V128Const</code>\nA <code>v128.const</code>.\nThe resolver for an archived <code>V128</code>\nThe resolver for <code>Mutability::Var</code>\nThe archived counterpart of <code>Mutability::Var</code>\nThe value of the global can change over time\nConvert the immediate into a slice.\nGet the bytes corresponding to the V128 value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>TagType</code> with the given kind and the …\nAttempt to return the underlying type of this external …\nAttempt to return the underlying type of this external …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if two externs are compatible\nReturns a boolean indicating if the enum is set to mutable.\nReturns true if <code>Type</code> matches any of the numeric types. …\nReturns true if <code>Type</code> matches either of the reference types.\nIterate over the bytes in the constant.\nThe archived counterpart of <code>TagType::kind</code>\nThe kind of the tag.\nThe archived counterpart of <code>TableType::maximum</code>\nThe maximum number of elements in the table.\nThe archived counterpart of <code>MemoryType::maximum</code>\nThe maximum number of pages in the memory.\nAttempt to return the underlying type of this external …\nThe archived counterpart of <code>TableType::minimum</code>\nThe minimum number of elements in the table.\nThe archived counterpart of <code>MemoryType::minimum</code>\nThe minimum number of pages in the memory.\nReturns the module name that this import is expected to …\nThe archived counterpart of <code>GlobalType::mutability</code>\nA flag indicating whether the value may change at runtime.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known by.\nCreates a new Function Type with the given parameter and …\nCreate a new Global variable\nCreates a new <code>TagType</code> with the given kind, parameter and …\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a WebAssembly memory given …\nCreates a new import descriptor which comes from <code>module</code> …\nCreates a new export which is exported with the given <code>name</code> …\nParameter types.\nParameter types.\nThe archived counterpart of <code>FunctionType::params</code>\nThe parameters of the function\nThe archived counterpart of <code>TagType::params</code>\nThe parameters of the function\nReturn types.\nThe archived counterpart of <code>FunctionType::results</code>\nThe return values of the function\nThe archived counterpart of <code>MemoryType::shared</code>\nWhether the memory may be shared between multiple threads.\nAttempt to return the underlying type of this external …\nConvert the immediate into a vector.\nReturns the expected type of this import.\nReturns the type of this export.\nThe archived counterpart of <code>GlobalType::ty</code>\nThe type of the value stored in the global.\nThe archived counterpart of <code>TableType::ty</code>\nThe type of data stored in elements of the table.\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nAn archived <code>Pages</code>\nUnits of WebAssembly memory in terms of 8-bit bytes.\nThe only error that can happen when converting <code>Bytes</code> to …\nUnits of WebAssembly pages (as specified to be 65,536 …\nThe resolver for an archived <code>Pages</code>\nThe number of pages we can have before we run out of byte …\nThe minimum number of pages allowed.\nWebAssembly page sizes are fixed to be 64KiB. Note: large …\nCalculate number of bytes from pages.\nChecked addition. Computes <code>self + rhs</code>, returning <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the largest value that can be represented by the …\nCheck if the provided bytes are wasm-like\nRaw representation of a WebAssembly value.\nTrait for a Value type. A Value type is a type that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis method is passed a byte slice which contains the byte …\nTarget specific type for shared signature index.\nAn index type for builtin functions.\nThis class computes offsets to fields within VMContext and …\nAlign an offset used in this module to a specific …\nReturns the total number of builtin functions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an index for wasm’s <code>data.drop</code> instruction.\nReturns an index for wasm’s <code>elem.drop</code>.\nReturns an index for wasm’s <code>func.ref</code> instruction.\nReturns an index for wasm’s imported <code>alloc_exception</code> …\nReturns an index for wasm’s imported <code>debug_str</code> builtin …\nReturns an index for wasm’s imported <code>debug_usize</code> builtin …\nReturns an index for wasm’s imported <code>delete_exception</code> …\nReturns an index for wasm’s imported <code>memory.grow</code> builtin …\nReturns an index for wasm’s imported <code>memory.size</code> builtin …\nReturns an index for wasm’s imported <code>memory.atomic.notify</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait32</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait64</code>…\nReturns an index for wasm’s <code>memory.copy</code> for imported …\nReturns an index for wasm’s <code>memory.fill</code> for imported …\nReturns an index for wasm’s imported <code>read_exception</code> …\nReturns an index for wasm’s imported <code>rethrow</code> builtin …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nReturns an index for wasm’s imported <code>throw</code> builtin …\nReturns an index for wasm’s <code>memory.grow</code> builtin function.\nReturns an index for wasm’s <code>memory.size</code> builtin function.\nReturns an index for wasm’s local <code>memory.atomic.notify</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait32</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait64</code> …\nReturns an index for wasm’s <code>memory.copy</code> for locally …\nReturns an index for wasm’s <code>memory.fill</code> for locally …\nReturns an index for wasm’s <code>memory.init</code> instruction.\nReturns an index for wasm’s <code>raise_trap</code> instruction.\nReturns an index for wasm’s <code>table.copy</code> when both tables …\nReturns an index for wasm’s <code>table.fill</code> instruction for …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.init</code>.\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nReturn the index as an u32 number.\nReturns index value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size.\nConstructs <code>TargetSharedSignatureIndex</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size …\nThe number of imported functions in the module.\nThe number of imported globals in the module.\nThe number of imported memories in the module.\nThe number of imported tables in the module.\nThe number of imported tags in the module.\nThe number of defined globals in the module.\nNumber of local memories defined in the module\nThe number of defined memories in the module.\nNumber of local tables defined in the module\nThe number of defined tables in the module.\nThe number of signature declarations in the module.\nThe size in bytes of a pointer on the target.\nReturn the size of <code>VMFuncRef</code>.\nReturn the size of <code>VMCallerCheckedAnyfunc</code>.\nReturn the size of the <code>VMContext</code> allocation.\nReturn the size of <code>VMDynamicFunctionContext</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMFunctionImport</code>.\nReturn the size of <code>VMGlobalImport</code>.\nReturn the size of a pointer to a <code>VMGlobalDefinition</code>;\nReturn the size of <code>VMMemoryDefinition</code>.\nThe size of the <code>current_length</code> field.\nReturn the size of <code>VMMemoryImport</code>.\nReturn the size of <code>VMSharedSignatureIndex</code>.\nReturn the size of <code>VMTableDefinition</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMTableImport</code>.\nReturn the size of <code>VMTagImport</code>.\nThe offset to the pointer to the anyfunc inside the ref.\nThe offset of the <code>call_trampoline</code> field.\nThe offset of the <code>func_ptr</code> field.\nThe offset of the <code>type_index</code> field.\nThe offset of the <code>vmctx</code> field.\nReturn the offset to builtin function in …\nThe offset of the builtin functions array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>signature_ids</code> array.\nThe offset of the <code>tables</code> array.\nReturn the offset to <code>VMFunctionImport</code> index <code>index</code>.\nReturn the offset to the <code>body</code> field in …\nReturn the offset to the <code>vmctx</code> field in …\nReturn the offset to the <code>VMGlobalDefinition</code> index <code>index</code>.\nReturn the offset to <code>VMGlobalImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMGlobalImport</code> …\nReturn the offset to <code>VMMemoryDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMMemoryDefinition</code> …\nReturn the offset to the <code>current_length</code> field in …\nReturn the offset to <code>VMMemoryImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMMemoryImport</code> …\nReturn the offset to the <code>vmctx</code> field in <code>VMMemoryImport</code> …\nReturn the offset to <code>VMSharedSignatureIndex</code> index <code>index</code>.\nReturn the offset to <code>VMTableDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMTableDefinition</code> …\nReturn the offset to the <code>current_elements</code> field in …\nReturn the offset to <code>VMTableImport</code> index <code>index</code>.\nReturn the offset to the <code>definition</code> field in <code>VMTableImport</code> …\nReturn the offset to <code>VMTagImport</code> index <code>index</code>.\nThe offset of the <code>address</code> field.\nThe offset of the <code>ctx</code> field.\nThe offset of the <code>body</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>vmctx</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_length</code> field.\nThe offset of the <code>from</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_elements</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.")