searchState.loadedDescShard("wasmer", 0, "<code>Wasmer</code> is the most popular WebAssembly runtime for Rust. …\nThe ABI for this type (i32, i64, f32, f64)\nThe array type that can hold all the represented values.\nHelper trait for a value that is convertible to a <code>EngineRef</code>…\nHelper trait for a value that is convertible to a <code>StoreMut</code>.\nHelper trait for a value that is convertible to a <code>StoreRef</code>.\nAtomic operations are disabled.\nError that can occur during atomic operations. …\nThe memory does not support atomic operations.\nAn enumeration over all the supported runtimes.\nAn enumeration of all the trap kinds supported by the …\nUnits of WebAssembly memory in terms of 8-bit bytes.\nThe C type (a struct) that can hold/represent all the …\nSignatures are stored in the table and checked in the …\nA compilation error occured.\nA compilation error\nThe WebAssembly.CompileError object indicates an error …\nThe binary was valid, but we got an error when trying to …\nThe global is constant and its value does not change\nThe provided binary is corrupted\nThe operation would cause the size of the memory to exceed …\nThe module was compiled with a CPU feature that is not …\nThe <code>cranelift</code> runtime.\nThe Deserialize error can occur when loading a compiled …\nImport from a different Store. This error occurs when an …\nImport from a different <code>Store</code>. This error occurs when an …\nThe actual memory can be resized and moved.\nThe <code>Engine</code> is the entrypoint type for the runtime. It …\nAn engine identifier.\nA temporary handle to an <code>Engine</code>.\nContains the error value\nThe error type for this trait.\nA WebAssembly <code>exception</code> instance.\nThis tag’s event is an exception.\nAn opaque reference to some data. This reference can be …\nA reference to a Wasm exception.\nA nullable first-class reference to a WebAssembly …\nThe <code>ExportError</code> can happen when trying to get a specific …\nAn entity to export.\nA descriptor for an exported WebAssembly value.\nThis trait is used to mark types as gettable from an …\nA trait for accessing exports (like <code>Exportable</code>) but it …\nExports is a special kind of map that allows easily …\nAn iterator over exports.\nAn <code>Extern</code> is the runtime representation of an entity that …\nAn opaque reference to some data. This reference can be …\nA reference to opaque data in the Wasm instance.\nA nullable <code>externref</code> value which can hold opaque data to …\nA list of all possible types which can be externally …\nFloating point 32 bit integer.\nA 32-bit float.\nAn <code>f32.const</code>.\nFloating point 64 bit integer.\nA 64-bit float.\nAn <code>f64.const</code>.\nWill return the result of the invocation\nDescription of a frame in a backtrace.\nA trait to convert a Rust value to a <code>WasmNativeType</code> value, …\nA reference to a Wasm function.\nA nullable first-class reference to a WebAssembly function.\nA WebAssembly <code>function</code> instance.\nFunction export.\nThis external type is the type of a WebAssembly function.\nAn external <code>Function</code>.\nAn opaque reference to a function environment. The …\nA temporary handle to a <code>FunctionEnv</code>.\nThe signature of a function that is either implemented in …\nA generic serialization error\nA generic deserialization error\nA user defined error value, used for error cases not …\nA generic error.\nA <code>global.get</code> of another global.\nA WebAssembly <code>global</code> instance.\nGlobal export.\nThis external type is the type of a WebAssembly global.\nAn external <code>Global</code>.\nGlobals are initialized via the <code>const</code> operators or by …\nWebAssembly global.\nThe sys <code>headless</code> runtime.\nMemory access is outside heap bounds.\nThe <code>HostFunction</code> trait represents the set of functions that\nSigned 32 bit integer.\nA 32-bit integer.\nAn <code>i32.const</code>.\nSigned 64 bit integer.\nA 64-bit integer.\nAn <code>i64.const</code>.\nAn implementation limit was exceeded.\nAn error occurred when checking the import types.\nA descriptor for an imported value into a wasm module.\nAll of the import data used when instantiating.\nAn iterator over module imports.\nIncompatible serialized binary\nAn error than occurs when the exported type and the …\nA WebAssembly Instance is a stateful, executable instance …\nAn error while instantiating a module.\nConvert binary data into <code>bytes::Bytes</code>.\nThe <code>IntoResult</code> trait turns a <code>WasmTypeList</code> into a …\nInput artifact bytes have an invalid length\nInvalid memory was provided.\nThe input WebAssembly code is invalid.\nWill call the function again\nAn IO error\nAn IO error\nAn IO error\nIO errors that can happen while compiling a <code>Module</code>.\nThe <code>llvm</code> runtime.\nA linking ocurred during instantiation.\nThe WebAssembly.LinkError object indicates an error during …\nIndex type of a function defined locally inside the …\nCaller asked for a maximum memory greater than we can give …\nA WebAssembly <code>memory</code> instance.\nMemory export.\nThis external type is the type of a WebAssembly memory.\nAn external <code>Memory</code>.\nMarker trait for 32-bit memories.\nMarker trait for 64-bit memories.\nError for invalid <code>Memory</code> access.\nError type describing things that can go wrong when …\nLocation in a WebAssembly memory.\nReturned when a shared memory is required, but the given …\nTrait for the <code>Memory32</code> and <code>Memory64</code> marker types.\nImplementation styles for WebAssembly linear memory.\nA descriptor for a WebAssembly memory type.\nA WebAssembly <code>memory</code> view.\nA WebAssembly <code>memory</code> view.\nAn error from the middleware error.\nMiddleware error occurred.\nCaller asked for more minimum memory than we can give them.\nThe provided string feature doesn’t exist\nThis error arises when an export is missing\nA WebAssembly Module contains stateless WebAssembly code …\nIndicator of whether a global is mutable or not\nNative Wasm type.\nType used to pass this value as an argument or return …\n<code>NativeWasmType</code> represents a Wasm type that has a direct …\n<code>NativeWasmTypeInto</code> performs conversions from and into …\nString is not valid UTF-8.\nOne value used for counting.\nType used to represent an offset into a memory. This is <code>u32</code>…\nContains the success value\nAfter the stack is unwound via asyncify what should the …\nAddress calculation overflow.\nUnits of WebAssembly pages (as specified to be 65,536 …\nThe error that can happen while parsing a <code>str</code> to retrieve …\nA <code>ref.func &lt;index&gt;</code>.\nA <code>ref.null</code>.\nLow level error with mmap.\nInsufficient resources available for execution.\nInsufficient resources available for linking.\nA struct representing an aborted instruction execution, …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nThe Serialize error can occur when serializing a compiled …\nA handle that exposes operations only relevant for shared …\nThe <code>singlepass</code> runtime.\nA runtime error occured while invoking the start function\nAddress space is allocated up front.\nThe store represents all global state that can be …\nA temporary handle to a <code>crate::Store</code>.\nSet of objects managed by a context.\nA temporary handle to a <code>crate::Store</code>.\nStore objects for the <code>sys</code> runtime.\nThe trap from the <code>sys</code> runtime.\nA WebAssembly <code>table</code> instance.\nTable export.\nThis external type is the type of a WebAssembly table.\nAn external <code>Table</code>.\nImplementation styles for WebAssembly tables.\nA descriptor for a table in a WebAssembly module.\nA WebAssembly <code>tag</code> instance.\nAn event definition.\nThis external type is the type of a WebAssembly tag.\nAn external <code>Memory</code>.\nThe kind of a [<code>Tag</code>].\nThe signature of a tag that is either implemented in a …\nTo many waiter for address.\nTraps with an error\nA trap ocurred during linking.\nA list of all possible value types in WebAssembly.\nA WebAssembly function that can be called natively (using …\nPointer to memory is unaligned.\nAtomic operations are not supported by this memory.\nA feature used by the WebAssembly code is not supported by …\nThe compiler doesn’t support a Wasm feature\nReturned when trying to call a memory operation that is …\nThe compiler cannot compile for the given target. This can …\nA 128 bit number.\nA 128-bit number\nA <code>v128.const</code>.\nTrait convert a VMExtern to a Extern\nThe module did not pass validation.\nWebAssembly computations manipulate values of basic value …\nTrait for a Value type. A Value type is a type that is …\nThe value of the global can change over time\nThe number of pages we can have before we run out of byte …\nThe minimum number of pages allowed.\nWebAssembly page sizes are fixed to be 64KiB. Note: large …\nType for this <code>NativeWasmType</code>.\nA Wasm translation error occured.\nA WebAssembly translation error.\nA zero-cost type that represents a pointer to something in …\nAlias for `WasmPtr&lt;T, Memory64&gt;.\nReference to a value in Wasm memory.\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nReference to an array of values in Wasm memory.\nIterator over the elements of a <code>WasmSlice</code>.\nThe <code>WasmTypeList</code> trait represents a tuple (list) of Wasm …\nAn empty struct to help Rust typing to determine when a …\nAn empty struct to help Rust typing to determine when a …\nZero value used for <code>WasmPtr::is_null</code>.\nCreate an <code>EngineRef</code> pointing to the underlying context.\nReturns a <code>StoreMut</code> pointing to the underlying context.\nReturns a <code>StoreRef</code> pointing to the underlying context.\nReturn the underlying index value as a <code>u32</code>.\nThis submodule has the concrete definitions for all the …\nCalculate number of bytes from pages.\nGet the pointer to the function call trampoline for a …\nChecked addition. Computes <code>self + rhs</code>, returning <code>None</code> if …\nAllocates and return an empty array of type <code>Array</code> that …\nThis module defines data types, functions and traits used …\nThe exports for an instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>Self</code> based on an array of values.\nBuilds a tuple (list) of values from a C struct of type …\nCreate a new <code>TagType</code> with the given kind and the …\nConvert a value of kind <code>Self::Native</code> to <code>Self</code>.\nConvert to self from raw value representation.\nConstructs <code>Self</code> based on a slice of values.\nCreate a new instance from a <code>u32</code>.\nAttempt to return the underlying type of this external …\nReturns the WebAssembly function index for this frame.\nReturns the offset from the original wasm module’s …\nGet the pointer to the function body for a given runtime.\nReturns a descriptive name of the function for this frame, …\nImplementation of how to get the export corresponding to …\nGet an export with the given generics.\nAttempt to return the underlying type of this external …\nGenerate an <code>Imports</code> easily with the <code>imports!</code> macro.\nGenerate an <code>Imports</code> easily with the <code>imports!</code> macro.\nThe inner engine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds and returns an array of type <code>Array</code> from a tuple …\nConvert binary data into <code>bytes::Bytes</code>.\nBuilds and returns a C struct of type <code>CStruct</code> from a tuple …\nConvert self to raw value representation.\nTransforms <code>Self</code> into a <code>Result</code>.\nTrue if the memory is 64-bit\nCheck if two externs are compatible\nReturns a boolean indicating if the enum is set to mutable.\nReturns true if <code>Type</code> matches any of the numeric types. …\nReturns true if <code>Type</code> matches either of the reference types.\nCheck if the provided bytes are wasm-like\nThe kind of the tag.\nReturns the largest value that can be represented by the …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nAttempt to return the underlying type of this external …\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nReturns the module name that this import is expected to …\nReturns the identifer of the module that this frame is for.\nReturns the offset within the original wasm module this …\nA flag indicating whether the value may change at runtime.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known by.\nConvert a <code>Native</code> to an <code>Offset</code>.\nCreates a new FrameInfo, useful for testing.\nCreates a new Function Type with the given parameter and …\nCreate a new Global variable\nCreates a new <code>TagType</code> with the given kind, parameter and …\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a WebAssembly memory given …\nCreates a new import descriptor which comes from <code>module</code> …\nCreates a new export which is exported with the given <code>name</code> …\nReturns the ObjectMutable\nReturns the offset-guard size\nConvert an <code>Offset</code> to a <code>Native</code>.\nParameter types.\nParameter types.\nThe parameters of the function\nReturn types.\nWhether the memory may be shared between multiple threads.\nThe size of the array\nData types, functions and traits for the <code>sys</code> runtime.\nAttempt to return the underlying type of this external …\nConvert to <code>Extern</code>\nConvert self to <code>Self::Native</code>.\nReturns the expected type of this import.\nReturns the type of this export.\nThe type of the value stored in the global.\nThe type of data stored in elements of the table.\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nUseful data types, functions and traits used throughout …\nThis module defines traits to handle abstractions created …\nGet the Wasm types for the tuple (list) of currently …\nParses in-memory bytes as either the WebAssembly Text …\nWrites the contents of a C struct to an array of <code>RawValue</code>.\nThis method is passed a byte slice which contains the byte …\nHow many bytes were expected\nHow many bytes the artifact contained\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nAn enumeration over all the supported runtimes.\nThe <code>cranelift</code> runtime.\nThe sys <code>headless</code> runtime.\nThe <code>llvm</code> runtime.\nThe <code>singlepass</code> runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nData types, functions and traits for the <code>sys</code> runtime.\nThe “architecture” field, which in some cases also …\nA compiled wasm module, ready to be instantiated.\nThe compiler configuration options.\nThe nomenclature is inspired by the <code>cpuid</code> crate. The list …\nGlobal configuration options used to create an …\nPossible optimization levels for the Cranelift codegen …\nThe Builder contents of <code>Engine</code>\nControls which experimental features will be enabled. …\nA function middleware specialized for a single function.\nDefines the optimization level used to compile a <code>Module</code>.\nA error in the middleware.\nThe state of the binary reader. Exposed to middlewares to …\nA shared builder for function middlewares.\nNo optimizations performed, minimizes compilation time by …\nThe “operating system” field, which sometimes implies …\nGenerates the fastest possible code, but may take longer.\nSimilar to <code>speed</code>, but also performs transformations aimed …\nThis is the target that we will use for compiling the …\nA target “triple”. Historically such things had three …\nAn engine delegates the creation of memories, tables, and …\nx86_64 target that only supports Haswell-compatible Intel …\nThe “architecture” (and sometimes the subarchitecture).\nThe “binary format” (rarely used).\nBulk Memory proposal should be enabled\nEnable NaN canonicalization.\nGets the custom compiler config\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nCreate a new tag.\nAllocate memory for just the tags of the current module, …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nGets the default features for this compiler in the given …\nEnable generation of perfmaps to sample the JIT compiled …\nEnable Position Independent Code (PIC).\nEnable compiler IR verification.\nThe “environment” on top of the operating system …\nWasm exceptions proposal should be enabled\nExtended constant expressions proposal should be enabled\nProcesses the given operator.\nGenerates a <code>FunctionMiddleware</code> for a given function.\n64-bit Memory proposal should be enabled\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nThe error message\nModule Linking proposal should be enabled\nMulti Memory proposal should be enabled\nMulti Value proposal should be enabled\nThe name of the middleware where the error was created\nThe number of threads to use for compilation.\nThe “operating system” (sometimes also the …\nPushes a middleware onto the back of the middleware chain.\nReference Types proposal should be enabled\nRelaxed SIMD proposal should be enabled\nSIMD proposal should be enabled\nGets the supported features for this compiler in the given …\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nTail call proposal should be enabled\nThreads proposal should be enabled\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nThe “vendor” (whatever that means).\nThe <code>vm</code> module re-exports wasmer-vm types.\nGet the VMConfig for this tunables Currently, VMConfig …\nData types, functions and traits for <code>sys</code> runtime’s <code>Engine</code>…\nData types, functions and traits for <code>sys</code> runtime’s <code>Tag</code> …\nData types, functions and traits for <code>sys</code> runtime’s …\nData types, functions and traits for <code>sys</code> runtime’s …\nData types, functions and traits for <code>sys</code> runtime’s <code>Global</code>…\nData types, functions and traits for <code>sys</code> runtime’s …\nData types, functions and traits for <code>sys</code> runtime’s <code>Memory</code>…\nData types, functions and traits for <code>sys</code> runtime’s <code>Module</code>…\nData types, functions and traits for <code>sys</code> runtime’s <code>Store</code> …\nData types, functions and traits for <code>sys</code> runtime’s <code>Table</code> …\nData types, functions and traits for <code>sys</code> runtime’s <code>Tag</code> …\nA compiled wasm module, ready to be instantiated.\nTunable parameters for WebAssembly compilation. This is …\nA WebAssembly <code>Universal</code> Engine.\nThe Builder contents of <code>Engine</code>\nThe custom trait to access to all the <code>sys</code> function in the …\nAn engine delegates the creation of memories, tables, and …\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nCreate a new tag.\nAllocate memory for just the tags of the current module, …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nReturns the default engine for the Sys engine\nLoad a serialized WebAssembly module from a memory mapped …\nLoad a serialized WebAssembly module from a memory mapped …\nThe size in bytes of the offset guard for dynamic heaps.\nGet the default config for the sys Engine\nCreate a headless <code>Engine</code>\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nCreate a new <code>Engine</code> with the given config\nSets the hash algorithm\nAttach a Tunable to this engine\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGets the target\nGet a reference to attached Tunable of this engine\nGet the VMConfig for this tunables Currently, VMConfig …\nA WebAssembly <code>exception</code> in the <code>sys</code> runtime.\nA WebAssembly <code>extern ref</code> in the <code>sys</code> runtime.\nTry to downcast to the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExceptionRef</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExceptionRef</code> can be used with the …\nCreate a new <code>Exception</code>.\nMake a new extern reference\nCreate a <code>VMExceptionRef</code> from <code>Self</code>.\nA WebAssembly <code>extern ref</code> in the <code>sys</code> runtime.\nTry to downcast to the given value.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExternRef</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExternRef</code> can be used with the given …\nMake a new extern reference\nCreate a <code>VMExternRef</code> from <code>Self</code>.\nHost state for a dynamic function.\nA WebAssembly <code>function</code> instance, in the <code>sys</code> runtime.\nRepresents a low-level Wasm static host function. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Function</code> can be used with the given …\nCreates a new host <code>Function</code> from a native function.\nAn opaque reference to a function environment. The …\nA temporary handle to a <code>FunctionEnv</code>.\nBorrows a new mutable reference\nGet the data as mutable\nBorrows a new immmutable reference\nGet the data as reference\nReturns a reference to the host state in this function …\nBorrows a new mutable reference of both the attached Store …\nReturns a mutable- reference to the host state in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert it into a <code>FunctionEnvMut</code>\nMake a new FunctionEnv\nA WebAssembly <code>global</code> in the <code>sys</code> runtime.\nReturns the argument unchanged.\nCreate a <code>Global</code> with the initial value <code>Value</code> and the …\nCalls <code>U::from(self)</code>.\nA WebAssembly <code>instance</code> in the <code>sys</code> runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA WebAssembly <code>memory</code> in the <code>sys</code> runtime.\nUnderlying buffer for a memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Memory</code> can be used with the given …\nTo <code>VMExtern</code>.\nCloning memory will create another reference to the same …\nCopying the memory will actually copy all the bytes in the …\nA WebAssembly <code>memory</code> view.\nCopies a range of the memory and returns it as a vector of …\nCopies the memory to another new memory object\nCopies the memory and returns it as a vector of bytes\nReturns the size (in bytes) of the <code>Memory</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafely reads bytes from the memory at the given offset.\nSafely reads a single byte from memory at the given offset\nSafely reads bytes from the memory at the given offset.\nReturns the size (in <code>Pages</code>) of the <code>Memory</code>.\nSafely writes bytes to the memory at the given offset.\nSafely reads a single byte from memory at the given offset\nA WebAssembly <code>module</code> in the <code>sys</code> runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe custom trait to access to all the <code>sys</code> functions in the …\nA WebAssembly <code>store</code> in the <code>sys</code> runtime.\nHandle to an object managed by a context.\nSet of objects managed by a context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the trap handler\nThe signal handler\nThe signal handler\nA WebAssembly <code>table</code> in the <code>sys</code> runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Table</code> can be used with the given …\nA WebAssembly <code>tag</code> in the <code>v8</code> runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck whether or not the <code>Tag</code> is from the given store.\nCreate a new <code>Tag</code>.\nGet the <code>Tag</code>’s type.\nTunable parameters for WebAssembly compilation. This is …\nThe size in bytes of the offset guard for dynamic heaps.\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nalloc_exception\nAtomic operations are disabled.\nThe memory does not support atomic operations.\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nSignatures are stored in the table and checked in the …\nceil.f32\nceil.f64\nThe operation would cause the size of the memory to exceed …\ndata.drop\ndebug_str\ndebug_usize\ndelete_exception\nA dynamic function has the native signature: …\nThe actual memory can be resized and moved.\nThe personality function\nelem.drop\nOpaque pointer to arbitrary hostdata.\nfloor.f32\nfloor.f64\nPointer to function: contains enough information to call …\nref.func\nA function export value.\nA safe wrapper around <code>VMFunctionBody</code>.\nA user defined error value, used for error cases not …\nA global export value.\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nA <code>heap_addr</code> instruction was misaligned.\nThe data is owned here.\nmemory.atomic.botify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nResolved import pointers.\nIndirect call to a null table entry.\nThe data is stored inline in the <code>VMContext</code> of an instance.\nThis is an intermediate type that manages the raw …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nInternal handle to an object owned by the current context.\nInvalid memory was provided.\nA trap raised from a wasm libcall\nThe name of a runtime library routine.\nRepresents memory that is used by the WebAsssembly module\nCaller asked for a maximum memory greater than we can give …\nData used by the generated code is generally located …\nA memory export value.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nError type describing things that can go wrong when …\nReturned when a shared memory is required, but the given …\nImplementation styles for WebAssembly linear memory.\nCaller asked for more minimum memory than we can give them.\nA simple struct consisting of a page-aligned pointer to …\nThe type of mmap to create\nnearest.f32\nnearest.f64\nA location in memory for a Waiter\nA trap indicating that the runtime was unable to allocate …\nThe probestack based on the Rust probestack\nThe memory is private to the process and not shared with …\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nread_exception\nLow level error with mmap.\nrethrow\nPointers to section data.\nThe memory is shared with other processes. This is only …\nWebAssembly requires that the caller and callee signatures …\nThe current stack space was exhausted.\nA static function has the native signature: …\nAddress space is allocated up front.\nHandle to an object managed by a context.\nUnique ID to identify a context.\nTrait to represent an object managed by a context. This is …\nSet of objects managed by a context.\nA table export value.\nA <code>table_addr</code> instruction detected an out-of-bounds error.\ntable.copy\nA reference stored in a table. Can be either an externref …\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nImplementation styles for WebAssembly tables.\nA tag export value.\nTarget specific type for shared signature index.\nHashMap of Waiters for the Thread/Notify opcodes\nA weak handle to a <code>ThreadConditions</code> instance, which does …\nthrow\nTo many waiter for an address\nStores trace message with backtrace.\nA trap code describing the reason for a trap.\nFunction which may handle custom signals while processing …\ntrunc.f32\ntrunc.f64\nAn atomic memory access was attempted with an unaligned …\nAn exception was thrown but it was left uncaught.\nWait/Notify is not implemented for this memory\nCode that was supposed to have been unreachable was …\nReturned when trying to call a memory operation that is …\nA user-raised trap through <code>raise_user_trap</code>.\nVersion number of this crate.\nAn index type for builtin functions.\nThe VM caller-checked “anyfunc” record, for …\nConfiguration for the runtime VM Currently only the stack …\nThe VM “context”, which is pointed to by the <code>vmctx</code> arg …\nThe <code>VMDynamicFunctionContext</code> is the context that dynamic …\nUnderlying object referenced by a <code>VMExceptionRef</code>.\nRepresents an opaque reference to any data within …\nThe value of an export passed from one instance to another.\nThe type of extern functions in the <code>sys</code> VM.\nThe type of extern globals in the <code>sys</code> VM.\nThe type of extern memories in the <code>sys</code> VM.\nUnderlying object referenced by a <code>VMExternRef</code>.\nRepresents an opaque reference to any data within …\nThe type of extern tables in the <code>sys</code> VM.\nThe type of extern tags in the <code>sys</code> VM.\nA function reference. A single word that points to …\nA function export value.\nA placeholder byte-sized type which is just used to …\nThe type of function callbacks in the <code>sys</code> VM.\nUnion representing the first parameter passed when calling …\nUnderlying FunctionEnvironment used by a <code>VMFunction</code>.\nAn imported function.\nA function kind is a calling convention into and out of …\nA Global instance\nThe storage for a WebAssembly global defined within the …\nThe fields compiled code needs to access to utilize a …\nA handle holding an <code>Instance</code> of a WebAssembly module.\nRepresents linear memory that can be either owned or shared\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nThis class computes offsets to fields within VMContext and …\nA linear memory instance.\nA shared linear memory instance.\nAn index into the shared signature registry, usable for …\nA table instance.\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nA tag export value.\nThe fields compiled code needs to access to utilize a …\nThe type for tramplines in the VM.\nError that can occur during wait/notify calls.\nA trap raised from the Wasm generated code\nThe address of the inner dynamic function.\nThe address of the Waiter location\nPointer to the <code>VMCallerCheckedAnyfunc</code> which contains data …\nPointer to the table data.\nThe start address which is always valid, even if the …\nA pointer to the imported function body.\nAddress of the function call trampoline to invoke this …\nCatches any wasm traps that happen within the execution of …\nThe contents of the environment.\nCopies this memory to a new memory\nThe context that the inner dynamic function will receive.\nThe current number of elements in the table.\nThe current logical size of this linear memory in bytes.\nA pointer to the imported table description.\nA pointer to the imported memory description.\nA pointer to the imported global variable description.\nNotify waiters from the wait list. Return the number of …\nAdd current thread to the waiter hash, and wait until …\nA pointer to the <code>VMContext</code> that owns the function or host …\nFunction body.\nResolved addresses for imported functions.\nResolved addresses for imported globals.\nGrow memory by the specified amount of wasm pages.\nGrows the memory to at least a minimum size. If the memory …\nHandle to the <code>VMFunction</code> in the context.\nHandle to the <code>VMTable</code> in the context.\nA handle to the <code>Memory</code> that owns the memory description.\nA handle to the <code>Tag</code> that owns the tag description.\nA handle to the <code>Global</code> that owns the global description.\nAssociated data owned by a host function.\nHost functions can have custom environments.\nThis function is required to be called before any …\nThe function kind (specifies the calling convention for the\nThe kind of tag.\nRuntime library calls.\nList the objects in the store.\nList the objects in the store, mutably.\nResolved addresses for imported memories.\nWhen executing on the Wasm stack, temporarily switch back …\nRaises a trap from inside library code immediately.\nRaises a user-defined trap immediately.\nResets the memory back to zero length\nCarries a Rust panic across wasm code and resumes the …\nDefault stack size is 1MB.\nThe function type, used for compatibility checking.\nThe tag type, used for compatibility checking.\nReturns the size of hte memory in pages\nReturns the memory style for this memory.\nResolved addresses for imported tables.\nResolved addresses for imported memories.\nAccess the internal atomics handler.\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nFunction signature id.\nRaw value of the global.\nWasm functions take a pointer to <code>VMContext</code>.\nFunction <code>VMContext</code> or host env.\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nOptionnal stack size (in byte) of the VM. Value lower than …\nCall the wasm function pointed to by <code>callee</code>.\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the OOM occurred\nThe program counter in generated code where this trap …\nOptional trapcode associated to the signal that caused the …\nCode of the trap.\nalloc_exception\nceil.f32\nceil.f64\ndata.drop\ndebug_str\ndebug_usize\ndelete_exception\nThe personality function\nelem.drop\nfloor.f32\nfloor.f64\nref.func\nmemory.atomic.botify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nThe name of a runtime library routine.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nnearest.f32\nnearest.f64\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nread_exception\nrethrow\ntable.copy\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nthrow\ntrunc.f32\ntrunc.f64\nThe function pointer to a libcall\nThe implementation of Wasmer’s personality function.\nImplementation for allocating an exception.\nImplementation of <code>data.drop</code>.\n(debug) Print a string.\n(debug) Print an usize.\nImplementation for deleting the data of an exception.\nImplementation of <code>elem.drop</code>.\nImplementation of f32.ceil\nImplementation of f32.floor\nImplementation of f32.nearest\nImplementation of f32.trunc\nImplementation of f64.ceil\nImplementation of f64.floor\nImplementation of f64.nearest\nImplementation of f64.trunc\nImplementation of <code>func.ref</code>.\nImplementation of memory.notfy for imported 32-bit …\nImplementation of memory.wait32 for imported 32-bit …\nImplementation of memory.wait64 for imported 32-bit …\nImplementation of <code>memory.copy</code> for imported memories.\nImplementation of <code>memory.fill</code> for imported memories.\nImplementation of memory.grow for imported 32-bit memories.\nImplementation of memory.size for imported 32-bit memories.\nImplementation of <code>table.get</code> for imported tables.\nImplementation of <code>table.grow</code> for imported tables.\nImplementation of <code>table.set</code> for imported tables.\nImplementation of <code>table.size</code> for imported tables.\nImplementation of memory.notfy for locally-defined 32-bit …\nImplementation of memory.wait32 for locally-defined 32-bit …\nImplementation of memory.wait64 for locally-defined 32-bit …\nImplementation of <code>memory.copy</code> for locally defined memories.\nImplementation of <code>memory.fill</code> for locally defined memories.\nImplementation of memory.grow for locally-defined 32-bit …\nImplementation of <code>memory.init</code>.\nImplementation of memory.size for locally-defined 32-bit …\nProbestack check\nImplementation for raising a trap\nImplementation for reading a <code>WasmerException</code> from a …\nImplementation for throwing an exception.\nImplementation of <code>table.copy</code>.\nImplementation of <code>table.fill</code>.\nImplementation of <code>table.get</code>.\nImplementation of <code>table.grow</code> for locally-defined tables.\nImplementation of <code>table.init</code>.\nImplementation of <code>table.set</code>.\nImplementation of <code>table.size</code>.\nImplementation for throwing an exception.\nDefines the <code>self::Engine</code> type and useful traits and data …\nDefines the <code>Function</code> and <code>HostFunction</code> types and useful …\nThe import module contains the implementation data …\nDefines the <code>Module</code> data type and various useful traits and …\nDefines the <code>Store</code> data type and various useful traits and …\nThe <code>Engine</code> is the entrypoint type for the runtime. It …\nAn engine identifier.\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nReturns the default WebAssembly features supported by this …\nDeserializes a WebAssembly module which was previously …\nLoad a serialized WebAssembly module from a file and …\nLoad a serialized WebAssembly module from a file and …\nDeserializes a WebAssembly module which was previously …\nReturns the deterministic id of this engine.\nCreate temporary handles to engines.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique id of this engine.\nThe actual (private) definition of the engines.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a <code>crate::backend::sys::engine::Engine</code>.\nReturn true if <code>self</code> is an engine from the <code>sys</code> runtime.\nReturns all WebAssembly features supported by the …\nAdd suggested optimizations to this engine.\nHelper trait for a value that is convertible to a <code>EngineRef</code>…\nA temporary handle to an <code>Engine</code>.\nCreate an <code>EngineRef</code> pointing to the underlying context.\nGet inner <code>Engine</code>\nReturns the argument unchanged.\nThe inner engine\nCalls <code>U::from(self)</code>.\nCreate a <code>StoreRef</code>.\nCreate a <code>StoreRef</code>.\nCreate an EngineRef from an Engine\nThe implementation from the <code>sys</code> backend.\nDeserializes a WebAssembly module which was previously …\nLoad a serialized WebAssembly module from a file and …\nLoad a serialized WebAssembly module from a file and …\nDeserializes a WebAssembly module which was previously …\nReturns the deterministic id of this engine.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA WebAssembly <code>exception</code> instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Exception</code> comes from the given store.\nCreate a new exception with the given tag type and payload.\nAn opaque reference to some data. This reference can be …\nTry to downcast to the given value.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExceptionRef</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExceptionRef</code> can be used with the …\nMake a new extern reference\nCreate a <code>VMExceptionRef</code> from <code>Self</code>.\nThe implementation from the <code>sys</code> backend.\nTry to downcast to the given value.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExceptionRef</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExceptionRef</code> can be used with the …\nMake a new extern reference\nCreate a <code>VMExceptionRef</code> from <code>Self</code>.\nThe implementation from the <code>sys</code> backend.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Exception</code> can be used with the given …\nCreate a new exception with the given tag type and payload.\nThe <code>ExportError</code> can happen when trying to get a specific …\nThis trait is used to mark types as gettable from an …\nA trait for accessing exports (like <code>Exportable</code>) but it …\nExports is a special kind of map that allows easily …\nAn iterator over exports.\nAn error than occurs when the exported type and the …\nThis error arises when an export is missing\nReturns true if the <code>Exports</code> contains the given export name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet only the functions.\nGet an export given a <code>name</code>.\nGet an export as an <code>Extern</code>.\nGet an export as a <code>Func</code>.\nGet an export as a <code>Global</code>.\nGet an export as a <code>Memory</code>.\nImplementation of how to get the export corresponding to …\nGet an export with the given generics.\nGet an export as a <code>Table</code>.\nGet an export as a <code>TypedFunction</code>.\nHack to get this working with nativefunc too\nGet only the globals.\nInsert a new export into this <code>Exports</code> map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturn whether or not there are no exports\nGet an iterator over the exports.\nReturn the number of exports in the <code>Exports</code> map.\nGet only the memories.\nCreates a new <code>Exports</code>.\nGet only the tables.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nCreates a new <code>Exports</code> with capacity <code>n</code>.\nAn <code>Extern</code> is the runtime representation of an entity that …\nAn external <code>Function</code>.\nAn external <code>Global</code>.\nAn external <code>Memory</code>.\nAn external <code>Table</code>.\nAn external <code>Memory</code>.\nTrait convert a VMExtern to a Extern\nReturns the argument unchanged.\nCreate an <code>Extern</code> from an <code>wasmer_engine::Export</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Extern</code> can be used with the given …\nConvert to <code>Extern</code>\nTo <code>VMExtern</code>.\nReturn the underlying type of the inner <code>Extern</code>.\nAn opaque reference to some data. This reference can be …\nTry to downcast to the given value.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExternRef</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExternRef</code> can be used with the given …\nMake a new extern reference\nCreate a <code>VMExternRef</code> from <code>Self</code>.\nThe implementation from the <code>sys</code> backend.\nTry to downcast to the given value.\nReturns the argument unchanged.\nCreate an instance of <code>Self</code> from a <code>VMExternRef</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>ExternRef</code> can be used with the given …\nMake a new extern reference\nCreate a <code>VMExternRef</code> from <code>Self</code>.\nA WebAssembly <code>function</code> instance.\nConvert a reference to <code>self</code> into a reference to …\nConvert a mutable reference to <code>self</code> into a mutable …\nCall the function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into <code>crate::backend::sys::function::Function</code>.\nChecks whether this <code>Function</code> can be used with the given …\nCreates a new host <code>Function</code> (dynamic) with the provided …\nCreates a new host <code>Function</code> from a native function.\nCreates a new host <code>Function</code> with an environment from a …\nCreates a new host <code>Function</code> (dynamic) with the provided …\nReturns the number of parameters that this function takes.\nReturns the number of results this function produces.\nReturns the <code>FunctionType</code> of the <code>Function</code>.\nTransform this WebAssembly function into a typed function. …\nAn opaque reference to a function environment. The …\nA temporary handle to a <code>FunctionEnv</code>.\nGet the data as mutable\nBorrows a new mutable reference\nGet the data as reference\nBorrows a new immmutable reference\nConvert a reference to self into a reference to …\nConvert a mutable reference to self into a mutable …\nReturns a reference to the host state in this function …\nBorrows a new mutable reference of both the attached Store …\nReturns a mutable- reference to the host state in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert it into a <code>FunctionEnvMut</code>\nConsume self into …\nMake a new FunctionEnv\nAn opaque reference to a function environment. The …\nA temporary handle to a <code>FunctionEnv</code>.\nThe function environment for the <code>sys</code> runtime.\nThe function environment for the <code>sys</code> runtime.\nGet the data as mutable\nBorrows a new mutable reference\nGet the data as reference\nBorrows a new immmutable reference\nReturns a reference to the host state in this function …\nBorrows a new mutable reference of both the attached Store …\nReturns a mutable- reference to the host state in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert it into a <code>FunctionEnvMut</code>\nMake a new FunctionEnv\nThe <code>HostFunction</code> trait represents the set of functions that\nAn empty struct to help Rust typing to determine when a …\nAn empty struct to help Rust typing to determine when a …\nGet the pointer to the function call trampoline for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the pointer to the function body for a given runtime.\nGet the pointer to the function body for a given runtime.\nGet the pointer to the function body for a given runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSealing the HostFunctionKind because it shouldn’t be …\nThe implementation from the <code>sys</code> backend.\nCall the <code>Function</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Function</code> can be used with the given …\nCreates a new host <code>Function</code> (dynamic) with the provided …\nCreates a new host <code>Function</code> from a native function.\nCreates a new host <code>Function</code> with an environment from a …\nCreates a new host <code>Function</code> (dynamic) with the provided …\nReturns the number of parameters that this function takes.\nReturns the number of results this function produces.\nReturns the <code>FunctionType</code> of the <code>Function</code>.\nTransform this WebAssembly function into a typed function. …\nA WebAssembly <code>global</code> instance.\nReturns the argument unchanged.\nCreate a global with the initial <code>Value</code> and the provided …\nRetrieves the current value <code>Value</code> that the global has.\nCalls <code>U::from(self)</code>.\nChecks whether this global can be used with the given …\nCreate a new global with the initial <code>Value</code>.\nCreate a mutable global with the initial <code>Value</code>.\nSets a custom <code>Value</code> to the runtime global.\nCreate a <code>VMExtern</code> from self.\nReturns the <code>GlobalType</code> of the global.\nThe implementation from the <code>sys</code> backend.\nReturns the argument unchanged.\nCreate a global with the initial <code>Value</code> and the provided …\nRetrieves the current value <code>Value</code> that the global has.\nCalls <code>U::from(self)</code>.\nChecks whether this global can be used with the given …\nCreate a new global with the initial <code>Value</code>.\nCreate a mutable global with the initial <code>Value</code>.\nSets a custom <code>Value</code> to the runtime global.\nCreate a <code>VMExtern</code> from self.\nReturns the <code>GlobalType</code> of the global.\nAll of the import data used when instantiating.\nAn iterator over module imports.\nReturns true if the Imports contains namespace with the …\nAdd a single import with a namespace <code>ns</code> and name <code>name</code>.\nReturns if an export exist for a given module and name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an export given a module and a name\nReturns the contents of a namespace as an <code>Exports</code>.\nResolve and return a vector of imports in the order they …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nIterates through all the imports in this structure\nCreate a new <code>Imports</code>.\nRegister a list of externs into a namespace.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA WebAssembly Instance is a stateful, executable instance …\nThe implementation from the <code>sys</code> backend.\nThe exports for an instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a <code>crate::backend::sys::instance::Instance</code>…\nGets the <code>Module</code> associated with this instance.\nCreates a new <code>Instance</code> from a WebAssembly <code>Module</code> and a set …\nCreates a new <code>Instance</code> from a WebAssembly <code>Module</code> and a …\nA WebAssembly <code>memory</code> instance.\nGet a <code>SharedMemory</code>.\nConvert a reference to <code>self</code> into a reference to …\nConvert a mutable reference to <code>self</code> into a mutable …\nAttempts to duplicate this memory (if its clonable) in a …\nReturns the argument unchanged.\nGrow memory by the specified amount of WebAssembly <code>Pages</code> …\nGrows the memory to at least a minimum size.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a <code>crate::backend::sys::memory::Memory</code>.\nChecks whether this <code>Memory</code> can be used with the given …\nCreates a new host <code>Memory</code> from the provided <code>MemoryType</code>.\nCreate a memory object from an existing memory and …\nResets the memory back to zero length\nAttempts to clone this memory (if its clonable) in a new …\nRetrieve the size of the memory in pages.\nCreate a <code>VMExtern</code> from self.\nAttempt to create a new reference to the underlying …\nReturns the <code>MemoryType</code> of the <code>Memory</code>.\nCreates a view into the memory that then allows for read …\nUnderlying buffer for a memory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is used to determine if the buffer is owned by the …\nThe implementation from the <code>sys</code> backend.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe implementation from the <code>sys</code> backend.\nGet a <code>SharedMemory</code>.\nAttempts to duplicate this memory (if its clonable) in a …\nReturns the argument unchanged.\nGrow memory by the specified amount of WebAssembly <code>Pages</code> …\nGrows the memory to at least a minimum size.\nCalls <code>U::from(self)</code>.\nChecks whether this <code>Memory</code> can be used with the given …\nCreates a new host <code>BackendMemory</code> from the provided …\nCreate a memory object from an existing memory and …\nResets the memory back to zero length\nAttempts to clone this memory (if its clonable) in a new …\nRetrieve the size of the memory in pages.\nCreate a <code>VMExtern</code> from self.\nAttempt to create a new reference to the underlying …\nReturns the <code>MemoryType</code> of the <code>BackendMemory</code>.\nLocation in a WebAssembly memory.\nSee <code>crate::SharedMemory</code>.\nSee <code>crate::SharedMemory::disable_atomics</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new memory location for a 32bit memory.\nSee <code>crate::SharedMemory::notify</code>.\nSee <code>crate::SharedMemory::wait</code>.\nSee <code>crate::SharedMemory::wake_all_atomic_waiters</code>.\nA handle that exposes operations only relevant for shared …\nDisable atomics for this memory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the underlying memory.\nCreate a new handle from ops.\nNotify up to <code>count</code> waiters waiting for the memory location.\nWait for the memory location to be notified.\nWake up all atomic waiters.\nA WebAssembly <code>memory</code> view.\nCopies a range of the memory and returns it as a vector of …\nCopies the memory to another new memory object\nCopies the memory and returns it as a vector of bytes\nReturns the size (in bytes) of the <code>Memory</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafely reads bytes from the memory at the given offset.\nSafely reads a single byte from memory at the given offset\nSafely reads bytes from the memory at the given offset.\nReturns the size (in <code>Pages</code>) of the <code>Memory</code>.\nSafely writes bytes to the memory at the given offset.\nSafely writes a single byte from memory at the given offset\nThe implementation from the <code>sys</code> backend.\nCopies a range of the memory and returns it as a vector of …\nCopies the memory to another new memory object\nCopies the memory and returns it as a vector of bytes\nReturns the size (in bytes) of the <code>Memory</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafely reads bytes from the memory at the given offset.\nSafely reads a single byte from memory at the given offset\nSafely reads bytes from the memory at the given offset.\nReturns the size (in <code>Pages</code>) of the <code>Memory</code>.\nSafely writes bytes to the memory at the given offset.\nSafely writes a single byte from memory at the given offset\nA compilation error\nAn IO error\nIO errors that can happen while compiling a <code>Module</code>.\nA WebAssembly Module contains stateless WebAssembly code …\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nGet the custom sections of the module given a <code>name</code>.\nDeserializes a serialized Module binary into a <code>Module</code>.\nDeserializes a serialized Module located in a <code>Path</code> into a …\nDeserializes a serialized Module located in a <code>Path</code> into a …\nDeserializes a serialized module binary into a <code>Module</code>.\nReturns an iterator over the exported types in the Module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new WebAssembly module from a Wasm binary.\nCreates a new WebAssembly module from a Wasm binary, …\nCreates a new WebAssembly module from a file path.\nReturns an iterator over the imported types in the Module.\nDefines the <code>BackendModule</code> data type and various useful …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a reference …\nReturns the name of the current module.\nCreates a new WebAssembly Module given the configuration …\nSerializes a module into a binary representation that the …\nSerializes a module into a file that the <code>Engine</code> can later …\nSets the name of the current module. This is normally …\nValidates a new WebAssembly Module given the configuration …\nThe implementation from the <code>sys</code> backend.\nGet the custom sections of the module given a <code>name</code>.\nDeserializes a serialized Module binary into a <code>Module</code>.\nDeserializes a serialized Module located in a <code>Path</code> into a …\nDeserializes a serialized Module located in a <code>Path</code> into a …\nDeserializes a serialized module binary into a <code>Module</code>.\nReturns an iterator over the exported types in the Module.\nReturns the argument unchanged.\nCreates a new WebAssembly module from a Wasm binary.\nCreates a new WebAssembly module from a Wasm binary, …\nCreates a new WebAssembly module from a file path.\nReturns an iterator over the imported types in the Module.\nCalls <code>U::from(self)</code>.\nReturns the name of the current module.\nSerializes a module into a binary representation that the …\nSerializes a module into a file that the <code>Engine</code> can later …\nSets the name of the current module. This is normally …\nValidates a new WebAssembly Module given the configuration …\nThe store represents all global state that can be …\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nReturns the <code>Engine</code>.\nReturns mutable reference to <code>Engine</code>.\nReturns the argument unchanged.\nReturns the ID of this store\nDefines the <code>StoreInner</code> data type.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into <code>crate::backend::sys::store::Store</code>.\nReturn true if <code>self</code> is a store from the <code>sys</code> runtime.\nCreates a new <code>Store</code> with a specific <code>Engine</code>.\nChecks whether two stores are identical. A store is …\nSet the <code>TrapHandlerFn</code> for this store.\nThe signal handler\nCreate temporary handles to engines.\nCall handler for a store.\nWe require the context to have a fixed memory address for …\nThe implementation from the <code>sys</code> backend.\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into <code>crate::backend::sys::store::Store</code>.\nReturn true if <code>self</code> is a store from the <code>sys</code> runtime.\nSet of objects managed by a context.\nStore objects for the <code>sys</code> runtime.\nConvert a reference to store objects into a reference …\nConvert a mutable reference to store objects into a …\nReturn a vector of all globals and converted to u128\nReturns the argument unchanged.\nReturns the ID of this store\nCalls <code>U::from(self)</code>.\nConsume store objects into …\nChecks whether two stores are identical. A store is …\nSet a global, at index idx. Will panic if idx is out of …\nHelper trait for a value that is convertible to a <code>StoreMut</code>.\nHelper trait for a value that is convertible to a <code>StoreRef</code>.\nA temporary handle to a <code>crate::Store</code>.\nA temporary handle to a <code>crate::Store</code>.\nReturns a <code>StoreMut</code> pointing to the underlying context.\nReturns a <code>StoreRef</code> pointing to the underlying context.\nReturns the <code>Engine</code>.\nReturns the <code>Engine</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the ObjectMutable\nSets the unwind callback which will be invoked when the …\nChecks whether two stores are identical. A store is …\nChecks whether two stores are identical. A store is …\nThe signal handler\nA WebAssembly <code>table</code> instance.\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nCopies the <code>len</code> elements of <code>src_table</code> starting at <code>src_index</code> …\nReturns the argument unchanged.\nRetrieves an element of the table at the provided <code>index</code>.\nGrows the size of the <code>Table</code> by <code>delta</code>, initializating the …\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into <code>crate::backend::sys::table::Table</code>.\nChecks whether this <code>Table</code> can be used with the given …\nCreates a new table with the provided <code>TableType</code> definition.\nSets an element <code>val</code> in the Table at the provided <code>index</code>.\nRetrieves the size of the <code>Table</code> (in elements)\nReturns the <code>TableType</code> of the table.\nThe implementation from the <code>sys</code> backend.\nConvert a reference to <code>self</code> into a reference …\nConvert a mutable reference to <code>self</code> into a mutable …\nCopies the <code>len</code> elements of <code>src_table</code> starting at <code>src_index</code> …\nReturns the argument unchanged.\nRetrieves an element of the table at the provided <code>index</code>.\nGrows the size of the <code>Table</code> by <code>delta</code>, initializating the …\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into <code>crate::backend::sys::table::Table</code>.\nChecks whether this <code>Table</code> can be used with the given …\nCreates a new table with the provided <code>TableType</code> definition.\nSets an element <code>val</code> in the Table at the provided <code>index</code>.\nRetrieves the size of the <code>Table</code> (in elements)\nReturns the <code>TableType</code> of the table.\nA WebAssembly <code>tag</code> instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this tag can be used with the given context.\nCreate a new tag with event of type P -&gt; [], that is a …\nCreate a <code>VMExtern</code> from self.\nReturns the <code>TagType</code> of the tag.\nThe implementation from the <code>sys</code> backend.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this tag can be used with the given context.\nCreate a new tag with event of type P -&gt; [], that is a …\nCreate a <code>VMExtern</code> from self.\nReturns the <code>TagType</code> of the tag.\nAn enumeration of all the trap kinds supported by the …\nThe trap from the <code>sys</code> runtime.\nAttempts to downcast the <code>Trap</code> to a concrete type.\nAttempts to downcast the <code>Trap</code> to a concrete type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Trap</code> is the same as T\nConstruct a new Error with the given a user error.\nA nullable first-class reference to a WebAssembly …\nA nullable <code>externref</code> value which can hold opaque data to …\nA 32-bit float.\nA 64-bit float.\nA nullable first-class reference to a WebAssembly function.\nA 32-bit integer.\nA 64-bit integer.\nA 128-bit number\nWebAssembly computations manipulate values of basic value …\nConverts the <code>Value</code> into a <code>RawValue</code>.\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nReturns the argument unchanged.\nConverts a <code>RawValue</code> to a <code>Value</code>.\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nAttempt to access the underlying value of this <code>Value</code>, …\nCalls <code>U::from(self)</code>.\nChecks whether a value can be used with the given context.\nReturns a null <code>externref</code> value.\nReturns the corresponding <code>Type</code> for this <code>Value</code>.\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nReturns the underlying value of this <code>Value</code>, panicking if it…\nAttempt to access the underlying value of this <code>Value</code>, …\nAtomic operations are disabled.\nError that can occur during atomic operations. …\nThe module was compiled with a CPU feature that is not …\nImport from a different Store. This error occurs when an …\nImport from a different <code>Store</code>. This error occurs when an …\nAn error occurred when checking the import types.\nAn error while instantiating a module.\nA linking ocurred during instantiation.\nThe WebAssembly.LinkError object indicates an error during …\nInsufficient resources available for linking.\nA struct representing an aborted instruction execution, …\nA runtime error occured while invoking the start function\nTo many waiter for address.\nA trap ocurred during linking.\nAtomic operations are not supported by this memory.\nAttempts to downcast the <code>RuntimeError</code> to a concrete type.\nAttempts to downcast the <code>RuntimeError</code> to a concrete type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>RuntimeError</code> is the same as T\nReturns a reference the <code>message</code> stored in <code>Trap</code>.\nCreates a new generic <code>RuntimeError</code> with the given <code>message</code>.\nCreates <code>RuntimeError</code> from an error and a WasmTrace\nThe source error\nReturns trap code, if it’s a Trap\nReturns a list of function frames in WebAssembly code that …\nThe trap code (if any)\nCreates a custom user Error.\nThe reconstructed Wasm trace (from the native trace and …\nThe “architecture” field, which in some cases also …\nA compiled wasm module, ready to be instantiated.\nTunable parameters for WebAssembly compilation. This is …\nThe compiler configuration options.\nThe nomenclature is inspired by the <code>cpuid</code> crate. The list …\nGlobal configuration options used to create an …\nPossible optimization levels for the Cranelift codegen …\nThe Builder contents of <code>Engine</code>\nControls which experimental features will be enabled. …\nA function middleware specialized for a single function.\nDefines the optimization level used to compile a <code>Module</code>.\nA error in the middleware.\nThe state of the binary reader. Exposed to middlewares to …\nA shared builder for function middlewares.\nThe custom trait to access to all the <code>sys</code> function in the …\nNo optimizations performed, minimizes compilation time by …\nThe “operating system” field, which sometimes implies …\nGenerates the fastest possible code, but may take longer.\nSimilar to <code>speed</code>, but also performs transformations aimed …\nThis is the target that we will use for compiling the …\nA target “triple”. Historically such things had three …\nAn engine delegates the creation of memories, tables, and …\nx86_64 target that only supports Haswell-compatible Intel …\nCreate a new feature set with all features enabled.\nThis indicates if the Artifact is allocated and can be run …\nThe “architecture” (and sometimes the subarchitecture).\nThe “binary format” (rarely used).\nConfigures whether the WebAssembly bulk memory operations …\nBulk Memory proposal should be enabled\nCallbacks that will triggered in the different compilation …\nEnable NaN canonicalization.\nEnable NaN canonicalization.\nGets the custom compiler config\nTransform it into the compiler\nTransform it into the compiler.\nTransform it into the compiler\nChecks if this features set contains all the features …\nThe triple associated for the target.\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nCreate a new tag.\nAllocate memory for just the tags of the current module, …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nThe C data model for a given target. If the model is not …\nReturns the default value for <code>OptimizationLevel</code>, namely …\nReturn the default calling convention for the given target …\nGets the default features for this compiler in the given …\nDeserialize a serialized artifact.\nLoad a serialized WebAssembly module from a memory mapped …\nLoad a serialized WebAssembly module from a memory mapped …\nDeserialize a ArtifactBuild from an object file\nDeserialize a serialized artifact.\nDetects required WebAssembly features from a module binary.\nThe size in bytes of the offset guard for dynamic heaps.\n(warning: experimental) Pass the value of the first (#0) …\nEnable generation of perfmaps to sample the JIT compiled …\nEnable Position Independent Code (PIC).\nEmit code suitable for dlopen.\nEnable compiler IR verification.\nWhether to verify compiler IR.\nReturn the endianness of this architecture.\nReturn the endianness of this target’s architecture.\nData types, functions and traits for <code>sys</code> runtime’s <code>Engine</code>…\nBuild the <code>Engine</code> for this configuration\nThe “environment” on top of the operating system …\nData types, functions and traits for <code>sys</code> runtime’s <code>Tag</code> …\nConfigures whether the WebAssembly exception-handling …\nWasm exceptions proposal should be enabled\nExtend this feature set with another set.\nExtended constant expressions proposal should be enabled\nData types, functions and traits for <code>sys</code> runtime’s …\nThe Wasm features\nProcesses the given operator.\nFinishes the instantiation of a just created <code>VMInstance</code>.\nReturns the dynamic function trampolines allocated in …\nReturns the function call trampolines allocated in memory …\nReturns the functions allocated in memory or this <code>Artifact</code> …\nGenerates the flags for the compiler\nRetrieves the features for the current Host\nGet the <code>BaseTunables</code> for a specific Target\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>ArtifactBuild</code> from component parts.\nData types, functions and traits for <code>sys</code> runtime’s …\nGenerates a <code>FunctionMiddleware</code> for a given function.\nGenerate a compilation\nCompile a module into an object file, which can be …\nData types, functions and traits for <code>sys</code> runtime’s <code>Global</code>…\nCreate a headless <code>Engine</code>\nCreate a new headless Backend\nReturn the architecture for the current host.\nReturn the operating system for the current host.\nReturn the triple for the current host.\nA unique identifier for this object.\nData types, functions and traits for <code>sys</code> runtime’s …\nCrate an <code>Instance</code> from this <code>Artifact</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a string\nConvert into a string\nChecks if this Architecture is some variant of Clever-ISA\nCheck if the provided bytes look like a serialized …\nCheck if target is a native (eq to host) or not\nGenerates the ISA for the provided target\nData types, functions and traits for <code>sys</code> runtime’s <code>Memory</code>…\nConfigures whether the WebAssembly 64-bit memory proposal …\n64-bit Memory proposal should be enabled\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nGet a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nThe error message\nGenerate the metadata object for the module\nData types, functions and traits for <code>sys</code> runtime’s <code>Module</code>…\nConfigures whether the WebAssembly module linking proposal …\nModule Linking proposal should be enabled\nConfigures whether the WebAssembly multi-memory proposal …\nMulti Memory proposal should be enabled\nConfigures whether the WebAssembly multi-value proposal …\nMulti Value proposal should be enabled\nThe name of the middleware where the error was created\nCreate a new <code>Engine</code> with the given config\nCompile a data buffer into a <code>ArtifactBuild</code>, which may then …\nCreate a new builder with pre-made components\nCreates a new configuration object with the default …\nCreates a new configuration object with the default …\nCreate a new <code>MiddlewareError</code>\nCreate a new feature\nCreates a new configuration object with the default …\nCreates a new target given a triple\nCreate a new feature set with all features disabled.\nSet the number of threads to use for compilation.\nThe number of threads to use for compilation.\nThe “operating system” (sometimes also the …\nThe optimization levels when optimizing the IR.\nThe optimization levels when optimizing the IR.\nReturn the pointer bit width of this target’s …\nReturn the pointer width of this target’s architecture.\nDo preinstantiation logic that is executed before …\nPushes a middleware onto the back of the middleware chain.\nPushes a middleware onto the back of the middleware chain.\nPushes a middleware onto the back of the middleware chain.\nPushes a middleware onto the back of the middleware chain.\nPush an operator.\nConfigures whether the WebAssembly reference types …\nReference Types proposal should be enabled\nRelaxed SIMD proposal should be enabled\nRetrieves an empty set of <code>CpuFeature</code>s.\nSet the features\nSets the hash algorithm\nSet the hashing algorithm\nSet the target\nAttach a Tunable to this engine\nReturns the associated VM signatures for this <code>Artifact</code>.\nConfigures whether the WebAssembly SIMD proposal will be …\nSIMD proposal should be enabled\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nData types, functions and traits for <code>sys</code> runtime’s <code>Store</code> …\nGets the supported features for this compiler in the given …\nGets the supported features for this compiler in the given …\nData types, functions and traits for <code>sys</code> runtime’s <code>Table</code> …\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGet a <code>TableStyle</code> for the provided <code>TableType</code>.\nData types, functions and traits for <code>sys</code> runtime’s <code>Tag</code> …\nConfigures whether the WebAssembly tail-call proposal will …\nTail call proposal should be enabled\nGets the target\nThe target\nGenerates the target machine for the current target\nConfigures whether the WebAssembly threads proposal will …\nThreads proposal should be enabled\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nThe triple associated for the target.\nGet a reference to attached Tunable of this engine\nReturn a <code>Triple</code> with all unknown fields.\nThe “vendor” (whatever that means).\nThe <code>vm</code> module re-exports wasmer-vm types.\nGet the VMConfig for this tunables Currently, VMConfig …\nA compiled wasm module, ready to be instantiated.\nTunable parameters for WebAssembly compilation. This is …\nA WebAssembly <code>Universal</code> Engine.\nThe Builder contents of <code>Engine</code>\nThe custom trait to access to all the <code>sys</code> function in the …\nAn engine delegates the creation of memories, tables, and …\nClone the engine\nCompile a WebAssembly binary\nCreate a global with an unset value.\nAllocate memory for just the globals of the current module,\nCreate a memory owned by the host given a <code>MemoryType</code> and a …\nCreate a table owned by the host given a <code>TableType</code> and a …\nAllocate memory for just the memories of the current …\nAllocate memory for just the tables of the current module.\nCreate a new tag.\nAllocate memory for just the tags of the current module, …\nCreate a memory owned by the VM given a <code>MemoryType</code> and a …\nCreate a table owned by the VM given a <code>TableType</code> and a …\nReturns the default engine for the Sys engine\nDeserializes a WebAssembly module which was previously …\nDeserializes a WebAssembly module from a path.\nDeserialize from a file path.\nLoad a serialized WebAssembly module from a memory mapped …\nLoad a serialized WebAssembly module from a memory mapped …\nDeserializes a WebAssembly module which was previously …\nReturns the deterministic id of this engine\nThe size in bytes of the offset guard for dynamic heaps.\nReturns the argument unchanged.\nGet the default config for the sys Engine\nReturns the hash algorithm\nCreate a headless <code>Engine</code>\nCreate a headless <code>Engine</code>\nA unique identifier for this object.\nGet reference to <code>EngineInner</code>.\nGet mutable reference to <code>EngineInner</code>.\nCalls <code>U::from(self)</code>.\nLookup a signature\nConstruct a <code>MemoryStyle</code> for the provided <code>MemoryType</code>\nReturns the name of this engine\nCreate a new <code>Engine</code> with the given config\nCreate a new <code>Engine</code> with the given config\nRegister a signature\nSets the hash algorithm\nSets the hash algorithm\nAttach a Tunable to this engine\nAttach a Tunable to this engine\nFor static heaps, the size in wasm pages of the heap …\nThe size in bytes of the offset guard for static heaps.\nConstruct a <code>TableStyle</code> for the provided <code>TableType</code>\nGets the target\nGets the target\nGet a reference to attached Tunable of this engine\nGet a reference to attached Tunable of this engine\nValidates a WebAssembly module\nGet the VMConfig for this tunables Currently, VMConfig …\nAdd suggested optimizations to this engine.\nA WebAssembly <code>function</code> instance, in the <code>sys</code> runtime.\nA WebAssembly <code>global</code> in the <code>sys</code> runtime.\nA WebAssembly <code>instance</code> in the <code>sys</code> runtime.\nA WebAssembly <code>memory</code> in the <code>sys</code> runtime.\nA WebAssembly <code>memory</code> view.\nA WebAssembly <code>module</code> in the <code>sys</code> runtime.\nThe custom trait to access to all the <code>sys</code> functions in the …\nA WebAssembly <code>store</code> in the <code>sys</code> runtime.\nHandle to an object managed by a context.\nSet of objects managed by a context.\nReturn an vector of all globals and converted to u128\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>StoreHandle</code> from a <code>StoreId</code> and an …\nReturns a reference to the object that this handle points …\nReturns a pair of mutable references from two handles.\nReturns a mutable reference to the object that this handle …\nReturns the ID of this context.\nReturns the internal handle contains within this handle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an immutable iterator over all globals\nMoves the given object into a context and returns a handle …\nCreate a new instance of <code>Self</code>\nSet a global, at index idx. Will panic if idx is out of …\nSets the ID of this store\nOverrides the store id with a new ID\nSets the trap handler\nThe signal handler\nReturns the ID of the context associated with the handle.\nA WebAssembly <code>table</code> in the <code>sys</code> runtime.\nalloc_exception\nAtomic operations are disabled.\nThe memory does not support atomic operations.\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nSignatures are stored in the table and checked in the …\nceil.f32\nceil.f64\nThe operation would cause the size of the memory to exceed …\ndata.drop\ndebug_str\ndebug_usize\ndelete_exception\nA dynamic function has the native signature: …\nThe actual memory can be resized and moved.\nThe personality function\nelem.drop\nOpaque pointer to arbitrary hostdata.\nfloor.f32\nfloor.f64\nPointer to function: contains enough information to call …\nref.func\nA function export value.\nA safe wrapper around <code>VMFunctionBody</code>.\nA user defined error value, used for error cases not …\nA global export value.\nA <code>heap_addr</code> instruction detected an out-of-bounds error.\nA <code>heap_addr</code> instruction was misaligned.\nThe data is owned here.\nmemory.atomic.botify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nResolved import pointers.\nIndirect call to a null table entry.\nThe data is stored inline in the <code>VMContext</code> of an instance.\nThis is an intermediate type that manages the raw …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nInternal handle to an object owned by the current context.\nInvalid memory was provided.\nA trap raised from a wasm libcall\nThe name of a runtime library routine.\nRepresents memory that is used by the WebAsssembly module\nCaller asked for a maximum memory greater than we can give …\nData used by the generated code is generally located …\nA memory export value.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nError type describing things that can go wrong when …\nReturned when a shared memory is required, but the given …\nImplementation styles for WebAssembly linear memory.\nCaller asked for more minimum memory than we can give them.\nA simple struct consisting of a page-aligned pointer to …\nThe type of mmap to create\nnearest.f32\nnearest.f64\nA location in memory for a Waiter\nA trap indicating that the runtime was unable to allocate …\nThe probestack based on the Rust probestack\nThe memory is private to the process and not shared with …\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nread_exception\nLow level error with mmap.\nrethrow\nPointers to section data.\nThe memory is shared with other processes. This is only …\nWebAssembly requires that the caller and callee signatures …\nThe current stack space was exhausted.\nA static function has the native signature: …\nAddress space is allocated up front.\nHandle to an object managed by a context.\nUnique ID to identify a context.\nTrait to represent an object managed by a context. This is …\nSet of objects managed by a context.\nA table export value.\nA <code>table_addr</code> instruction detected an out-of-bounds error.\ntable.copy\nA reference stored in a table. Can be either an externref …\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nImplementation styles for WebAssembly tables.\nA tag export value.\nTarget specific type for shared signature index.\nHashMap of Waiters for the Thread/Notify opcodes\nA weak handle to a <code>ThreadConditions</code> instance, which does …\nthrow\nTo many waiter for an address\nStores trace message with backtrace.\nA trap code describing the reason for a trap.\nFunction which may handle custom signals while processing …\ntrunc.f32\ntrunc.f64\nAn atomic memory access was attempted with an unaligned …\nAn exception was thrown but it was left uncaught.\nWait/Notify is not implemented for this memory\nCode that was supposed to have been unreachable was …\nReturned when trying to call a memory operation that is …\nA user-raised trap through <code>raise_user_trap</code>.\nVersion number of this crate.\nAn index type for builtin functions.\nThe VM caller-checked “anyfunc” record, for …\nConfiguration for the runtime VM Currently only the stack …\nThe VM “context”, which is pointed to by the <code>vmctx</code> arg …\nThe <code>VMDynamicFunctionContext</code> is the context that dynamic …\nUnderlying object referenced by a <code>VMExceptionRef</code>.\nRepresents an opaque reference to any data within …\nThe value of an export passed from one instance to another.\nThe type of extern functions in the <code>sys</code> VM.\nThe type of extern globals in the <code>sys</code> VM.\nThe type of extern memories in the <code>sys</code> VM.\nUnderlying object referenced by a <code>VMExternRef</code>.\nRepresents an opaque reference to any data within …\nThe type of extern tables in the <code>sys</code> VM.\nA function reference. A single word that points to …\nA function export value.\nA placeholder byte-sized type which is just used to …\nThe type of function callbacks in the <code>sys</code> VM.\nUnion representing the first parameter passed when calling …\nUnderlying FunctionEnvironment used by a <code>VMFunction</code>.\nAn imported function.\nA function kind is a calling convention into and out of …\nA Global instance\nThe storage for a WebAssembly global defined within the …\nThe fields compiled code needs to access to utilize a …\nA handle holding an <code>Instance</code> of a WebAssembly module.\nRepresents linear memory that can be either owned or shared\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nThis class computes offsets to fields within VMContext and …\nA linear memory instance.\nA shared linear memory instance.\nAn index into the shared signature registry, usable for …\nA table instance.\nThe fields compiled code needs to access to utilize a …\nThe fields compiled code needs to access to utilize a …\nA tag export value.\nThe fields compiled code needs to access to utilize a …\nThe type for tramplines in the VM.\nError that can occur during wait/notify calls.\nA trap raised from the Wasm generated code\nCreate a new <code>Mmap</code> pointing to <code>accessible_size</code> bytes of …\nThe address of the inner dynamic function.\nThe address of the Waiter location\nPointer to the <code>VMCallerCheckedAnyfunc</code> which contains data …\nReturns a mutable reference to the underlying value.\nReturn the allocated memory as a mutable pointer to u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a mutable slice of u8.\nReturns underlying pointer to the VM data.\nReturn the allocated memory as a pointer to u8.\nReturns a reference to the underlying value.\nReturns a reference to the underlying value.\nReturns a reference to the underlying value.\nReturn the allocated memory as a slice of u8.\nReturn the allocated memory as a slice of u8.\nReturn the allocated memory as a slice of u8.\nPointer to the table data.\nThe start address which is always valid, even if the …\nA pointer to the imported function body.\nReturns the total number of builtin functions.\nAddress of the function call trampoline to invoke this …\nCatches any wasm traps that happen within the execution of …\nThe contents of the environment.\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nDuplicate in a new memory mapping.\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nCopies this global\nCopies the table into a new table\nCopy <code>len</code> elements from <code>table[src_index..]</code> to …\nThe context that the inner dynamic function will receive.\nThe current number of elements in the table.\nThe current logical size of this linear memory in bytes.\nA pointer to the imported table description.\nA pointer to the imported memory description.\nA pointer to the imported global variable description.\nDisable the use of atomics, leading to all atomic waits …\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list. Return the number of …\nNotify waiters from the wait list\nAdd current thread to the waiter hash, and wait until …\nAdd current thread to the waiter hash\nAttempts to downcast the <code>Trap</code> to a concrete type.\nAttempts to downcast the <code>Trap</code> to a concrete type.\nGet a weak handle to this <code>ThreadConditions</code> instance.\nDuplicate in a new memory mapping.\nA pointer to the <code>VMContext</code> that owns the function or host …\nReturn an iterator over the exports of this instance.\nFinishes the instantiation process started by <code>Instance::new</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates VMMemory from a custom implementation - the …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear table instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nExtracts a <code>VMExceptionRef</code> from a <code>RawValue</code>.\nExtracts a <code>VMExternRef</code> from a <code>RawValue</code>.\nExtracts a <code>VMFuncRef</code> from a <code>RawValue</code>.\nFunction body.\nResolved addresses for imported functions.\nReturns a reference to the object that this handle points …\nGet reference to the specified element.\nReturns an index for wasm’s <code>data.drop</code> instruction.\nReturns an index for wasm’s <code>elem.drop</code>.\nReturns an index for wasm’s <code>func.ref</code> instruction.\nReturns an index for wasm’s imported <code>alloc_exception</code> …\nReturns an index for wasm’s imported <code>debug_str</code> builtin …\nReturns an index for wasm’s imported <code>debug_usize</code> builtin …\nReturns an index for wasm’s imported <code>delete_exception</code> …\nReturns an index for wasm’s imported <code>memory.grow</code> builtin …\nReturns an index for wasm’s imported <code>memory.size</code> builtin …\nReturns an index for wasm’s imported <code>memory.atomic.notify</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait32</code>…\nReturns an index for wasm’s imported <code>memory.atomic.wait64</code>…\nReturns an index for wasm’s <code>memory.copy</code> for imported …\nReturns an index for wasm’s <code>memory.fill</code> for imported …\nReturns an index for wasm’s imported <code>read_exception</code> …\nReturns an index for wasm’s imported <code>rethrow</code> builtin …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nReturns an index for wasm’s imported <code>throw</code> builtin …\nGet a table defined locally within this module.\nReturns an index for wasm’s <code>memory.grow</code> builtin function.\nReturns an index for wasm’s <code>memory.size</code> builtin function.\nReturns an index for wasm’s local <code>memory.atomic.notify</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait32</code> …\nReturns an index for wasm’s local <code>memory.atomic.wait64</code> …\nReturns an index for wasm’s <code>memory.copy</code> for locally …\nReturns an index for wasm’s <code>memory.fill</code> for locally …\nReturns an index for wasm’s <code>memory.init</code> instruction.\nReturns a mutable reference to the object that this handle …\nReturns an index for wasm’s <code>raise_trap</code> instruction.\nReturns the number of pages in the allocated memory block\nReturns the size of the table\nReturns an index for wasm’s <code>table.copy</code> when both tables …\nReturns an index for wasm’s <code>table.fill</code> instruction for …\nReturns an index for wasm’s <code>table.get</code> instruction for …\nReturns an index for wasm’s <code>table.grow</code> instruction for …\nReturns an index for wasm’s <code>table.init</code>.\nReturns an index for wasm’s <code>table.set</code> instruction for …\nReturns an index for wasm’s <code>table.size</code> instruction for …\nResolved addresses for imported globals.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow table by the specified amount of elements.\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nHandle to the <code>VMFunction</code> in the context.\nHandle to the <code>VMTable</code> in the context.\nA handle to the <code>Memory</code> that owns the memory description.\nA handle to the <code>Tag</code> that owns the tag description.\nA handle to the <code>Global</code> that owns the global description.\nAssociated data owned by a host function.\nHost functions can have custom environments.\nReturn the index as an u32 number.\nReturns index value.\nThis function is required to be called before any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>VMExceptionRef</code> into a <code>RawValue</code>.\nConverts the <code>VMExternRef</code> into a <code>RawValue</code>.\nConverts the <code>VMFuncRef</code> into a <code>RawValue</code>.\nReturns true if the <code>Trap</code> is the same as T\nReturn whether any memory has been allocated.\nCheck whether the pointer stored is null or not.\nThe function kind (specifies the calling convention for the\nThe kind of tag.\nReturn the length of the allocated memory.\nConstruct a new Wasm trap with the given trap code.\nRuntime library calls.\nList the objects in the store.\nList the objects in the store, mutably.\nLookup an export with the given name.\nLooks up a shared signature index within this registry.\nLookup an export with the given export declaration.\nMake the memory starting at <code>start</code> and extending for <code>len</code> …\nResolved addresses for imported memories.\nGrow memory in this instance by the specified amount of …\nReturn the memory index for the given <code>VMMemoryDefinition</code> …\nGets the message for this trap code\nReturn a reference-counting pointer to a module.\nReturn a reference to a module.\nWraps the given value to expose it to Wasm code as a …\nAllocates instance data for use with <code>VMInstance::new</code>.\nMoves the given object into a context and returns a handle …\nWraps the given value to expose it to Wasm code as an …\nCreate a new <code>VMTag</code>.\nWraps the given value to expose it to Wasm code as an …\nCreate a new, zero bit-pattern initialized global from a …\nConstruct a new <code>Imports</code> instance.\nCreate a new <code>VMInstance</code> pointing at a new <code>Instance</code>.\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreates a new linear memory instance of the correct type …\nConstruct a new empty instance of <code>Mmap</code>.\nCreate a new <code>SignatureRegistry</code>.\nCreate a new linear table instance with specified minimum …\nCreate a new ThreadConditions\nConstruct a <code>VMGlobalDefinition</code>.\nCreate a new <code>VMSharedSignatureIndex</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size.\nConstructs <code>TargetSharedSignatureIndex</code>.\nReturn a new <code>VMOffsets</code> instance, for a given pointer size …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nConstruct a new <code>Imports</code> instance with no imports.\nNumber of local memories defined in the module\nNumber of local tables defined in the module\nWhen executing on the Wasm stack, temporarily switch back …\nConstruct a new OOM trap with the given source location …\nRaises a trap from inside library code immediately.\nRaises a user-defined trap immediately.\nRegister a signature and return its unique index.\nResets the memory back to zero length\nResets the memory down to a zero size\nResets the memory down to a zero size\nResets the memory down to a zero size\nCarries a Rust panic across wasm code and resumes the …\nSet reference to the specified element.\nDefault stack size is 1MB.\nThe function type, used for compatibility checking.\nThe tag type, used for compatibility checking.\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the number of allocated elements.\nReturn the size of <code>VMFuncRef</code>.\nReturn the size of <code>VMCallerCheckedAnyfunc</code>.\nReturn the size of the <code>VMContext</code> allocation.\nReturn the size of <code>VMDynamicFunctionContext</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMFunctionImport</code>.\nReturn the size of <code>VMGlobalImport</code>.\nReturn the size of a pointer to a <code>VMGlobalDefinition</code>;\nReturn the size of <code>VMMemoryDefinition</code>.\nThe size of the <code>current_length</code> field.\nReturn the size of <code>VMMemoryImport</code>.\nReturn the size of <code>VMSharedSignatureIndex</code>.\nReturn the size of <code>VMTableDefinition</code>.\nThe size of the <code>current_elements</code> field.\nReturn the size of <code>VMTableImport</code>.\nReturn the size of <code>VMTagImport</code>.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the style for this Table.\nGet table element reference.\nGrow table in this instance by the specified amount of …\nReturn the table index for the given <code>VMTableDefinition</code> in …\nSet table element reference.\nResolved addresses for imported tables.\nResolved addresses for imported memories.\nAccess the internal atomics handler.\nReturn the function name associated to the libcall.\nConverts this owned memory into shared memory\nReturns trap code, if it’s a Trap\nAttempts to clone this memory (if its clonable)\nOwned memory can not be cloned (this will always return …\nShared memory can always be cloned\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nGet the type of the global.\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this Table.\nFunction signature id.\nAttempt to upgrade this handle to a strong reference.\nConstruct a new Error with the given a user error.\nRaw value of the global.\nThe offset to the pointer to the anyfunc inside the ref.\nThe offset of the <code>call_trampoline</code> field.\nThe offset of the <code>func_ptr</code> field.\nThe offset of the <code>type_index</code> field.\nThe offset of the <code>vmctx</code> field.\nReturn a reference to the vmctx used by compiled wasm code.\nWasm functions take a pointer to <code>VMContext</code>.\nFunction <code>VMContext</code> or host env.\nReturn the offset to builtin function in …\nThe offset of the builtin functions array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nThe offset of the <code>tables</code> array.\nThe offset of the <code>globals</code> array.\nThe offset of the <code>memories</code> array.\nReturn a raw pointer to the vmctx used by compiled wasm …\nThe offset of the <code>signature_ids</code> array.\nThe offset of the <code>tables</code> array.\nReturn the offset to <code>VMFunctionImport</code> index <code>index</code>.\nReturn the offset to the <code>body</code> field in …\nReturn the offset to the <code>vmctx</code> field in …\nReturn the offset to the <code>VMGlobalDefinition</code> index <code>index</code>.\nReturn the offset to <code>VMGlobalImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMGlobalImport</code> …\nReturn the offset to <code>VMMemoryDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMMemoryDefinition</code> …\nReturn the offset to the <code>current_length</code> field in …\nReturn the offset to <code>VMMemoryImport</code> index <code>index</code>.\nReturn the offset to the <code>from</code> field in <code>VMMemoryImport</code> …\nReturn the offset to the <code>vmctx</code> field in <code>VMMemoryImport</code> …\nReturn the offset to <code>VMSharedSignatureIndex</code> index <code>index</code>.\nReturn the offset to <code>VMTableDefinition</code> index <code>index</code>.\nReturn the offset to the <code>base</code> field in <code>VMTableDefinition</code> …\nReturn the offset to the <code>current_elements</code> field in …\nReturn the offset to <code>VMTableImport</code> index <code>index</code>.\nReturn the offset to the <code>definition</code> field in <code>VMTableImport</code> …\nReturn the offset to <code>VMTagImport</code> index <code>index</code>.\nThe offset of the <code>address</code> field.\nThe offset of the <code>ctx</code> field.\nThe offset of the <code>body</code> field.\nThe offset of the <code>handle</code> field.\nThe offset of the <code>vmctx</code> field.\nGet a pointer to the underlying definition used by the …\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_length</code> field.\nThe offset of the <code>from</code> field.\nThe offset of the <code>handle</code> field.\nReturn a reference to the <code>VMOffsets</code> to get offsets in the …\nReturn a <code>VMTableDefinition</code> for exposing the table to …\nThe offset of the <code>base</code> field.\nThe offset of the <code>current_elements</code> field.\nThe offset of the <code>definition</code> field.\nThe offset of the <code>handle</code> field.\nWake all the waiters, <em>without</em> marking them as notified.\nConstruct a new Wasm trap with the given source location …\nOptionnal stack size (in byte) of the VM. Value lower than …\nCall the wasm function pointed to by <code>callee</code>.\nCreate a new <code>Mmap</code> pointing to at least <code>size</code> bytes of …\nThe attempted amount to grow by in pages.\nThe current size in pages.\nThe maximum amount of memory we can allocate.\nThe number of pages requested as the maximum amount of …\nThe number of pages requested as the maximum amount of …\nMessage describing the unsupported operation.\nThe number of pages requested as the minimum amount of …\nThe reason why the provided memory is invalid.\nThe number of mapped and unmapped pages.\nOur chosen offset-guard size.\nOur chosen offset-guard size.\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the trap occurred\nNative stack backtrace at the time the OOM occurred\nThe program counter in generated code where this trap …\nOptional trapcode associated to the signal that caused the …\nCode of the trap.\nalloc_exception\nceil.f32\nceil.f64\ndata.drop\ndebug_str\ndebug_usize\ndelete_exception\nThe personality function\nelem.drop\nfloor.f32\nfloor.f64\nref.func\nmemory.atomic.botify for imported memories\nmemory.atomic.wait32 for imported memories\nmemory.atomic.wait64 for imported memories\nmemory.copy for imported memories\nmemory.fill for imported memories\nmemory.size for imported functions\ntable.get for imported tables\ntable.grow for imported tables\ntable.set for imported tables\ntable.size for imported tables\nThe name of a runtime library routine.\nmemory.atomic.notify for local memories\nmemory.atomic.wait32 for local memories\nmemory.atomic.wait64 for local memories\nmemory.copy for local memories\nmemory.fill for local memories\nmemory.init\nmemory.size for local functions\nnearest.f32\nnearest.f64\nprobe for stack overflow. These are emitted for functions …\nA custom trap\nread_exception\nrethrow\ntable.copy\ntable.fill\ntable.get for local tables\ntable.grow for local tables\ntable.init\ntable.set for local tables\ntable.size for local tables\nthrow\ntrunc.f32\ntrunc.f64\nThe function pointer to a libcall\nThe implementation of Wasmer’s personality function.\nImplementation for allocating an exception.\nImplementation of <code>data.drop</code>.\n(debug) Print a string.\n(debug) Print an usize.\nImplementation for deleting the data of an exception.\nImplementation of <code>elem.drop</code>.\nImplementation of f32.ceil\nImplementation of f32.floor\nImplementation of f32.nearest\nImplementation of f32.trunc\nImplementation of f64.ceil\nImplementation of f64.floor\nImplementation of f64.nearest\nImplementation of f64.trunc\nImplementation of <code>func.ref</code>.\nImplementation of memory.notfy for imported 32-bit …\nImplementation of memory.wait32 for imported 32-bit …\nImplementation of memory.wait64 for imported 32-bit …\nImplementation of <code>memory.copy</code> for imported memories.\nImplementation of <code>memory.fill</code> for imported memories.\nImplementation of memory.grow for imported 32-bit memories.\nImplementation of memory.size for imported 32-bit memories.\nImplementation of <code>table.get</code> for imported tables.\nImplementation of <code>table.grow</code> for imported tables.\nImplementation of <code>table.set</code> for imported tables.\nImplementation of <code>table.size</code> for imported tables.\nImplementation of memory.notfy for locally-defined 32-bit …\nImplementation of memory.wait32 for locally-defined 32-bit …\nImplementation of memory.wait64 for locally-defined 32-bit …\nImplementation of <code>memory.copy</code> for locally defined memories.\nImplementation of <code>memory.fill</code> for locally defined memories.\nImplementation of memory.grow for locally-defined 32-bit …\nImplementation of <code>memory.init</code>.\nImplementation of memory.size for locally-defined 32-bit …\nProbestack check\nImplementation for raising a trap\nImplementation for reading a <code>WasmerException</code> from a …\nImplementation for throwing an exception.\nImplementation of <code>table.copy</code>.\nImplementation of <code>table.fill</code>.\nImplementation of <code>table.get</code>.\nImplementation of <code>table.grow</code> for locally-defined tables.\nImplementation of <code>table.init</code>.\nImplementation of <code>table.set</code>.\nImplementation of <code>table.size</code>.\nImplementation for throwing an exception.\nConvert bynary data into <code>bytes::Bytes</code>.\nUseful data types, functions and traits for interacting …\nUseful data types, functions and traits for the …\nUseful macros to generate enums to represent <code>Runtime</code>-types.\nConvert binary data into <code>bytes::Bytes</code>.\nConvert binary data into <code>bytes::Bytes</code>.\nAutomatically generate “backend” types.\nAutomatically create a match statement, repeating the …\nMemory access is outside heap bounds.\nMarker trait for 32-bit memories.\nMarker trait for 64-bit memories.\nError for invalid <code>Memory</code> access.\nTrait for the <code>Memory32</code> and <code>Memory64</code> marker types.\nType used to pass this value as an argument or return …\nString is not valid UTF-8.\nOne value used for counting.\nType used to represent an offset into a memory. This is <code>u32</code>…\nAddress calculation overflow.\nPointer to memory is unaligned.\nTrait for a Value type. A Value type is a type that is …\nReference to a value in Wasm memory.\nReference to an array of values in Wasm memory.\nIterator over the elements of a <code>WasmSlice</code>.\nZero value used for <code>WasmPtr::is_null</code>.\nGains direct access to the memory of this slice\nGains direct access to the memory of this slice\nGet a <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 32-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 64-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nGet a 64-bit <code>WasmPtr</code> for this <code>WasmRef</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>WasmRef</code> to an element in the slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTrue if the memory is 64-bit\nReturns <code>true</code> if the number of elements is 0.\nGet an iterator over the elements in this slice.\nGet the number of elements in this slice.\nConvert a <code>Native</code> to an <code>Offset</code>.\nCreates a new <code>WasmRef</code> at the given offset in a memory.\nCreates a new <code>WasmSlice</code> starting at the given offset in …\nGet the offset into Wasm linear memory for this <code>WasmRef</code>.\nGet the offset into Wasm linear memory for this <code>WasmSlice</code>.\nConvert an <code>Offset</code> to a <code>Native</code>.\nReads the location pointed to by this <code>WasmRef</code>.\nReads an element of this slice.\nReads the entire slice into the given buffer.\nReads the entire slice into the given uninitialized buffer.\nReads this <code>WasmSlice</code> into a <code>BytesMut</code>\nReads this <code>WasmSlice</code> into a <code>slice</code>.\nReads this <code>WasmSlice</code> into a <code>Vec</code>.\nGet a <code>WasmSlice</code> for a subslice of this slice.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nWrites to the location pointed to by this <code>WasmRef</code>.\nWrites to an element of this slice.\nWrite the given slice into this <code>WasmSlice</code>.\nThis method is passed a byte slice which contains the byte …\nProvides direct memory access to a piece of memory that is …\nProvides direct memory access to a piece of memory that is …\nReturns a mutable slice that is not yet initialized\nReturns a reference to an unitialized reference to this …\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the slice is empty\nReturns an iterator of all the elements in the slice\nReturns an iterator of all the elements in the slice\nNumber of elements in this slice\nReads the address pointed to by this <code>WasmPtr</code> in a memory.\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nA zero-cost type that represents a pointer to something in …\nAlias for `WasmPtr&lt;T, Memory64&gt;.\nCreates a <code>WasmAccess</code>\nCalculates an offset from the current pointer address. The …\nCasts this <code>WasmPtr</code> to a <code>WasmPtr</code> of a different type.\nCreates a <code>WasmRef</code> from this <code>WasmPtr</code> which allows reading …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the <code>WasmPtr</code> is null.\nCreate a new <code>WasmPtr</code> at the given offset.\nReturns a null <code>UserPtr</code>.\nGet the offset into Wasm linear memory for this <code>WasmPtr</code>.\nReads the address pointed to by this <code>WasmPtr</code> in a memory.\nReads a sequence of values from this <code>WasmPtr</code> until a value …\nReads a UTF-8 string from the <code>WasmPtr</code> with the given …\nReads a null-terminated UTF-8 string from the <code>WasmPtr</code>.\nCreates a <code>WasmSlice</code> starting at this <code>WasmPtr</code> which allows …\nCalculates an offset from the current pointer address. The …\nWrites to the address pointed to by this <code>WasmPtr</code> in a …\nTraits and implementations used to convert between native …\nTrait to interact with native functions. Native Functions.\nThe ABI for this type (i32, i64, f32, f64)\nThe array type that can hold all the represented values.\nThe C type (a struct) that can hold/represent all the …\nThe error type for this trait.\nA trait to convert a Rust value to a <code>WasmNativeType</code> value, …\nThe <code>IntoResult</code> trait turns a <code>WasmTypeList</code> into a …\nNative Wasm type.\n<code>NativeWasmType</code> represents a Wasm type that has a direct …\n<code>NativeWasmTypeInto</code> performs conversions from and into …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nA structure with a C-compatible representation that can …\nType for this <code>NativeWasmType</code>.\nThe <code>WasmTypeList</code> trait represents a tuple (list) of Wasm …\nAllocates and return an empty array of type <code>Array</code> that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>Self</code> based on an array of values.\nBuilds a tuple (list) of values from a C struct of type …\nConvert a value of kind <code>Self::Native</code> to <code>Self</code>.\nConvert to self from raw value representation.\nConstructs <code>Self</code> based on a slice of values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds and returns an array of type <code>Array</code> from a tuple …\nBuilds and returns a C struct of type <code>CStruct</code> from a tuple …\nConvert self to raw value representation.\nTransforms <code>Self</code> into a <code>Result</code>.\nReturns whether the given value is from the given store.\nReturns whether the given value is from the given store.\nThe size of the array\nConvert self to <code>Self::Native</code>.\nGet the Wasm types for the tuple (list) of currently …\nWrites the contents of a C struct to an array of <code>RawValue</code>.\nA WebAssembly function that can be called natively (using …\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nCall the typed func and return results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.\nThe enum for all those VM values of this kind.")