searchState.loadedDescShard("wasmer_sys_utils", 0, "Represents linear memory that can be either owned or shared\nA linear memory instance.\nA shared linear memory instance.\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrow memory by the specified amount of wasm pages.\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nGrows the memory to at least a minimum size. If the memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory management for linear memories.\nResets the memory back down to zero size\nResets the memory down to a zero size\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the size of hte memory in pages\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nReturns the memory style for this memory.\nOwned memory can not be cloned (this will always return …\nShared memory can always be cloned\nAttempts to clone this memory (if its clonable)\nReturns the type for this memory.\nReturns the type for this memory.\nReturns the type for this memory.\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nReturn a <code>VMMemoryDefinition</code> for exposing the memory to …\nA simple struct consisting of a page-aligned pointer to …\nCreate a new <code>Mmap</code> pointing to <code>accessible_size</code> bytes of …\nReturn the allocated memory as a mutable pointer to u8.\nReturn the allocated memory as a mutable slice of u8.\nReturn the allocated memory as a slice of u8.\nCopy a range of a file to another file.\nCopies the memory to a new swap file (using copy-on-write …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the length of the allocated memory.\nMake the memory starting at <code>start</code> and extending for <code>len</code> …\nConstruct a new empty instance of <code>Mmap</code>.\nRepresents linear memory that can be either owned or shared\nA linear memory instance.\nA linear memory instance.\nA shared linear memory instance.\nCopies the memory (in this case it performs a …\nCopies this memory to a new memory\nCopies this memory to a new memory\nCopies this memory to a new memory\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates VMMemory from a custom implementation - the …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nReturns the number of pages in the allocated memory block\nGrows the memory to at least a minimum size. If the memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe WebAssembly linear memory description.\nCreate a new linear memory instance with specified minimum …\nCreate a new linear memory instance with specified minimum …\nCreates a new linear memory instance of the correct type …\nBuild a <code>Memory</code> with either self-owned or VM owned metadata.\nOur chosen implementation style.\nConverts this owned memory into shared memory\nThe owned memory definition used by the generated code")