searchState.loadedDescShard("wasmer_compiler", 1, "Get atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nSignals the processor that it is inside a busy-wait …\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nThe message could not be sent because the channel is …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nAn error returned from the <code>send_timeout</code> method.\nThe sending-half of Rust’s synchronous <code>channel</code> type.\nThe message could not be sent because the channel is full …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nCreates a new asynchronous channel, returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>TryRecvError</code>.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>SendError&lt;T&gt;</code> into a <code>TrySendError&lt;T&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns an iterator that will block waiting for messages, …\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value on this channel, returning it …\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a new synchronous, bounded channel.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns an iterator that will attempt to yield all pending …\nAttempts to receive a message from the channel without …\nAttempts to send a message into the channel without …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nThe sending-half of Rust’s asynchronous <code>channel</code> type.\nThe sending-half of Rust’s synchronous <code>sync_channel</code> type.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nCreates a new asynchronous channel, returning the …\nClone a sender to send to other threads.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns an iterator that will block waiting for messages, …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to send a value on this channel, returning it …\nSends a value on this synchronous channel.\nCreates a new synchronous, bounded channel.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns an iterator that will attempt to yield all pending …\nAttempts to return a pending value on this receiver …\nAttempts to send a value on this channel without blocking.\nA Condition Variable\nContains the error value\nContains the error value\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA type indicating whether a timed wait on a condition …\nThe lock could not be acquired at this time because the …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer, or …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the subslice indicated by the given range from the …\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a boxed slice into a vector by transferring …\nReturns the argument unchanged.\nConverts a clone-on-write slice into a vector.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element from a vector if the …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nA writable relocatable object file.\nThe Object error can occur when creating an object file …\nObjectMetadataBuilder builds serialized module metadata …\nThe module provided could not be serialized into bytes\nThe object was provided an unknown endianness\nThe object was provided a not-supported architecture\nThe object was provided a not-supported binary format\nThe object was provided a not-supported architecture\nAppends linker directives to the <code>.drectve</code> section to tell …\nAdd a new COMDAT section group and return its <code>ComdatId</code>.\nAdd a new common symbol and return its <code>SymbolId</code>.\nAdd a property with a u32 value to the ELF “…\nAdd a new file symbol and return its <code>SymbolId</code>.\nAdd a relocation to a section.\nAdd a new section and return its <code>SectionId</code>.\nAdd a subsection. Returns the <code>SectionId</code> and section offset …\nAdd a new symbol and return its <code>SymbolId</code>.\nAppend zero-initialized data to an existing section, and …\nAppend data to an existing section, and update a symbol to …\nAppend zero-initialized data to an existing section. …\nAppend data to an existing section. Returns the section …\nReturn the architecture.\nGet the COMDAT section group with the given <code>ComdatId</code>.\nMutably get the COMDAT section group with the given …\nWrite the object to a <code>WritableBuffer</code>.\nEmit the compilation result into an existing object.\nWrite data into an existing object.\nEmit the compilation result into an existing object.\nFile flags that are specific to each file format.\nReturn the file format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an object for a given target <code>Triple</code>.\nReturn true if the file format supports …\nReturn true if the file format supports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the current mangling setting.\nThe symbol name mangling scheme.\nCreate an empty object file.\nGet the section with the given <code>SectionId</code>.\nReturn the <code>SectionId</code> of a standard section.\nMutably get the section with the given <code>SectionId</code>.\nGet the symbol for a section.\nReturn the name for a standard segment.\nSpecify information for a Mach-O <code>LC_BUILD_VERSION</code> command.\nSpecify the Mach-O CPU subtype.\nSpecify the mangling setting.\nSet the data for an existing section.\nSpecify the sub-architecture.\nUpdate a symbol to refer to the given data within a …\nReturn the sub-architecture.\nGet the symbol with the given <code>SymbolId</code>.\nGet the <code>SymbolId</code> of the symbol with the given name.\nMutably get the symbol with the given <code>SymbolId</code>.\nConvert a symbol to a section symbol and offset.\nWrite the object to a <code>Vec</code>.\nWrite the object to a <code>Write</code> implementation.\nThe Object error can occur when creating an object file …\nThe module provided could not be serialized into bytes\nThe object was provided an unknown endianness\nThe object was provided a not-supported architecture\nThe object was provided a not-supported binary format\nThe object was provided a not-supported architecture\nObjectMetadataBuilder builds serialized module metadata …\nEmit the compilation result into an existing object.\nWrite data into an existing object.\nEmit the compilation result into an existing object.\nCreate an object for a given target <code>Triple</code>.\nCreates a new FunctionRelocsBuilder\nPlaceholder data for emit_data call\nBytes of a pointer for target architecture\nSets section offset used in relocations\nSets up relocation for a dynamic function trampoline …\nSets up relocation for a function pointer\nSets up relocation for a trampoline\nAlignment of the metadata.\nAn archived <code>SerializableCompilation</code>\nAn archived <code>SerializableModule</code>\nCurrent ABI version. Increment this any time breaking …\nLength of the metadata header.\nMetadata header which holds an ABI version and the length …\nThe compilation related data for a serialized modules\nThe resolver for an archived <code>SerializableCompilation</code>\nSerializable struct that is able to serialize from and to …\nThe resolver for an archived <code>SerializableModule</code>\nSafety\nDeserialize an archived module.\nThe archived counterpart of <code>SerializableModule::compilation</code>\nThe main serializable compilation object\nThe archived counterpart of …\nCompilation informations\nReturns the CPU features for this Artifact\nThe archived counterpart of …\nCPU Feature flags for this compilation\nCreate a <code>ModuleInfo</code> for instantiation\nThe archived counterpart of …\nThe archived counterpart of …\nReturns data initializers to pass to <code>VMInstance::initialize</code>\nThe archived counterpart of …\nDatas initializers\nDeserialize a Module from a slice. The slice must have the …\nDeserialize a compilation module from an archive\nDeserialize a Module from a slice. The slice must have the …\nThe archived counterpart of …\nReturns the features for this Artifact\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>SerializableCompilation::got</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the header into its bytes representation.\nThe archived counterpart of …\nThe archived counterpart of …\nReturns the memory styles associated with this <code>Artifact</code>.\nReturns the <code>ModuleInfo</code> for instantiation\nCreates a new header for metadata of the given length.\nParses the header and returns the length of the metadata …\nSerialize a Compilation into bytes The bytes will have the …\nSerialize a Module into bytes The bytes will have the …\nReturns the table plans associated with this <code>Artifact</code>.\nThe archived counterpart of …\nAn <code>Artifact</code> is the product that the <code>Engine</code> implementation …\nType of <code>OwnedDataInitializer</code> returned by the …\nType of iterator returned by the <code>data_initializers</code> method\nTrait needed to get downcasting of <code>Engine</code>s to work.\nReturns the CPU features for this Artifact\nCreate a <code>ModuleInfo</code> for instantiation\nReturns data initializers to pass to <code>VMInstance::initialize</code>\nTry to downcast the artifact into a given type mutably.\nTry to downcast the artifact into a given type.\nReturns the features for this Artifact\nReturns the memory styles associated with this <code>Artifact</code>.\nReturns the <code>ModuleInfo</code> for instantiation\nSerializes an artifact into bytes\nSets the <code>ModuleInfo</code> name\nReturns the table plans associated with this <code>Artifact</code>.\nupcast boxed dyn\nupcast mut ref\nupcast ref\nThe middleware parses the function binary bytecodes and …\nTranslation skeleton that traverses the whole WebAssembly …\nHelper functions to gather information for each of the …\nTrait for iterating over the operators of a Wasm Function\nContains function data: bytecode and its offset in the …\nThe result of translating via <code>ModuleEnvironment</code>. Function …\nReturns the number of bytes remaining.\nReturns the current position.\nIndicates that a custom section has been found in the wasm …\nFunction body bytecode.\nReferences to the data initializers.\nReturns whether the readers has reached the end of the …\nNotifies the implementation that all exports have been …\nReferences to the function bodies.\nModuleInfo information.\nBody offset relative to the module file.\nThe decoded Wasm types for the module.\nAllocates the environment data structures.\nReturns the original position (with the offset)\nReturn the range (original offset, original offset + data …\nRead a <code>count</code> indicating the number of times to call …\nRead a <code>(count, value_type)</code> declaration of local variables …\nReads the next available <code>Operator</code>.\nProvides the number of imports up front. By default this …\nTranslate a wasm module using this environment. This …\nMake a <code>CompileError</code> out of a <code>BinaryReaderError</code>.\nMake a <code>WasmError</code> out of a <code>BinaryReaderError</code>.\nA function middleware specialized for a single function.\nA Middleware binary reader of the WebAssembly structures …\nThe state of the binary reader. Exposed to middlewares to …\nA shared builder for function middlewares.\nTrait for generating middleware chains from “prototype”…\nApplies the chain on a <code>ModuleInfo</code> struct.\nThe backing middleware chain for this reader.\nProcesses the given operator.\nGenerates a <code>FunctionMiddleware</code> for a given function.\nGenerates a function middleware chain.\nRaw binary reader.\nConstructs a <code>MiddlewareBinaryReader</code> with an explicit …\nThe pending operations added by the middleware.\nPush an operator.\nReplaces the middleware chain with a new one.\nParsing state.\nTransforms a <code>ModuleInfo</code> struct in-place. This is called …\nTranslate a sequence of bytes forming a valid Wasm binary …\nParses the Data section of the wasm module.\nParses the Element section of the wasm module.\nParses the Export section of the wasm module.\nParses the Function section of the wasm module.\nParses the Global section of the wasm module.\nParses the Import section of the wasm module.\nParses the Memory section of the wasm module.\nParses the Name section of the wasm module.\nParses the Start section of the wasm module.\nParses the Table section of the wasm module.\nParser the Tag section of the wasm module.\nParses the Type section of the wasm module.\nConverts a wasmparser heap type to a Wasm Type.\nConverts a wasmparser ref type to a Wasm Type.\nHelper function translating wasmparser types to Wasm Type.\nContains information decoded from the Wasm module that …\nMultiple values.\nA single value.\nA helper enum for representing either a single or multiple …\nMap of signatures to a function’s parameter and return …\nGet the parameter and result types for the given Wasm …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTrue if empty.\nIterate ofer the value types.\nCount of values.\nCreates a new empty ModuleTranslationState.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA map containing a Wasm module’s original, raw …\nData structures to provide transformation of the source\nA <code>Compilation</code> contains the compiled function bodies for a …\nTypes for modules.\nRelocation is the process of assigning load addresses for …\nThis module define the required structures to emit custom …\nThis module define the required structures for compilation …\nA <code>CompiledFunctionUnwindInfo</code> contains the function unwind …\nAn archived <code>FunctionAddressMap</code>\nAn archived <code>InstructionAddressMap</code>\nFunction and its instructions addresses mappings.\nThe resolver for an archived <code>FunctionAddressMap</code>\nSingle source location to generated address mapping.\nThe resolver for an archived <code>InstructionAddressMap</code>\nThe archived counterpart of <code>FunctionAddressMap::body_len</code>\nGenerated function body length.\nThe archived counterpart of <code>FunctionAddressMap::body_offset</code>\nGenerated function body offset if applicable, otherwise 0.\nThe archived counterpart of <code>InstructionAddressMap::code_len</code>\nGenerated instructions length.\nThe archived counterpart of …\nGenerated instructions offset.\nThe archived counterpart of <code>FunctionAddressMap::end_srcloc</code>\nFunction end source location.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nInstructions maps. The array is sorted by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>InstructionAddressMap::srcloc</code>\nOriginal source location.\nThe archived counterpart of …\nFunction start source location (normally declaration).\nAn archived <code>CompiledFunction</code>\nAn archived <code>CompiledFunctionFrameInfo</code>\nAn archived <code>FunctionBody</code>\nAn archived <code>GOT</code>\nAn archived <code>UnwindInfo</code>\nThe result of compiling a WebAssembly module’s functions.\nThe result of compiling a WebAssembly function.\nThe frame info for a Compiled function.\nThe resolver for an archived <code>CompiledFunctionFrameInfo</code>\nThe resolver for an archived <code>CompiledFunction</code>\nThe custom sections for a Compilation.\nThe function body.\nAny struct that acts like a <code>FunctionBody</code>.\nThe resolver for an archived <code>FunctionBody</code>\nThe compiled functions map (index in the Wasm -&gt; function)\nThe GOT - Global Offset Table - for this Compilation.\nThe resolver for an archived <code>GOT</code>\nThe unwinding information for this Compilation.\nThe resolver for an archived <code>UnwindInfo</code>\nThe archived counterpart of …\nThe address map.\nThe archived counterpart of <code>FunctionBody::body</code>\nThe function body bytes.\nThe archived counterpart of <code>CompiledFunction::body</code>\nThe function body.\nThe archived counterpart of <code>UnwindInfo::compact_unwind</code>\nCustom sections for the module. It will hold the data, for …\nTrampolines to call a dynamic function defined in a host, …\nThe archived counterpart of <code>UnwindInfo::eh_frame</code>\nThe section index in the <code>Compilation</code> that corresponds to …\nThe archived counterpart of <code>CompiledFunction::frame_info</code>\nThe frame information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrampolines to call a function defined locally in the wasm …\nCompiled code for the function bodies.\nA reference to the <code>GOT</code> instance for the compilation.\nThe archived counterpart of <code>GOT::index</code>\nThe section index in the <code>Compilation</code> that corresponds to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Dwarf</code> struct with the corresponding indices for …\nThe archived counterpart of <code>CompiledFunction::relocations</code>\nThe relocations (in the body)\nThe archived counterpart of …\nThe traps (in the function body).\nThe archived counterpart of <code>FunctionBody::unwind_info</code>\nThe function unwind info\nSection ids corresponding to the unwind information.\nAn archived <code>CompileModuleInfo</code>\nThe required info for compiling a module.\nThe resolver for an archived <code>CompileModuleInfo</code>\nThe archived counterpart of <code>CompileModuleInfo::features</code>\nThe features used for compiling the module\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nThe memory styles used for compiling.\nThe archived counterpart of <code>CompileModuleInfo::module</code>\nThe module information\nThe archived counterpart of <code>CompileModuleInfo::table_styles</code>\nThe table plans used for compiling.\nThe resolver for <code>RelocationKind::Aarch64AddAbsLo12Nc</code>\nThe archived counterpart of …\nR_AARCH64_ADD_ABS_LO12_NC\nThe resolver for <code>RelocationKind::Aarch64AdrPrelLo21</code>\nThe archived counterpart of …\nR_AARCH64_ADR_PREL_LO21\nThe resolver for <code>RelocationKind::Aarch64AdrPrelPgHi21</code>\nThe archived counterpart of …\nR_AARCH64_ADR_PREL_PG_HI21\nThe resolver for <code>RelocationKind::Aarch64Ldst128AbsLo12Nc</code>\nThe archived counterpart of …\nR_AARCH64_LDST128_ABS_LO12_NC\nThe resolver for <code>RelocationKind::Aarch64Ldst64AbsLo12Nc</code>\nThe archived counterpart of …\nR_AARCH64_LDST64_ABS_LO12_NC\nThe resolver for <code>RelocationKind::Abs4</code>\nThe archived counterpart of <code>RelocationKind::Abs4</code>\nabsolute 4-byte\nThe resolver for <code>RelocationKind::Abs8</code>\nThe archived counterpart of <code>RelocationKind::Abs8</code>\nabsolute 8-byte\nAn archived <code>Relocation</code>\nAn archived <code>RelocationKind</code>\nAn archived <code>RelocationTarget</code>\nThe resolver for <code>RelocationKind::Arm32Call</code>\nThe archived counterpart of <code>RelocationKind::Arm32Call</code>\nArm32 call target\nThe resolver for <code>RelocationKind::Arm64Call</code>\nThe archived counterpart of <code>RelocationKind::Arm64Call</code>\nArm64 call target\nThe resolver for <code>RelocationKind::Arm64Movw0</code>\nThe archived counterpart of <code>RelocationKind::Arm64Movw0</code>\nArm64 movk/z part 0\nThe resolver for <code>RelocationKind::Arm64Movw1</code>\nThe archived counterpart of <code>RelocationKind::Arm64Movw1</code>\nArm64 movk/z part 1\nThe resolver for <code>RelocationKind::Arm64Movw2</code>\nThe archived counterpart of <code>RelocationKind::Arm64Movw2</code>\nArm64 movk/z part 2\nThe resolver for <code>RelocationKind::Arm64Movw3</code>\nThe archived counterpart of <code>RelocationKind::Arm64Movw3</code>\nArm64 movk/z part 3\nThe resolver for <code>RelocationTarget::CustomSection</code>\nThe archived counterpart of <code>RelocationTarget::CustomSection</code>\nCustom sections generated by the compiler\nThe resolver for <code>RelocationTarget::DynamicTrampoline</code>\nThe archived counterpart of …\nA relocation to a dynamic trampoline.\nThe resolver for <code>RelocationKind::ElfX86_64TlsGd</code>\nThe archived counterpart of <code>RelocationKind::ElfX86_64TlsGd</code>\nElf x86_64 32 bit signed PC relative offset to two GOT …\nThe resolver for <code>RelocationKind::LArchAbs64Hi12</code>\nThe archived counterpart of <code>RelocationKind::LArchAbs64Hi12</code>\nLoongArch absolute high 12bit\nThe resolver for <code>RelocationKind::LArchAbs64Lo20</code>\nThe archived counterpart of <code>RelocationKind::LArchAbs64Lo20</code>\nLoongArch absolute low 20bit\nThe resolver for <code>RelocationKind::LArchAbsHi20</code>\nThe archived counterpart of <code>RelocationKind::LArchAbsHi20</code>\nLoongArch absolute high 20bit\nThe resolver for <code>RelocationKind::LArchAbsLo12</code>\nThe archived counterpart of <code>RelocationKind::LArchAbsLo12</code>\nLoongArch absolute low 12bit\nThe resolver for <code>RelocationKind::LArchCall36</code>\nThe archived counterpart of <code>RelocationKind::LArchCall36</code>\nLoongArch PC-relative call 38bit\nThe resolver for <code>RelocationKind::LArchPCAla64Hi12</code>\nThe archived counterpart of …\nLoongArch PC64-relative high 12bit\nThe resolver for <code>RelocationKind::LArchPCAla64Lo20</code>\nThe archived counterpart of …\nLoongArch PC64-relative low 20bit\nThe resolver for <code>RelocationKind::LArchPCAlaHi20</code>\nThe archived counterpart of <code>RelocationKind::LArchPCAlaHi20</code>\nLoongArch PC-relative high 20bit\nThe resolver for <code>RelocationKind::LArchPCAlaLo12</code>\nThe archived counterpart of <code>RelocationKind::LArchPCAlaLo12</code>\nLoongArch PC-relative low 12bit\nThe resolver for <code>RelocationTarget::LibCall</code>\nThe archived counterpart of <code>RelocationTarget::LibCall</code>\nA compiler-generated libcall.\nThe resolver for <code>RelocationTarget::LocalFunc</code>\nThe archived counterpart of <code>RelocationTarget::LocalFunc</code>\nA relocation to a function defined locally in the wasm …\nThe resolver for <code>RelocationKind::MachoArm64RelocAddend</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoArm64RelocBranch26</code>\nThe archived counterpart of …\nThe resolver for …\nThe archived counterpart of …\nThe resolver for …\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoArm64RelocPage21</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoArm64RelocPageoff12</code>\nThe archived counterpart of …\nThe resolver for …\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoArm64RelocSubtractor</code>\nThe archived counterpart of …\nThe resolver for …\nThe archived counterpart of …\nThe resolver for …\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoArm64RelocUnsigned</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocBranch</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocGot</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocGotLoad</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocSigned</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocSigned1</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocSigned2</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocSigned4</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocSubtractor</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocTlv</code>\nThe archived counterpart of …\nThe resolver for <code>RelocationKind::MachoX86_64RelocUnsigned</code>\nThe archived counterpart of …\nA record of a relocation to perform.\nRelocation kinds for every ISA.\nThe resolver for an archived <code>RelocationKind</code>\nAny struct that acts like a <code>Relocation</code>.\nThe resolver for an archived <code>Relocation</code>\nDestination function. Can be either user function or some …\nThe resolver for an archived <code>RelocationTarget</code>\nRelocations to apply to function bodies.\nThe resolver for <code>RelocationKind::RiscvCall</code>\nThe archived counterpart of <code>RelocationKind::RiscvCall</code>\nRISC-V call target\nThe resolver for <code>RelocationKind::RiscvPCRelHi20</code>\nThe archived counterpart of <code>RelocationKind::RiscvPCRelHi20</code>\nRISC-V PC-relative high 20bit\nThe resolver for <code>RelocationKind::RiscvPCRelLo12I</code>\nThe archived counterpart of <code>RelocationKind::RiscvPCRelLo12I</code>\nRISC-V PC-relative low 12bit, I-type\nThe resolver for <code>RelocationKind::X86CallPCRel4</code>\nThe archived counterpart of <code>RelocationKind::X86CallPCRel4</code>\nx86 call to PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86CallPLTRel4</code>\nThe archived counterpart of <code>RelocationKind::X86CallPLTRel4</code>\nx86 call to PLT-relative 4-byte\nThe resolver for <code>RelocationKind::X86GOTPCRel4</code>\nThe archived counterpart of <code>RelocationKind::X86GOTPCRel4</code>\nx86 GOT PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86PCRel4</code>\nThe archived counterpart of <code>RelocationKind::X86PCRel4</code>\nx86 PC-relative 4-byte\nThe resolver for <code>RelocationKind::X86PCRel8</code>\nThe archived counterpart of <code>RelocationKind::X86PCRel8</code>\nx86 PC-relative 8-byte\nThe archived counterpart of <code>Relocation::addend</code>\nThe addend to add to the relocation value.\nDisplay trait implementation drops the arch, since its …\nGiven a function start address, provide the relocation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>Relocation::kind</code>\nThe relocation kind.\nThe archived counterpart of <code>Relocation::offset</code>\nThe offset where to apply the relocation.\nThe archived counterpart of <code>Relocation::reloc_target</code>\nRelocation target.\nAn archived <code>CustomSection</code>\nAn archived <code>CustomSectionProtection</code>\nAn archived <code>SectionBody</code>\nAn archived <code>SectionIndex</code>\nA Section for a <code>Compilation</code>.\nAny struct that acts like a <code>CustomSection</code>.\nCustom section Protection.\nThe resolver for an archived <code>CustomSectionProtection</code>\nThe resolver for an archived <code>CustomSection</code>\nThe resolver for <code>CustomSectionProtection::Read</code>\nThe archived counterpart of <code>CustomSectionProtection::Read</code>\nA custom section with read permission.\nThe resolver for <code>CustomSectionProtection::ReadExecute</code>\nThe archived counterpart of …\nA custom section with read and execute permissions.\nThe bytes in the section.\nThe resolver for an archived <code>SectionBody</code>\nIndex type of a Section defined inside a WebAssembly …\nThe resolver for an archived <code>SectionIndex</code>\nThe archived counterpart of <code>CustomSection::alignment</code>\nAlignment of this section. When missing, the default value …\nReturns a raw pointer to the section’s buffer.\nDereferences into the section’s buffer.\nReturn the underlying index value as a <code>u32</code>.\nThe archived counterpart of <code>CustomSection::bytes</code>\nThe bytes corresponding to this section.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a <code>u32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the section body is empty.\nReturns whether or not the section body is empty.\nReturns the length of this section in bytes.\nReturns the length of this section in bytes.\nCreate a new section body with the given contents.\nThe archived counterpart of <code>CustomSection::protection</code>\nMemory protection that applies to this section.\nThe archived counterpart of <code>CustomSection::relocations</code>\nRelocations that apply to this custom section.\nAn archived <code>ModuleMetadata</code>\nAn archived <code>Symbol</code>\nThe resolver for <code>Symbol::DynamicFunctionTrampoline</code>\nThe archived counterpart of …\nThe dynamic function trampoline for a given function.\nThe resolver for <code>Symbol::FunctionCallTrampoline</code>\nThe archived counterpart of <code>Symbol::FunctionCallTrampoline</code>\nThe function call trampoline for a given signature.\nThe resolver for <code>Symbol::LocalFunction</code>\nThe archived counterpart of <code>Symbol::LocalFunction</code>\nA function defined in the wasm.\nThe resolver for <code>Symbol::Metadata</code>\nThe archived counterpart of <code>Symbol::Metadata</code>\nA metadata section, indexed by a unique prefix (usually …\nSerializable struct that represents the compiled metadata.\nThe resolver for an archived <code>ModuleMetadata</code>\nA simple metadata registry\nThe resolver for <code>Symbol::Section</code>\nThe archived counterpart of <code>Symbol::Section</code>\nA wasm section.\nThe kinds of wasmer_types objects that might be found in a …\nThis trait facilitates symbol name lookups in a native …\nThe resolver for an archived <code>Symbol</code>\nSafety\nSafety\nThe archived counterpart of <code>ModuleMetadata::compile_info</code>\nCompile info\nThe archived counterpart of <code>ModuleMetadata::cpu_features</code>\nCPU features used (see [<code>wasmer_types::CpuFeature</code>])\nThe archived counterpart of …\nData initializers\nDeserialize a Module from a slice. The slice must have the …\nDeserialize a compilation module from an archive\nDeserialize a Module from a slice. The slice must have the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nThe function body lengths (used to find function by …\nReturns symbol registry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a name it returns the <code>Symbol</code> for that name in the …\nSymbol prefix stirng\nThe archived counterpart of <code>ModuleMetadata::prefix</code>\nPrefix for function etc symbols\nSerialize a Module into bytes The bytes will have the …\nGet mutable ref to compile info and a copy of the registry\nGiven a <code>Symbol</code> it returns the name for that symbol in the …\nAn archived <code>CompiledFunctionUnwindInfo</code>\nCompiled function unwind information.\nAny struct that acts like a <code>CompiledFunctionUnwindInfo</code>.\nGeneric reference to data in a <code>CompiledFunctionUnwindInfo</code>\nThe resolver for an archived <code>CompiledFunctionUnwindInfo</code>\nThe resolver for <code>CompiledFunctionUnwindInfo::Dwarf</code>\nThe archived counterpart of …\nThe unwind info is added to the Dwarf section in …\nThe resolver for <code>CompiledFunctionUnwindInfo::WindowsX64</code>\nThe archived counterpart of …\nWindows UNWIND_INFO.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")